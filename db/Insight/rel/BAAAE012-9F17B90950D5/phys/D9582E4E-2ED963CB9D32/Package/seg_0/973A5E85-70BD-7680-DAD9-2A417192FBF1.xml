<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="XRAYLOGIC" directorySegmentName="seg_0" id="973A5E85-70BD-7680-DAD9-2A417192FBF1">
<sourceConnName>xraydev</sourceConnName>
<sourceObjSchema>XRAYDEV</sourceObjSchema>
<sourceObjName>XRAYLOGIC</sourceObjName>
<createdBy>maintenance</createdBy>
<createdTime>2015-01-21 03:30:16 UTC</createdTime>
<ownerDesignName>Insight</ownerDesignName>
<owner>42BF9B12-1809-88EE-330C-88F8510DCEFE</owner>
<source>CREATE OR REPLACE PACKAGE XRAYDEV.XRAYLOGIC &lt;br/&gt;AS&lt;br/&gt;  FUNCTION GET_NORMALIZED_HOURS(&lt;br/&gt;      P_USE_ID        IN INTEGER,&lt;br/&gt;      P_AS_ON         IN DATE,&lt;br/&gt;      P_HOURS_PER_DAY IN NUMBER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  PROCEDURE ACCOUNT_CREATE(&lt;br/&gt;      P_EMAIL_ADDRESS IN VARCHAR2,&lt;br/&gt;      P_PASSWORD      IN VARCHAR2 DEFAULT NULL);&lt;br/&gt;  PROCEDURE ACCOUNT_DROP(&lt;br/&gt;      P_EMAIL_ADDRESS IN VARCHAR2);&lt;br/&gt;  PROCEDURE ACCOUNT_LOCK(&lt;br/&gt;      P_KEYS IN APEX_APPLICATION_GLOBAL.VC_ARR2);&lt;br/&gt;  PROCEDURE ACCOUNT_UNLOCK(&lt;br/&gt;      P_KEYS IN APEX_APPLICATION_GLOBAL.VC_ARR2);&lt;br/&gt;  PROCEDURE CHANGE_PASSWORD(&lt;br/&gt;      P_PASSWORD IN VARCHAR2,&lt;br/&gt;      P_ID       IN INTEGER);&lt;br/&gt;  FUNCTION GET_MAILER_STATUS&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_USER_DAY_ASSIGNED_HOURS(&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN DATE)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION START_MAILER(&lt;br/&gt;      P_MAIL_SERVER                  IN VARCHAR2,&lt;br/&gt;      P_MAIL_USERNAME                IN VARCHAR2,&lt;br/&gt;      P_MAIL_PASSWORD                IN VARCHAR2,&lt;br/&gt;      P_MAIL_FROM_NAME               IN VARCHAR2,&lt;br/&gt;      P_MAIL_FROM_ADDRESS            IN VARCHAR2,&lt;br/&gt;      P_MILESTONE_REMINDER_INTERVAL  IN INTEGER,&lt;br/&gt;      P_MILESTONE_REMINDER_LOOKAHEAD IN INTEGER,&lt;br/&gt;      P_MAILER_INTERVAL              IN INTEGER)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION STOP_MAILER&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  PROCEDURE CREATE_PROJECT_FROM_PIPELINE(&lt;br/&gt;      P_PIP_ID IN INTEGER);&lt;br/&gt;  FUNCTION GET_DEFAULT_DESIGNATION&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_DEFAULT_FULFILLED&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_DEFAULT_PRIMARY_SKILL&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  PROCEDURE CHECK_STAFFING_DATE_RANGE(&lt;br/&gt;      P_PRO_ID         IN INTEGER,&lt;br/&gt;      P_STAFFING_START IN DATE,&lt;br/&gt;      P_STAFFING_END   IN DATE);&lt;br/&gt;  FUNCTION GET_BUSINESS_DAYS(&lt;br/&gt;      P_FROM_DATE  IN DATE,&lt;br/&gt;      P_TO_DATE    IN DATE,&lt;br/&gt;      P_BUS_UNI_ID IN INTEGER DEFAULT NULL)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  PROCEDURE START_END_DATE_CHECK(&lt;br/&gt;      P_START_DATE IN DATE,&lt;br/&gt;      P_END_DATE   IN DATE);&lt;br/&gt;  FUNCTION GET_DEFAULT_ALERT_STATUS&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  PROCEDURE TIMESHEET_DATE_CHECK(&lt;br/&gt;      P_TIMESHEET_DATE   IN DATE,&lt;br/&gt;      P_ASSIGNMENT_START IN DATE,&lt;br/&gt;      P_ASSIGNMENT_END   IN DATE);&lt;br/&gt;  FUNCTION GET_CURRENT_USER_ID&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_CURRENT_BUSINESS_UNIT_ID&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  PROCEDURE VACATION_APPLY_CHECK(&lt;br/&gt;      P_USE_ID    IN INTEGER,&lt;br/&gt;      P_FROM_DATE IN DATE,&lt;br/&gt;      P_TO_DATE   IN DATE);&lt;br/&gt;  FUNCTION GET_DEFAULT_INVOICE_STATUS&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_DEFAULT_INVOICE_TERMS&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_MILESTONE_INVOICED_AMOUNT(&lt;br/&gt;      P_INV_MIL_ID IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  PROCEDURE CREATE_INVOICE(&lt;br/&gt;      P_INV_IDS      IN APEX_APPLICATION_GLOBAL.VC_ARR2,&lt;br/&gt;      P_LINE_AMOUNTS IN APEX_APPLICATION_GLOBAL.VC_ARR2);&lt;br/&gt;  FUNCTION GET_PROJECT_INVOICED_AMOUNT(&lt;br/&gt;      P_PRO_ID  IN INTEGER,&lt;br/&gt;      P_AS_ON   IN DATE DEFAULT SYSDATE,&lt;br/&gt;      P_DETAILS IN VARCHAR2 DEFAULT &apos;Y&apos;)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_DEFAULT_PAYMENT_STATUS&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  PROCEDURE PURGE_PAYMENT(&lt;br/&gt;      P_PAY_HEA_ID IN INTEGER);&lt;br/&gt;  FUNCTION GET_PROJECT_PAYMENT_AMOUNT(&lt;br/&gt;      P_PRO_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN VARCHAR2 DEFAULT NULL)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_APPLIED_PAYMENTS(&lt;br/&gt;      P_PAY_HEA_ID IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION DEFAULT_INVOICE_ADDER_AMOUNT(&lt;br/&gt;      P_INV_HEA_ID     IN INTEGER,&lt;br/&gt;      P_INV_ADD_TYP_ID IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_INVOICE_HEADER_AMOUNT(&lt;br/&gt;      P_INV_HEA_ID IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION DEFAULT_PROJECT_TYPE_BILLED&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_COST_ADDER_TYPE_AMOUNT(&lt;br/&gt;      P_COS_ADD_TYP_ID IN INTEGER,&lt;br/&gt;      P_AMOUNT_DATE    IN DATE)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_PROJECT_RESOURCE_COST(&lt;br/&gt;      P_PRO_ID    IN INTEGER,&lt;br/&gt;      P_AS_ON     IN DATE DEFAULT SYSDATE,&lt;br/&gt;      P_DETAILS   IN VARCHAR2 DEFAULT &apos;Y&apos;,&lt;br/&gt;      P_FROM_DATE IN DATE DEFAULT NULL)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_PROJECT_ADDER_COST(&lt;br/&gt;      P_PRO_ID  IN INTEGER,&lt;br/&gt;      P_AS_ON   IN DATE DEFAULT SYSDATE,&lt;br/&gt;      P_DETAILS IN VARCHAR2 DEFAULT &apos;Y&apos;)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_PROJECT_DIRECT_COST(&lt;br/&gt;      P_PRO_ID  IN INTEGER,&lt;br/&gt;      P_AS_ON   IN DATE DEFAULT SYSDATE,&lt;br/&gt;      P_DETAILS IN VARCHAR2 DEFAULT &apos;Y&apos;)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_PROJECT_OVERHEAD_COST(&lt;br/&gt;      P_PRO_ID  IN INTEGER,&lt;br/&gt;      P_AS_ON   IN DATE DEFAULT SYSDATE,&lt;br/&gt;      P_DETAILS IN VARCHAR2 DEFAULT &apos;Y&apos;)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_PROJECT_TOTAL_COST(&lt;br/&gt;      P_PRO_ID  IN INTEGER,&lt;br/&gt;      P_AS_ON   IN DATE DEFAULT SYSDATE,&lt;br/&gt;      P_DETAILS IN VARCHAR2 DEFAULT &apos;Y&apos;)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION IS_BUSINESS_DAY(&lt;br/&gt;      P_DATE       IN DATE,&lt;br/&gt;      P_BUS_UNI_ID IN INTEGER DEFAULT NULL)&lt;br/&gt;    RETURN BOOLEAN;&lt;br/&gt;  FUNCTION GET_RESOURCE_OVERHEAD_COST(&lt;br/&gt;      P_PRO_ID  IN INTEGER,&lt;br/&gt;      P_AS_ON   IN DATE DEFAULT SYSDATE,&lt;br/&gt;      P_DETAILS IN VARCHAR2 DEFAULT &apos;Y&apos;)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_ADDER_OVERHEAD_COST(&lt;br/&gt;      P_PRO_ID  IN INTEGER,&lt;br/&gt;      P_AS_ON   IN DATE DEFAULT SYSDATE,&lt;br/&gt;      P_DETAILS IN VARCHAR2 DEFAULT &apos;Y&apos;)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  PROCEDURE ZERO_TABLE_NULLS(&lt;br/&gt;      P_TABLE_NAME IN VARCHAR2);&lt;br/&gt;  FUNCTION GET_PIPELINE_FORECAST(&lt;br/&gt;      P_PIP_STA_ID   IN INTEGER,&lt;br/&gt;      P_AS_ON        IN VARCHAR2,&lt;br/&gt;      P_MONTH_OFFSET IN INTEGER DEFAULT 0)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_PIPELINE_FORECAST_DETAILS(&lt;br/&gt;      P_PIP_STA_ID IN INTEGER,&lt;br/&gt;      P_AS_ON      IN VARCHAR2,&lt;br/&gt;      P_ID         IN INTEGER)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_STAFF_REQUIRED(&lt;br/&gt;      P_TEC_ID           IN INTEGER,&lt;br/&gt;      P_DES_ID           IN INTEGER,&lt;br/&gt;      P_AS_ON            IN VARCHAR2,&lt;br/&gt;      P_LOOKAHEAD_MONTHS IN INTEGER)&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_STAFF_FULFILLED(&lt;br/&gt;      P_TEC_ID           IN INTEGER,&lt;br/&gt;      P_DES_ID           IN INTEGER,&lt;br/&gt;      P_AS_ON            IN VARCHAR2,&lt;br/&gt;      P_LOOKAHEAD_MONTHS IN INTEGER)&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_DEPLOYABLE_RESOURCES(&lt;br/&gt;      P_TEC_ID           IN INTEGER,&lt;br/&gt;      P_DES_ID           IN INTEGER,&lt;br/&gt;      P_AS_ON            IN VARCHAR2,&lt;br/&gt;      P_LOOKAHEAD_MONTHS IN INTEGER)&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_STAFF_REQUIRED_DETAILS(&lt;br/&gt;      P_TEC_ID           IN INTEGER,&lt;br/&gt;      P_DES_ID           IN INTEGER,&lt;br/&gt;      P_AS_ON            IN VARCHAR2,&lt;br/&gt;      P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;      P_ID               IN INTEGER)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_STAFF_FULFILLED_DETAILS(&lt;br/&gt;      P_TEC_ID           IN INTEGER,&lt;br/&gt;      P_DES_ID           IN INTEGER,&lt;br/&gt;      P_AS_ON            IN VARCHAR2,&lt;br/&gt;      P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;      P_ID               IN INTEGER)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_DEPLOYABLE_RESOURCE_DET(&lt;br/&gt;      P_TEC_ID           IN INTEGER,&lt;br/&gt;      P_DES_ID           IN INTEGER,&lt;br/&gt;      P_AS_ON            IN VARCHAR2,&lt;br/&gt;      P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;      P_ID               IN INTEGER)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_RESOURCE_ASSIGNED(&lt;br/&gt;      P_AS_ON            IN VARCHAR2,&lt;br/&gt;      P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;      P_USE_ID           IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_RESOURCE_WORKED(&lt;br/&gt;      P_AS_ON            IN VARCHAR2,&lt;br/&gt;      P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;      P_USE_ID           IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_BU_ASSIGNED(&lt;br/&gt;      P_AS_ON            IN VARCHAR2,&lt;br/&gt;      P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;      P_BUS_UNI_ID       IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_BU_WORKED(&lt;br/&gt;      P_AS_ON            IN VARCHAR2,&lt;br/&gt;      P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;      P_BUS_UNI_ID       IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_RESOURCE_BILLING_DELTA(&lt;br/&gt;      P_AS_ON            IN VARCHAR2,&lt;br/&gt;      P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;      P_USE_ID           IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_BU_BILLING_DELTA(&lt;br/&gt;      P_AS_ON            IN VARCHAR2,&lt;br/&gt;      P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;      P_BUS_UNI_ID       IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_OVERDUE_DELIVERY_COUNT(&lt;br/&gt;      P_PRO_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN VARCHAR2)&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_OVERDUE_INVOICING_COUNT(&lt;br/&gt;      P_PRO_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN VARCHAR2)&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_OVERDUE_PAYMENT_COUNT(&lt;br/&gt;      P_PRO_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN VARCHAR2)&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_DELIVERY_HEALTH(&lt;br/&gt;      P_PRO_ID                  IN INTEGER,&lt;br/&gt;      P_AS_ON                   IN VARCHAR2,&lt;br/&gt;      P_OVERDUE_DELIVERY_COUNT  IN INTEGER DEFAULT NULL,&lt;br/&gt;      P_OVERDUE_INVOICING_COUNT IN INTEGER DEFAULT NULL,&lt;br/&gt;      P_OVERDUE_PAYMENT_COUNT   IN INTEGER DEFAULT NULL,&lt;br/&gt;      P_PROFIT                  IN NUMBER DEFAULT NULL)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_OVERDUE_INVOICING_AMOUNT(&lt;br/&gt;      P_PRO_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN VARCHAR2)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_OVERDUE_PAYMENT_AMOUNT(&lt;br/&gt;      P_PRO_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN VARCHAR2)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_FULL_CLOCKING_DAYS(&lt;br/&gt;      P_USE_ID    IN INTEGER,&lt;br/&gt;      P_DATE_FROM IN DATE,&lt;br/&gt;      P_DATE_TO   IN DATE)&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_PARTIAL_CLOCKING_DAYS(&lt;br/&gt;      P_USE_ID    IN INTEGER,&lt;br/&gt;      P_DATE_FROM IN DATE,&lt;br/&gt;      P_DATE_TO   IN DATE)&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION IS_FULL_CLOCKING_DAY(&lt;br/&gt;      P_USE_ID   IN INTEGER,&lt;br/&gt;      P_FOR_DATE IN DATE)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION IS_PARTIAL_CLOCKING_DAY(&lt;br/&gt;      P_USE_ID   IN INTEGER,&lt;br/&gt;      P_FOR_DATE IN DATE)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION IS_MISSED_CLOCKING_DAY(&lt;br/&gt;      P_USE_ID   IN INTEGER,&lt;br/&gt;      P_FOR_DATE IN DATE)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_TOTAL_PAYMENTS(&lt;br/&gt;      P_AS_ON  IN VARCHAR2,&lt;br/&gt;      P_MONTHS IN INTEGER DEFAULT 1)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION INVOICING_MILESTONE_FILTER(&lt;br/&gt;      P_INV_HEA_ID IN INTEGER,&lt;br/&gt;      P_INV_MIL_ID IN INTEGER)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_TOTAL_COSTS(&lt;br/&gt;      P_AS_ON  IN VARCHAR2,&lt;br/&gt;      P_MONTHS IN INTEGER DEFAULT 1)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_RESOURCE_NAME(&lt;br/&gt;      P_USE_ID IN INTEGER)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_RESOURCE_HOURS(&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN VARCHAR2,&lt;br/&gt;      P_MONTHS INTEGER DEFAULT 1)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_RESOURCE_AVG_COST_RATE(&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN VARCHAR2,&lt;br/&gt;      P_MONTHS INTEGER DEFAULT 1)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_BUSINESS_UNIT_NAME(&lt;br/&gt;      P_BUS_UNI_ID IN INTEGER)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_RESOURCE_ASSIGNED_LIMITED(&lt;br/&gt;      P_AS_ON  IN VARCHAR2,&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_DAYS   IN INTEGER DEFAULT 6)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_RESOURCE_WORKED_LIMITED(&lt;br/&gt;      P_AS_ON  IN VARCHAR2,&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_DAYS   IN INTEGER DEFAULT 6)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_RESOURCE_BILLING_DELTA(&lt;br/&gt;      P_AS_ON  IN VARCHAR2,&lt;br/&gt;      P_USE_ID IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_MONDAY_OF_WEEK(&lt;br/&gt;      P_DATE IN VARCHAR2)&lt;br/&gt;    RETURN DATE;&lt;br/&gt;  FUNCTION GET_CAPACITY_COLOR_CODE(&lt;br/&gt;      P_AS_ON  IN VARCHAR2,&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_DAYS   IN INTEGER DEFAULT 6)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_PROJECT_NAME(&lt;br/&gt;      P_PRO_ID IN INTEGER)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION IS_AUTHORIZED(&lt;br/&gt;      P_AUTHORIZATION_ROLE IN VARCHAR2)&lt;br/&gt;    RETURN BOOLEAN;&lt;br/&gt;  FUNCTION GET_DELIVERY_HEALTH_AS_TEXT(&lt;br/&gt;      P_PRO_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN VARCHAR2)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_FIRST_OF_SPECIFIED_MONTH(&lt;br/&gt;      P_DATE             IN DATE,&lt;br/&gt;      P_LOOKAHEAD_MONTHS IN INTEGER DEFAULT 0)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_LAST_OF_SPECIFIED_MONTH(&lt;br/&gt;      P_DATE             IN DATE,&lt;br/&gt;      P_LOOKAHEAD_MONTHS IN INTEGER DEFAULT 0)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_COMPANY_PIPELINE(&lt;br/&gt;      P_AS_ON         IN VARCHAR2,&lt;br/&gt;      P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_COMPANY_UTILIZATION(&lt;br/&gt;      P_AS_ON         IN VARCHAR2,&lt;br/&gt;      P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_COMPANY_BILLING_DELTA(&lt;br/&gt;      P_AS_ON         IN VARCHAR2,&lt;br/&gt;      P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_COMPANY_INVOICED(&lt;br/&gt;      P_AS_ON         IN VARCHAR2,&lt;br/&gt;      P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_COMPANY_COST(&lt;br/&gt;      P_AS_ON         IN VARCHAR2,&lt;br/&gt;      P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_COMPANY_PROFIT(&lt;br/&gt;      P_AS_ON         IN VARCHAR2,&lt;br/&gt;      P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_COMPANY_ASSIGNED(&lt;br/&gt;      P_AS_ON         IN VARCHAR2,&lt;br/&gt;      P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_COMPANY_WORKED(&lt;br/&gt;      P_AS_ON         IN VARCHAR2,&lt;br/&gt;      P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_USER_ACTIVE(&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN DATE)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_COMPANY_HEADCOUNT(&lt;br/&gt;      P_AS_ON         IN VARCHAR2 ,&lt;br/&gt;      P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION CAN_PERUSE_DATA(&lt;br/&gt;      P_DATA_OWNER_ID     IN INTEGER,&lt;br/&gt;      P_DATA_REQUESTOR_ID IN INTEGER DEFAULT GET_CURRENT_USER_ID)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  PROCEDURE PURGE_TIMESHEETS(&lt;br/&gt;      P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 );&lt;br/&gt;  PROCEDURE PURGE_VACATIONS(&lt;br/&gt;      P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 );&lt;br/&gt;  PROCEDURE PURGE_PIPELINE(&lt;br/&gt;      P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 );&lt;br/&gt;  PROCEDURE PURGE_PAYMENTS(&lt;br/&gt;      P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 );&lt;br/&gt;  PROCEDURE PURGE_INVOICES(&lt;br/&gt;      P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 );&lt;br/&gt;  PROCEDURE PURGE_STAFFING_REQUIREMENTS(&lt;br/&gt;      P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 );&lt;br/&gt;  PROCEDURE PURGE_ASSIGNED_RESOURCES(&lt;br/&gt;      P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 );&lt;br/&gt;  PROCEDURE PURGE_PROJECT_COST_ADDERS(&lt;br/&gt;      P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 );&lt;br/&gt;  PROCEDURE PURGE_DELIVERY_MILESTONES(&lt;br/&gt;      P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 );&lt;br/&gt;  PROCEDURE PURGE_INVOICING_MILESTONES(&lt;br/&gt;      P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 );&lt;br/&gt;  PROCEDURE PURGE_PROJECTS(&lt;br/&gt;      P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 );&lt;br/&gt;  FUNCTION IS_USER_ACTIVE(&lt;br/&gt;      P_USE_ID IN INTEGER)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_DEFAULT_VACATION_APPROVED&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  PROCEDURE APPROVE_VACATIONS(&lt;br/&gt;      P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 );&lt;br/&gt;  PROCEDURE REJECT_VACATIONS(&lt;br/&gt;      P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 );&lt;br/&gt;  FUNCTION GET_MONTHLY_HOURS_CAP&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  PROCEDURE DEFAULT_ASSIGNMENTS(&lt;br/&gt;      P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2);&lt;br/&gt;  FUNCTION GET_USER_ACTIVE_AS_ON(&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN VARCHAR2)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  PROCEDURE DEFAULT_PASSWORDS(&lt;br/&gt;      P_KEYS IN APEX_APPLICATION_GLOBAL.VC_ARR2);&lt;br/&gt;  FUNCTION GET_DEFAULT_PROJECT_TYPE_ID&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_PROJECTS_IN_INVOICE(&lt;br/&gt;      P_INV_HEA_ID IN INTEGER)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_PROJECTS_IN_PAYMENT(&lt;br/&gt;      P_PAY_HEA_ID IN INTEGER)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_TECHNOLOGY_DESIGNATION(&lt;br/&gt;      P_TEC_ID IN INTEGER,&lt;br/&gt;      P_DES_ID IN INTEGER)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  PROCEDURE USER_ALLOCATION_CHECKS(&lt;br/&gt;      P_USE_ID      IN INTEGER,&lt;br/&gt;      P_START_DATE  IN DATE,&lt;br/&gt;      P_END_DATE    IN DATE,&lt;br/&gt;      P_NEW_HOURS   IN NUMBER,&lt;br/&gt;      P_OLD_HOURS   IN NUMBER DEFAULT 0,&lt;br/&gt;      P_UPDATE_FLAG IN VARCHAR2 DEFAULT &apos;N&apos;);&lt;br/&gt;  PROCEDURE CREATE_VACATION_TIMESHEETS(&lt;br/&gt;      P_VAC_ID IN INTEGER);&lt;br/&gt;  FUNCTION COMPUTE_VACATION_ELIGIBLE(&lt;br/&gt;      P_USE_ID           IN INTEGER,&lt;br/&gt;      P_VAC_REA_ID       IN INTEGER,&lt;br/&gt;      P_FROM_DATE        IN DATE,&lt;br/&gt;      P_TO_DATE          IN DATE,&lt;br/&gt;      P_HOURS_PER_DAY    IN NUMBER ,&lt;br/&gt;      P_APPLICATION_DATE IN DATE)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION COMPUTE_VACATION_AVAILED(&lt;br/&gt;      P_USE_ID           IN INTEGER,&lt;br/&gt;      P_VAC_REA_ID       IN INTEGER,&lt;br/&gt;      P_FROM_DATE        IN DATE,&lt;br/&gt;      P_TO_DATE          IN DATE,&lt;br/&gt;      P_HOURS_PER_DAY    IN NUMBER ,&lt;br/&gt;      P_APPLICATION_DATE IN DATE)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION COMPUTE_VACATION_REQUESTED(&lt;br/&gt;      P_USE_ID           IN INTEGER,&lt;br/&gt;      P_VAC_REA_ID       IN INTEGER,&lt;br/&gt;      P_FROM_DATE        IN DATE,&lt;br/&gt;      P_TO_DATE          IN DATE,&lt;br/&gt;      P_HOURS_PER_DAY    IN NUMBER ,&lt;br/&gt;      P_APPLICATION_DATE IN DATE)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  PROCEDURE CHECK_LOGIN_ALLOWED;&lt;br/&gt;  FUNCTION GET_SKILL_COST_RATE(&lt;br/&gt;      P_TEC_ID IN INTEGER,&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN DATE)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_USER_COST_RATE(&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN DATE)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_SKILL_BILLING_RATE(&lt;br/&gt;      P_TEC_ID IN INTEGER,&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN DATE)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_USER_BILLING_RATE(&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN DATE)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_RESOURCE_OUTFLOW(&lt;br/&gt;      P_USE_ID       IN INTEGER,&lt;br/&gt;      P_MONTH_YEAR   IN VARCHAR2,&lt;br/&gt;      P_NO_OF_MONTHS IN INTEGER DEFAULT 1)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_RESOURCE_INFLOW(&lt;br/&gt;      P_USE_ID       IN INTEGER,&lt;br/&gt;      P_MONTH_YEAR   IN VARCHAR2,&lt;br/&gt;      P_NO_OF_MONTHS IN INTEGER DEFAULT 1)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_RESOURCE_NETFLOW(&lt;br/&gt;      P_USE_ID       IN INTEGER,&lt;br/&gt;      P_MONTH_YEAR   IN VARCHAR2,&lt;br/&gt;      P_NO_OF_MONTHS IN INTEGER DEFAULT 1)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION GET_ASSIGNMENT_COUNT(&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN DATE DEFAULT SYSDATE)&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION LATEST_USER_AUDIT_RECORD(&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN DATE)&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION LATEST_TECHNOLOGY_USERS_RECORD(&lt;br/&gt;      P_USE_ID IN INTEGER,&lt;br/&gt;      P_AS_ON  IN DATE)&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION IS_PROJECT_FIELD_EDITABLE(&lt;br/&gt;      P_FIELD_DATA IN VARCHAR2)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  PROCEDURE PRIMARY_SKILL_CHECK(&lt;br/&gt;      P_USE_ID                IN INTEGER,&lt;br/&gt;      P_PRIMARY_SKILL_ENTERED IN INTEGER);&lt;br/&gt;  FUNCTION DAYS_IN_MONTH(&lt;br/&gt;      P_DATE IN DATE)&lt;br/&gt;    RETURN INTEGER;&lt;br/&gt;  FUNCTION GET_ALLOC_PROJ_RESOURCE_COST(&lt;br/&gt;      P_PRO_ID    IN INTEGER,&lt;br/&gt;      P_AS_ON     IN DATE DEFAULT SYSDATE,&lt;br/&gt;      P_DETAILS   IN VARCHAR2 DEFAULT &apos;Y&apos;,&lt;br/&gt;      P_FROM_DATE IN DATE DEFAULT NULL)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION IS_WEEKDAY(&lt;br/&gt;      P_DATE IN DATE)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  PROCEDURE TIMESHEET_CLOCKING_CHECK(&lt;br/&gt;      P_PRO_USE_ID     IN INTEGER,&lt;br/&gt;      P_HOURS_CLOCKED  IN NUMBER,&lt;br/&gt;      P_TIMESHEET_DATE IN DATE);&lt;br/&gt;  FUNCTION GET_APPROVED_VACATION(&lt;br/&gt;      P_USE_ID     IN INTEGER,&lt;br/&gt;      P_START_DATE IN DATE,&lt;br/&gt;      P_END_DATE   IN DATE)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION DAYS_OF_OVERLAP(&lt;br/&gt;      P_START_DATE_1 IN DATE,&lt;br/&gt;      P_END_DATE_1   IN DATE,&lt;br/&gt;      P_START_DATE_2 IN DATE,&lt;br/&gt;      P_END_DATE_2   IN DATE)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  FUNCTION IS_USER_ADMINISTRATOR(&lt;br/&gt;      P_USE_ID IN INTEGER DEFAULT GET_CURRENT_USER_ID)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION IS_REVENUE_PROJECT_TYPE(&lt;br/&gt;      P_PRO_TYP_ID IN INTEGER)&lt;br/&gt;    RETURN VARCHAR2;&lt;br/&gt;  FUNCTION GET_TIMESHEET_HOURS_NORMALIZED(&lt;br/&gt;      P_PRO_USE_ID IN INTEGER)&lt;br/&gt;    RETURN NUMBER;&lt;br/&gt;  PROCEDURE ASSIGNMENT_TIMESHEET_CHECK(&lt;br/&gt;      P_PRO_USE_ID IN INTEGER,&lt;br/&gt;      P_START_DATE IN DATE,&lt;br/&gt;      P_END_DATE   IN DATE);&lt;br/&gt;  PROCEDURE REFRESH_AUTO_ASSIGNMENTS(&lt;br/&gt;      P_KEYS IN APEX_APPLICATION_GLOBAL.VC_ARR2);&lt;br/&gt;END XRAYLOGIC;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="XRAYLOGIC" id="973A5E85-70BD-7680-DAD9-2A417192FBF1">
<sourceConnName>xraydev</sourceConnName>
<sourceObjSchema>XRAYDEV</sourceObjSchema>
<sourceObjName>XRAYLOGIC</sourceObjName>
<createdBy>maintenance</createdBy>
<createdTime>2015-01-21 03:30:16 UTC</createdTime>
<ownerDesignName>Insight</ownerDesignName>
<owner>42BF9B12-1809-88EE-330C-88F8510DCEFE</owner>
<source>CREATE OR REPLACE PACKAGE BODY XRAYDEV.XRAYLOGIC &lt;br/&gt;AS&lt;br/&gt;  V_ERROR                   VARCHAR2(4000);&lt;br/&gt;  V_DEFAULT_PROJECT_TYPE_ID INTEGER := -1;&lt;br/&gt;  V_CURRENT_USER_ID         INTEGER := -1;&lt;br/&gt;  V_BUS_UNI_ID              INTEGER := -1;&lt;br/&gt;FUNCTION GET_NORMALIZED_HOURS(&lt;br/&gt;    P_USE_ID        IN INTEGER,&lt;br/&gt;    P_AS_ON         IN DATE,&lt;br/&gt;    P_HOURS_PER_DAY IN NUMBER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_ASSIGNED_HOURS NUMBER;&lt;br/&gt;  V_RESULT         NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT SUM(HOURS_PER_DAY)&lt;br/&gt;  INTO V_ASSIGNED_HOURS&lt;br/&gt;  FROM USER_ASSIGNED_HOURS_VIEW&lt;br/&gt;  WHERE USE_ID = P_USE_ID&lt;br/&gt;  AND P_AS_ON BETWEEN START_DATE AND END_DATE;&lt;br/&gt;  IF V_ASSIGNED_HOURS &lt;= 8 THEN&lt;br/&gt;    V_RESULT          := P_HOURS_PER_DAY;&lt;br/&gt;  ELSE&lt;br/&gt;    V_RESULT := (P_HOURS_PER_DAY / V_ASSIGNED_HOURS) * 8;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_NORMALIZED_HOURS;&lt;br/&gt;PROCEDURE ACCOUNT_CREATE(&lt;br/&gt;    P_EMAIL_ADDRESS IN VARCHAR2,&lt;br/&gt;    P_PASSWORD      IN VARCHAR2 DEFAULT NULL)&lt;br/&gt;AS&lt;br/&gt;  V_USERNAME       VARCHAR2(400);&lt;br/&gt;  V_PASSWORD       VARCHAR2(400) := NVL(P_PASSWORD, &apos;password&apos;);&lt;br/&gt;  V_DEFAULT_SCHEMA VARCHAR2(400) := APEX_APPLICATION.G_FLOW_OWNER;&lt;br/&gt;BEGIN&lt;br/&gt;  V_USERNAME := UPPER(P_EMAIL_ADDRESS);&lt;br/&gt;  APEX_UTIL.CREATE_USER( P_USER_NAME =&gt; V_USERNAME, P_WEB_PASSWORD =&gt; V_PASSWORD, P_EMAIL_ADDRESS =&gt; P_EMAIL_ADDRESS, P_DEFAULT_SCHEMA =&gt; V_DEFAULT_SCHEMA);&lt;br/&gt;END ACCOUNT_CREATE;&lt;br/&gt;PROCEDURE ACCOUNT_DROP(&lt;br/&gt;    P_EMAIL_ADDRESS IN VARCHAR2)&lt;br/&gt;AS&lt;br/&gt;  V_USERNAME VARCHAR2(400);&lt;br/&gt;BEGIN&lt;br/&gt;  V_USERNAME := UPPER(P_EMAIL_ADDRESS);&lt;br/&gt;  APEX_UTIL.REMOVE_USER( P_USER_NAME =&gt; V_USERNAME);&lt;br/&gt;END ACCOUNT_DROP;&lt;br/&gt;PROCEDURE ACCOUNT_LOCK(&lt;br/&gt;    P_KEYS IN APEX_APPLICATION_GLOBAL.VC_ARR2)&lt;br/&gt;AS&lt;br/&gt;  V_EMAIL_ADDRESS VARCHAR2(400);&lt;br/&gt;  V_USERNAME      VARCHAR2(400);&lt;br/&gt;BEGIN&lt;br/&gt;  FOR I IN 1..P_KEYS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    UPDATE USERS&lt;br/&gt;    SET ACTIVE =&lt;br/&gt;      (SELECT ID FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;N&apos;&lt;br/&gt;      )&lt;br/&gt;    WHERE ID = P_KEYS(I);&lt;br/&gt;    --    SELECT LOWER(EMAIL_ADDRESS)&lt;br/&gt;    --    INTO V_EMAIL_ADDRESS&lt;br/&gt;    --    FROM USERS&lt;br/&gt;    --    WHERE ID    = P_KEYS(I);&lt;br/&gt;    --    V_USERNAME := UPPER(V_EMAIL_ADDRESS);&lt;br/&gt;    --    APEX_UTIL.LOCK_ACCOUNT( P_USER_NAME =&gt; V_USERNAME);&lt;br/&gt;  END LOOP;&lt;br/&gt;END ACCOUNT_LOCK;&lt;br/&gt;PROCEDURE ACCOUNT_UNLOCK(&lt;br/&gt;    P_KEYS IN APEX_APPLICATION_GLOBAL.VC_ARR2)&lt;br/&gt;AS&lt;br/&gt;  V_EMAIL_ADDRESS VARCHAR2(400);&lt;br/&gt;  V_USERNAME      VARCHAR2(400);&lt;br/&gt;BEGIN&lt;br/&gt;  FOR I IN 1..P_KEYS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    UPDATE USERS&lt;br/&gt;    SET ACTIVE =&lt;br/&gt;      (SELECT ID FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;Y&apos;&lt;br/&gt;      )&lt;br/&gt;    WHERE ID = P_KEYS(I);&lt;br/&gt;    --    SELECT LOWER(EMAIL_ADDRESS)&lt;br/&gt;    --    INTO V_EMAIL_ADDRESS&lt;br/&gt;    --    FROM USERS&lt;br/&gt;    --    WHERE ID    = P_KEYS(I);&lt;br/&gt;    --    V_USERNAME := UPPER(V_EMAIL_ADDRESS);&lt;br/&gt;    --    APEX_UTIL.UNLOCK_ACCOUNT( P_USER_NAME =&gt; V_USERNAME);&lt;br/&gt;  END LOOP;&lt;br/&gt;END ACCOUNT_UNLOCK;&lt;br/&gt;PROCEDURE CHANGE_PASSWORD(&lt;br/&gt;    P_PASSWORD IN VARCHAR2,&lt;br/&gt;    P_ID       IN INTEGER)&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  APEX_UTIL.CHANGE_CURRENT_USER_PW(P_PASSWORD);&lt;br/&gt;  UPDATE USERS SET COMMENTS = &apos;Password has been chaned.&apos; WHERE ID = P_ID;&lt;br/&gt;END CHANGE_PASSWORD;&lt;br/&gt;FUNCTION GET_MAILER_STATUS&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_CRLF   VARCHAR2(2) := CHR(13) || CHR(10);&lt;br/&gt;  V_RESULT VARCHAR2(4000);&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT STATE&lt;br/&gt;    || V_CRLF&lt;br/&gt;    || NEXT_RUN_DATE&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM USER_SCHEDULER_JOBS&lt;br/&gt;  WHERE JOB_NAME = &apos;SEND_REMINDERS_JOB&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN NO_DATA_FOUND THEN&lt;br/&gt;  V_RESULT := &apos;Mailer not scheduled nor running.&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_RESULT := SQLERRM;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_MAILER_STATUS;&lt;br/&gt;FUNCTION START_MAILER(&lt;br/&gt;    P_MAIL_SERVER                  IN VARCHAR2,&lt;br/&gt;    P_MAIL_USERNAME                IN VARCHAR2,&lt;br/&gt;    P_MAIL_PASSWORD                IN VARCHAR2,&lt;br/&gt;    P_MAIL_FROM_NAME               IN VARCHAR2,&lt;br/&gt;    P_MAIL_FROM_ADDRESS            IN VARCHAR2,&lt;br/&gt;    P_MILESTONE_REMINDER_INTERVAL  IN INTEGER,&lt;br/&gt;    P_MILESTONE_REMINDER_LOOKAHEAD IN INTEGER,&lt;br/&gt;    P_MAILER_INTERVAL              IN INTEGER)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_RESULT  VARCHAR2(4000);&lt;br/&gt;  V_PROGRAM VARCHAR2(4000) := &apos;&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  V_RESULT := STOP_MAILER;&lt;br/&gt;  V_RESULT := &apos;Mailer successfully started.&apos;;&lt;br/&gt;  BEGIN&lt;br/&gt;    V_PROGRAM := V_PROGRAM || &apos;BEGIN PROJECT.SEND_REMINDERS(&apos;&apos;&apos;;&lt;br/&gt;    V_PROGRAM := V_PROGRAM || P_MAIL_SERVER || &apos;&apos;&apos;, &apos;&apos;&apos; || P_MAIL_USERNAME || &apos;&apos;&apos;, &apos;&apos;&apos; || P_MAIL_PASSWORD;&lt;br/&gt;    V_PROGRAM := V_PROGRAM || &apos;&apos;&apos;, &apos;&apos;&apos; || P_MAIL_FROM_NAME || &apos;&apos;&apos;, &apos;&apos;&apos; || P_MAIL_FROM_ADDRESS;&lt;br/&gt;    V_PROGRAM := V_PROGRAM || &apos;&apos;&apos;, &apos; || P_MILESTONE_REMINDER_INTERVAL || &apos;, &apos; || P_MILESTONE_REMINDER_LOOKAHEAD;&lt;br/&gt;    V_PROGRAM := V_PROGRAM || &apos;); END;&apos;;&lt;br/&gt;    DBMS_SCHEDULER.CREATE_SCHEDULE( SCHEDULE_NAME =&gt; &apos;EVERY_N_MINUTES&apos;, START_DATE =&gt; TRUNC(SYSDATE - 1)+18/ 24, REPEAT_INTERVAL =&gt; &apos;FREQ=MINUTELY;INTERVAL=&apos; || P_MAILER_INTERVAL, COMMENTS =&gt; &apos;RUNTIME: EVERY DAY ALL &apos; || P_MAILER_INTERVAL || &apos; MINUTES&apos;);&lt;br/&gt;    DBMS_SCHEDULER.CREATE_PROGRAM (PROGRAM_NAME=&gt; &apos;SEND_REMINDERS_PROGRAM&apos;, PROGRAM_TYPE=&gt; &apos;PLSQL_BLOCK&apos;, PROGRAM_ACTION=&gt; V_PROGRAM, ENABLED=&gt;TRUE, COMMENTS=&gt; &apos;PROCEDURE TO COLLECT SEND MILESTONE REMINDERS.&apos; );&lt;br/&gt;    DBMS_SCHEDULER.CREATE_JOB(JOB_NAME =&gt; &apos;SEND_REMINDERS_JOB&apos;, PROGRAM_NAME=&gt; &apos;SEND_REMINDERS_PROGRAM&apos;, SCHEDULE_NAME=&gt; &apos;EVERY_N_MINUTES&apos;, ENABLED=&gt;TRUE, AUTO_DROP=&gt;FALSE, COMMENTS=&gt;&apos;JOB TO SEND MILESTONE REMINDERS EVERY &apos; || P_MAILER_INTERVAL || &apos; MINUTES.&apos;);&lt;br/&gt;  EXCEPTION&lt;br/&gt;  WHEN OTHERS THEN&lt;br/&gt;    V_RESULT := SUBSTR(SQLERRM, 1, 4000);&lt;br/&gt;  END;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END START_MAILER;&lt;br/&gt;FUNCTION STOP_MAILER&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_RESULT VARCHAR2(4000);&lt;br/&gt;BEGIN&lt;br/&gt;  V_RESULT := &apos;Mailer successfully stopped.&apos;;&lt;br/&gt;  BEGIN&lt;br/&gt;    DBMS_SCHEDULER.DROP_JOB(&apos;SEND_REMINDERS_JOB&apos;, TRUE);&lt;br/&gt;  EXCEPTION&lt;br/&gt;  WHEN OTHERS THEN&lt;br/&gt;    V_RESULT := SUBSTR(SQLERRM, 1, 4000);&lt;br/&gt;  END;&lt;br/&gt;  BEGIN&lt;br/&gt;    DBMS_SCHEDULER.DROP_PROGRAM(&apos;SEND_REMINDERS_PROGRAM&apos;);&lt;br/&gt;  EXCEPTION&lt;br/&gt;  WHEN OTHERS THEN&lt;br/&gt;    V_RESULT := SUBSTR(SQLERRM, 1, 4000);&lt;br/&gt;  END;&lt;br/&gt;  BEGIN&lt;br/&gt;    DBMS_SCHEDULER.DROP_SCHEDULE(&apos;EVERY_N_MINUTES&apos;);&lt;br/&gt;  EXCEPTION&lt;br/&gt;  WHEN OTHERS THEN&lt;br/&gt;    V_RESULT := SUBSTR(SQLERRM, 1, 4000);&lt;br/&gt;  END;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END STOP_MAILER;&lt;br/&gt;FUNCTION GET_DEFAULT_PROJECT_STATUS&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT ID INTO V_RESULT FROM PROJECT_STATUSES WHERE UPPER(NAME) = &apos;NEW&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_DEFAULT_PROJECT_STATUS;&lt;br/&gt;PROCEDURE CREATE_PROJECT_FROM_PIPELINE(&lt;br/&gt;    P_PIP_ID IN INTEGER)&lt;br/&gt;AS&lt;br/&gt;  V_DEFAULT_PROJECT_STATUS INTEGER := GET_DEFAULT_PROJECT_STATUS;&lt;br/&gt;  V_COUNT                  INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT COUNT(*) INTO V_COUNT FROM PROJECTS WHERE PIP_ID = P_PIP_ID;&lt;br/&gt;  IF V_COUNT = 0 THEN&lt;br/&gt;    UPDATE PIPELINE&lt;br/&gt;    SET PIP_STA_ID =&lt;br/&gt;      ( SELECT ID FROM PIPELINE_STATUSES WHERE UPPER(NAME) = &apos;DELIVERY&apos;&lt;br/&gt;      )&lt;br/&gt;    WHERE ID = P_PIP_ID;&lt;br/&gt;    INSERT&lt;br/&gt;    INTO PROJECTS&lt;br/&gt;      (&lt;br/&gt;        ID,&lt;br/&gt;        CLIENT_NAME,&lt;br/&gt;        PROJECT_NAME,&lt;br/&gt;        PROJECT_DESCRIPTION,&lt;br/&gt;        PROJECT_AMOUNT,&lt;br/&gt;        COMMENTS,&lt;br/&gt;        START_DATE,&lt;br/&gt;        END_DATE,&lt;br/&gt;        PRO_TYP_ID,&lt;br/&gt;        PRO_STA_ID,&lt;br/&gt;        BUS_UNI_ID,&lt;br/&gt;        ESTIMATOR_ID,&lt;br/&gt;        SALES_PERSON_ID,&lt;br/&gt;        ENGAGEMENT_MANAGER_ID,&lt;br/&gt;        DELIVERY_MANAGER_ID,&lt;br/&gt;        PIP_ID&lt;br/&gt;      )&lt;br/&gt;    SELECT PRO_SEQ.NEXTVAL,&lt;br/&gt;      CLIENT_NAME,&lt;br/&gt;      PROJECT_NAME,&lt;br/&gt;      PROJECT_DESCRIPTION,&lt;br/&gt;      EXPECTED_VALUE,&lt;br/&gt;      COMMENTS,&lt;br/&gt;      EXPECTED_START,&lt;br/&gt;      EXPECTED_END,&lt;br/&gt;      PRO_TYP_ID,&lt;br/&gt;      V_DEFAULT_PROJECT_STATUS,&lt;br/&gt;      BUS_UNI_ID,&lt;br/&gt;      ESTIMATOR_ID,&lt;br/&gt;      SALES_PERSON_ID,&lt;br/&gt;      ENGAGEMENT_MANAGER_ID,&lt;br/&gt;      DELIVERY_MANAGER_ID,&lt;br/&gt;      ID&lt;br/&gt;    FROM PIPELINE&lt;br/&gt;    WHERE ID = P_PIP_ID;&lt;br/&gt;  ELSE&lt;br/&gt;    RAISE_APPLICATION_ERROR(-20001, &apos;Pipeline has already been converted into project.&apos;);&lt;br/&gt;  END IF;&lt;br/&gt;END CREATE_PROJECT_FROM_PIPELINE;&lt;br/&gt;FUNCTION GET_DEFAULT_DESIGNATION&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT ID INTO V_RESULT FROM DESIGNATIONS WHERE UPPER(NAME) = &apos;ENGINEER&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_DEFAULT_DESIGNATION;&lt;br/&gt;FUNCTION GET_DEFAULT_FULFILLED&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT ID INTO V_RESULT FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;N&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_DEFAULT_FULFILLED;&lt;br/&gt;FUNCTION GET_DEFAULT_PRIMARY_SKILL&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT ID INTO V_RESULT FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;Y&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_DEFAULT_PRIMARY_SKILL;&lt;br/&gt;PROCEDURE CHECK_STAFFING_DATE_RANGE(&lt;br/&gt;    P_PRO_ID         IN INTEGER,&lt;br/&gt;    P_STAFFING_START IN DATE,&lt;br/&gt;    P_STAFFING_END   IN DATE)&lt;br/&gt;AS&lt;br/&gt;  V_PROJECT_START DATE;&lt;br/&gt;  V_PROJECT_END   DATE;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT START_DATE,&lt;br/&gt;    END_DATE&lt;br/&gt;  INTO V_PROJECT_START,&lt;br/&gt;    V_PROJECT_END&lt;br/&gt;  FROM PROJECTS&lt;br/&gt;  WHERE ID            = P_PRO_ID;&lt;br/&gt;  IF (P_STAFFING_START - V_PROJECT_START) &lt; 0  OR (P_STAFFING_END - V_PROJECT_END) &gt; 0 THEN &lt;br/&gt;    RAISE_APPLICATION_ERROR(-20001, &apos;Staffing date range is outside project date range.&apos;);&lt;br/&gt;  END IF;&lt;br/&gt;END CHECK_STAFFING_DATE_RANGE;&lt;br/&gt;FUNCTION GET_BUSINESS_DAYS(&lt;br/&gt;    P_FROM_DATE  IN DATE,&lt;br/&gt;    P_TO_DATE    IN DATE,&lt;br/&gt;    P_BUS_UNI_ID IN INTEGER DEFAULT NULL)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_CURRENT_USER_EMAIL VARCHAR2(400) := APEX_UTIL.GET_EMAIL (V(&apos;APP_USER&apos;));&lt;br/&gt;  V_START_DATE         DATE;&lt;br/&gt;  V_END_DATE           DATE;&lt;br/&gt;  V_RESULT             NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_START_DATE                 := TRUNC(P_FROM_DATE);&lt;br/&gt;  V_END_DATE                   := TRUNC(P_TO_DATE);&lt;br/&gt;  IF V_END_DATE                &gt;= V_START_DATE THEN&lt;br/&gt;    V_RESULT                   := V_END_DATE - V_START_DATE - ((TRUNC( V_END_DATE, &apos;D&apos;) -TRUNC(V_START_DATE, &apos;D&apos;)) / 7) * 2 + 1;&lt;br/&gt;    IF TO_CHAR(V_END_DATE, &apos;D&apos;) = &apos;7&apos; THEN&lt;br/&gt;      V_RESULT                 := V_RESULT - 1;&lt;br/&gt;    END IF;&lt;br/&gt;    IF TO_CHAR(V_START_DATE, &apos;D&apos;) = &apos;1&apos; THEN&lt;br/&gt;      V_RESULT                   := V_RESULT - 1;&lt;br/&gt;    END IF;&lt;br/&gt;    IF P_BUS_UNI_ID IS NULL THEN&lt;br/&gt;      FOR C1REC IN&lt;br/&gt;      (SELECT HOLIDAY_DATE&lt;br/&gt;      FROM HOLIDAYS&lt;br/&gt;      WHERE BUS_UNI_ID =&lt;br/&gt;        (SELECT BUS_UNI_ID&lt;br/&gt;        FROM USERS&lt;br/&gt;        WHERE UPPER(EMAIL_ADDRESS) = UPPER( V_CURRENT_USER_EMAIL)&lt;br/&gt;        )&lt;br/&gt;      )&lt;br/&gt;      LOOP&lt;br/&gt;        IF TO_CHAR(C1REC.HOLIDAY_DATE, &apos;D&apos;) NOT IN (&apos;1&apos;, &apos;7&apos;) AND C1REC.HOLIDAY_DATE BETWEEN V_START_DATE AND V_END_DATE THEN&lt;br/&gt;          V_RESULT := V_RESULT                   - 1;&lt;br/&gt;        END IF;&lt;br/&gt;      END LOOP;&lt;br/&gt;    ELSE&lt;br/&gt;      FOR C1REC IN&lt;br/&gt;      ( SELECT HOLIDAY_DATE FROM HOLIDAYS WHERE BUS_UNI_ID = P_BUS_UNI_ID&lt;br/&gt;      )&lt;br/&gt;      LOOP&lt;br/&gt;        IF TO_CHAR(C1REC.HOLIDAY_DATE, &apos;D&apos;) NOT IN (&apos;1&apos;, &apos;7&apos;) AND C1REC.HOLIDAY_DATE BETWEEN V_START_DATE AND V_END_DATE THEN&lt;br/&gt;          V_RESULT := V_RESULT                   - 1;&lt;br/&gt;        END IF;&lt;br/&gt;      END LOOP;&lt;br/&gt;    END IF;&lt;br/&gt;    IF V_RESULT &lt; 0 THEN&lt;br/&gt;      V_RESULT := 0;&lt;br/&gt;    END IF;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_BUSINESS_DAYS;&lt;br/&gt;PROCEDURE START_END_DATE_CHECK(&lt;br/&gt;    P_START_DATE IN DATE,&lt;br/&gt;    P_END_DATE   IN DATE)&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_START_DATE &gt; P_END_DATE THEN&lt;br/&gt;    RAISE_APPLICATION_ERROR(-20001, &apos;Date range is invalid.&apos;);&lt;br/&gt;  END IF;&lt;br/&gt;END START_END_DATE_CHECK;&lt;br/&gt;FUNCTION GET_DEFAULT_ALERT_STATUS&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT ID INTO V_RESULT FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;Y&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_DEFAULT_ALERT_STATUS;&lt;br/&gt;PROCEDURE TIMESHEET_DATE_CHECK(&lt;br/&gt;    P_TIMESHEET_DATE   IN DATE,&lt;br/&gt;    P_ASSIGNMENT_START IN DATE,&lt;br/&gt;    P_ASSIGNMENT_END   IN DATE)&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF NOT P_TIMESHEET_DATE BETWEEN P_ASSIGNMENT_START AND P_ASSIGNMENT_END THEN&lt;br/&gt;    RAISE_APPLICATION_ERROR(-20001, &apos;Timesheet date not within assignment date range.&apos;);&lt;br/&gt;  END IF;&lt;br/&gt;END TIMESHEET_DATE_CHECK;&lt;br/&gt;FUNCTION GET_CURRENT_USER_ID&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  IF V_CURRENT_USER_ID = -1 THEN&lt;br/&gt;    SELECT ID&lt;br/&gt;    INTO V_CURRENT_USER_ID&lt;br/&gt;    FROM USERS&lt;br/&gt;    WHERE UPPER(EMAIL_ADDRESS) = UPPER(APEX_UTIL.GET_EMAIL( APEX_UTIL.GET_USERNAME(APEX_UTIL.GET_CURRENT_USER_ID))) ;&lt;br/&gt;  END IF;&lt;br/&gt;  V_RESULT := V_CURRENT_USER_ID;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;  --  RETURN 27;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END GET_CURRENT_USER_ID;&lt;br/&gt;FUNCTION GET_CURRENT_BUSINESS_UNIT_ID&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  IF V_BUS_UNI_ID = -1 THEN&lt;br/&gt;    SELECT BUS_UNI_ID&lt;br/&gt;    INTO V_BUS_UNI_ID&lt;br/&gt;    FROM USERS&lt;br/&gt;    WHERE ID = GET_CURRENT_USER_ID;&lt;br/&gt;  END IF;&lt;br/&gt;  V_RESULT := V_BUS_UNI_ID;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END GET_CURRENT_BUSINESS_UNIT_ID;&lt;br/&gt;PROCEDURE VACATION_APPLY_CHECK(&lt;br/&gt;    P_USE_ID    IN INTEGER,&lt;br/&gt;    P_FROM_DATE IN DATE,&lt;br/&gt;    P_TO_DATE   IN DATE)&lt;br/&gt;AS&lt;br/&gt;  V_COUNT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  (SELECT    *&lt;br/&gt;  FROM VACATION_AUDIT&lt;br/&gt;  WHERE USE_ID = P_USE_ID&lt;br/&gt;  AND APPROVED =&lt;br/&gt;    (SELECT ID FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;Y&apos;&lt;br/&gt;    )&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    IF P_FROM_DATE BETWEEN C1REC.FROM_DATE AND C1REC.TO_DATE OR P_TO_DATE BETWEEN C1REC.FROM_DATE AND C1REC.TO_DATE OR C1REC.FROM_DATE BETWEEN P_FROM_DATE AND P_TO_DATE OR C1REC.TO_DATE BETWEEN P_FROM_DATE AND P_TO_DATE THEN&lt;br/&gt;      RAISE_APPLICATION_ERROR(-20001, &apos;Vacation record already exists for this date range.&apos; );&lt;br/&gt;    END IF;&lt;br/&gt;  END LOOP;&lt;br/&gt;END VACATION_APPLY_CHECK;&lt;br/&gt;FUNCTION GET_DEFAULT_INVOICE_STATUS&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT ID INTO V_RESULT FROM INVOICE_STATUSES WHERE UPPER(NAME) = &apos;NEW&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_DEFAULT_INVOICE_STATUS;&lt;br/&gt;FUNCTION GET_DEFAULT_INVOICE_TERMS&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  RETURN 30;&lt;br/&gt;END GET_DEFAULT_INVOICE_TERMS;&lt;br/&gt;FUNCTION GET_MILESTONE_INVOICED_AMOUNT(&lt;br/&gt;    P_INV_MIL_ID IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT SUM(NVL(LINE_AMOUNT, 0))&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM INVOICE_DETAILS&lt;br/&gt;  WHERE INV_MIL_ID = P_INV_MIL_ID;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_MILESTONE_INVOICED_AMOUNT;&lt;br/&gt;PROCEDURE CREATE_INVOICE(&lt;br/&gt;    P_INV_IDS      IN APEX_APPLICATION_GLOBAL.VC_ARR2,&lt;br/&gt;    P_LINE_AMOUNTS IN APEX_APPLICATION_GLOBAL.VC_ARR2)&lt;br/&gt;AS&lt;br/&gt;  V_INV_ID_STRING      VARCHAR2(400);&lt;br/&gt;  V_INV_ID             INTEGER;&lt;br/&gt;  V_ROWNO              INTEGER;&lt;br/&gt;  V_MAX_INVOICE_DATE   DATE;&lt;br/&gt;  V_HEADER_DESCRIPTION VARCHAR2(400);&lt;br/&gt;  V_INV_HEA_ID         INTEGER;&lt;br/&gt;  V_TOTAL_LINE_AMOUNT  NUMBER := 0;&lt;br/&gt;  V_MILESTONE_AMOUNT   NUMBER;&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_INV_IDS IS NULL OR P_INV_IDS.COUNT = 0 OR P_LINE_AMOUNTS IS NULL OR P_LINE_AMOUNTS.COUNT = 0 THEN&lt;br/&gt;    RETURN;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR I IN 1..P_INV_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    V_INV_ID_STRING := SUBSTR(P_INV_IDS(I), 1, INSTR( P_INV_IDS(I), &apos; &apos;) - 1);&lt;br/&gt;    V_INV_ID        := TO_NUMBER(V_INV_ID_STRING);&lt;br/&gt;    SELECT GREATEST(NVL(V_MAX_INVOICE_DATE, DUE_DATE), DUE_DATE)&lt;br/&gt;    INTO V_MAX_INVOICE_DATE&lt;br/&gt;    FROM INVOICING_MILESTONES&lt;br/&gt;    WHERE ID = V_INV_ID;&lt;br/&gt;    SELECT PROJECT_NAME&lt;br/&gt;    INTO V_HEADER_DESCRIPTION&lt;br/&gt;    FROM PROJECTS&lt;br/&gt;    WHERE ID =&lt;br/&gt;      ( SELECT PRO_ID FROM INVOICING_MILESTONES WHERE ID = V_INV_ID&lt;br/&gt;      );&lt;br/&gt;  END LOOP;&lt;br/&gt;  SELECT INV_HEA_SEQ.NEXTVAL INTO V_INV_HEA_ID FROM DUAL;&lt;br/&gt;  INSERT&lt;br/&gt;  INTO INVOICE_HEADERS&lt;br/&gt;    (&lt;br/&gt;      ID,&lt;br/&gt;      INVOICE_DATE,&lt;br/&gt;      DESCRIPTION,&lt;br/&gt;      AMOUNT,&lt;br/&gt;      COMMENTS,&lt;br/&gt;      DUE_DATE,&lt;br/&gt;      INV_STA_ID&lt;br/&gt;    )&lt;br/&gt;  SELECT V_INV_HEA_ID,&lt;br/&gt;    V_MAX_INVOICE_DATE,&lt;br/&gt;    V_HEADER_DESCRIPTION,&lt;br/&gt;    0,&lt;br/&gt;    NULL,&lt;br/&gt;    V_MAX_INVOICE_DATE + GET_DEFAULT_INVOICE_TERMS,&lt;br/&gt;    GET_DEFAULT_INVOICE_STATUS&lt;br/&gt;  FROM DUAL;&lt;br/&gt;  FOR I IN 1..P_INV_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    V_INV_ID_STRING     := SUBSTR(P_INV_IDS(I), 1, INSTR( P_INV_IDS(I), &apos; &apos;) - 1);&lt;br/&gt;    V_INV_ID            := TO_NUMBER(V_INV_ID_STRING);&lt;br/&gt;    V_INV_ID_STRING     := SUBSTR(P_INV_IDS(I), INSTR(P_INV_IDS (I), &apos;[&apos;)      + 1);&lt;br/&gt;    V_INV_ID_STRING     := SUBSTR(V_INV_ID_STRING, 1, LENGTH( V_INV_ID_STRING) - 1);&lt;br/&gt;    V_ROWNO             := TO_NUMBER(V_INV_ID_STRING);&lt;br/&gt;    V_TOTAL_LINE_AMOUNT := V_TOTAL_LINE_AMOUNT + TO_NUMBER( NVL(P_LINE_AMOUNTS(V_ROWNO), 0));&lt;br/&gt;    SELECT AMOUNT&lt;br/&gt;    INTO V_MILESTONE_AMOUNT&lt;br/&gt;    FROM INVOICING_MILESTONES&lt;br/&gt;    WHERE ID               = V_INV_ID;&lt;br/&gt;    IF V_TOTAL_LINE_AMOUNT &gt; V_MILESTONE_AMOUNT THEN&lt;br/&gt;      RAISE_APPLICATION_ERROR(-20001, &apos;Amount to invoice cannot be more than amount remaining to be invoiced for milestone.&apos; );&lt;br/&gt;    END IF;&lt;br/&gt;    IF TO_NUMBER(NVL(P_LINE_AMOUNTS(V_ROWNO), 0)) = 0 THEN&lt;br/&gt;      RAISE_APPLICATION_ERROR(-20001, &apos;Amount to invoice cannot be zero.&apos;);&lt;br/&gt;    END IF;&lt;br/&gt;    INSERT&lt;br/&gt;    INTO INVOICE_DETAILS&lt;br/&gt;      (&lt;br/&gt;        ID,&lt;br/&gt;        DESCRIPTION,&lt;br/&gt;        LINE_AMOUNT,&lt;br/&gt;        COMMENTS,&lt;br/&gt;        INV_HEA_ID,&lt;br/&gt;        INV_MIL_ID&lt;br/&gt;      )&lt;br/&gt;    SELECT INV_DET_SEQ.NEXTVAL,&lt;br/&gt;      ( SELECT NAME FROM INVOICING_MILESTONES WHERE ID = V_INV_ID&lt;br/&gt;      ) ,&lt;br/&gt;      TO_NUMBER(NVL(P_LINE_AMOUNTS(V_ROWNO), 0)),&lt;br/&gt;      NULL,&lt;br/&gt;      V_INV_HEA_ID,&lt;br/&gt;      V_INV_ID&lt;br/&gt;    FROM DUAL;&lt;br/&gt;  END LOOP;&lt;br/&gt;END CREATE_INVOICE;&lt;br/&gt;FUNCTION GET_PROJECT_INVOICED_AMOUNT(&lt;br/&gt;    P_PRO_ID  IN INTEGER,&lt;br/&gt;    P_AS_ON   IN DATE DEFAULT SYSDATE,&lt;br/&gt;    P_DETAILS IN VARCHAR2 DEFAULT &apos;Y&apos;)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  ( SELECT * FROM INVOICING_MILESTONES WHERE PRO_ID = P_PRO_ID&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    FOR C2REC IN&lt;br/&gt;    (SELECT    *&lt;br/&gt;    FROM INVOICE_DETAILS&lt;br/&gt;    WHERE INV_MIL_ID           = C1REC.ID&lt;br/&gt;    AND NVL(P_AS_ON, SYSDATE) &gt;=&lt;br/&gt;      ( SELECT INVOICE_DATE FROM INVOICE_HEADERS WHERE ID = INV_HEA_ID&lt;br/&gt;      )&lt;br/&gt;    )&lt;br/&gt;    LOOP&lt;br/&gt;      IF P_DETAILS = &apos;Y&apos; THEN&lt;br/&gt;        INSERT&lt;br/&gt;        INTO TEMP_PROJECT_PROFITABILITY&lt;br/&gt;          (&lt;br/&gt;            GPIA_INV_HEA_ID,&lt;br/&gt;            GPIA_INVOICE_DATE,&lt;br/&gt;            GPIA_AMOUNT&lt;br/&gt;          )&lt;br/&gt;        SELECT ID,&lt;br/&gt;          INVOICE_DATE,&lt;br/&gt;          C2REC.LINE_AMOUNT&lt;br/&gt;        FROM INVOICE_HEADERS&lt;br/&gt;        WHERE ID = C2REC.INV_HEA_ID;&lt;br/&gt;      END IF;&lt;br/&gt;      V_RESULT := V_RESULT + NVL(C2REC.LINE_AMOUNT, 0);&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;  FOR C3REC IN&lt;br/&gt;  (SELECT    *&lt;br/&gt;  FROM INVOICE_ADDERS&lt;br/&gt;  WHERE INV_HEA_ID IN&lt;br/&gt;    (SELECT INV_HEA_ID&lt;br/&gt;    FROM INVOICE_DETAILS&lt;br/&gt;    WHERE INV_MIL_ID IN&lt;br/&gt;      ( SELECT ID FROM INVOICING_MILESTONES WHERE PRO_ID = P_PRO_ID&lt;br/&gt;      )&lt;br/&gt;    AND NVL(P_AS_ON, SYSDATE) &gt;=&lt;br/&gt;      ( SELECT INVOICE_DATE FROM INVOICE_HEADERS WHERE ID = INV_HEA_ID&lt;br/&gt;      )&lt;br/&gt;    )&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    IF P_DETAILS = &apos;Y&apos; THEN&lt;br/&gt;      INSERT&lt;br/&gt;      INTO TEMP_PROJECT_PROFITABILITY&lt;br/&gt;        (&lt;br/&gt;          GPIA_INV_HEA_ID,&lt;br/&gt;          GPIA_INVOICE_DATE,&lt;br/&gt;          GPIA_AMOUNT&lt;br/&gt;        )&lt;br/&gt;      SELECT ID,&lt;br/&gt;        INVOICE_DATE,&lt;br/&gt;        C3REC.LINE_AMOUNT&lt;br/&gt;      FROM INVOICE_HEADERS&lt;br/&gt;      WHERE ID = C3REC.INV_HEA_ID;&lt;br/&gt;    END IF;&lt;br/&gt;    V_RESULT := V_RESULT + NVL(C3REC.LINE_AMOUNT, 0);&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_PROJECT_INVOICED_AMOUNT;&lt;br/&gt;FUNCTION GET_DEFAULT_PAYMENT_STATUS&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT ID INTO V_RESULT FROM PAYMENT_STATUSES WHERE UPPER(NAME) = &apos;NEW&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_DEFAULT_PAYMENT_STATUS;&lt;br/&gt;PROCEDURE PURGE_PAYMENT(&lt;br/&gt;    P_PAY_HEA_ID IN INTEGER)&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  DELETE&lt;br/&gt;  FROM PAYMENT_DETAIL_AUDIT&lt;br/&gt;  WHERE PAY_DET_ID IN&lt;br/&gt;    ( SELECT ID FROM PAYMENT_DETAILS WHERE PAY_HEA_ID = P_PAY_HEA_ID&lt;br/&gt;    );&lt;br/&gt;  DELETE FROM PAYMENT_DETAILS WHERE PAY_HEA_ID = P_PAY_HEA_ID;&lt;br/&gt;  DELETE FROM PAYMENT_HEADER_AUDIT WHERE PAY_HEA_ID = P_PAY_HEA_ID;&lt;br/&gt;  DELETE&lt;br/&gt;  FROM PAYMENT_HEADERS&lt;br/&gt;  WHERE ID = P_PAY_HEA_ID;&lt;br/&gt;END PURGE_PAYMENT;&lt;br/&gt;FUNCTION GET_PROJECT_PAYMENT_AMOUNT(&lt;br/&gt;    P_PRO_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN VARCHAR2 DEFAULT NULL)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_PAYMENT_DATE DATE;&lt;br/&gt;  V_RESULT       NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  (SELECT    *&lt;br/&gt;  FROM PAYMENT_DETAILS&lt;br/&gt;  WHERE INV_HEA_ID IN&lt;br/&gt;    ( SELECT DISTINCT INV_HEA_ID&lt;br/&gt;    FROM INVOICE_DETAILS&lt;br/&gt;    WHERE INV_MIL_ID IN&lt;br/&gt;      ( SELECT ID FROM INVOICING_MILESTONES WHERE PRO_ID = P_PRO_ID&lt;br/&gt;      )&lt;br/&gt;    )&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    SELECT PAYMENT_DATE&lt;br/&gt;    INTO V_PAYMENT_DATE&lt;br/&gt;    FROM PAYMENT_HEADERS&lt;br/&gt;    WHERE ID       = C1REC.PAY_HEA_ID;&lt;br/&gt;    IF P_AS_ON    IS NOT NULL AND V_PAYMENT_DATE BETWEEN TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;) AND ADD_MONTHS( TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;), 1) - 1 THEN&lt;br/&gt;      V_RESULT    := V_RESULT                                                                                                                + NVL( C1REC.LINE_AMOUNT, 0);&lt;br/&gt;    ELSIF P_AS_ON IS NULL THEN&lt;br/&gt;      V_RESULT    := V_RESULT + NVL(C1REC.LINE_AMOUNT, 0);&lt;br/&gt;    END IF;&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_PROJECT_PAYMENT_AMOUNT;&lt;br/&gt;FUNCTION GET_APPLIED_PAYMENTS(&lt;br/&gt;    P_PAY_HEA_ID IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  ( SELECT * FROM PAYMENT_DETAILS WHERE PAY_HEA_ID = P_PAY_HEA_ID&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_RESULT := V_RESULT + NVL(C1REC.LINE_AMOUNT, 0);&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_APPLIED_PAYMENTS;&lt;br/&gt;FUNCTION DEFAULT_INVOICE_ADDER_AMOUNT(&lt;br/&gt;    P_INV_HEA_ID     IN INTEGER,&lt;br/&gt;    P_INV_ADD_TYP_ID IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT NVL(A.AMOUNT, 0) * NVL(B.RATE, 0) / 100&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM INVOICE_HEADERS A,&lt;br/&gt;    INVOICE_ADDER_RATES B&lt;br/&gt;  WHERE B.INV_ADD_TYP_ID = P_INV_ADD_TYP_ID&lt;br/&gt;  AND B.RATE_DATE        =&lt;br/&gt;    (SELECT MAX(C.RATE_DATE)&lt;br/&gt;    FROM INVOICE_ADDER_RATES C&lt;br/&gt;    WHERE C.INV_ADD_TYP_ID = P_INV_ADD_TYP_ID&lt;br/&gt;    AND C.RATE_DATE       &lt;= A.INVOICE_DATE&lt;br/&gt;    )&lt;br/&gt;  AND A.ID = P_INV_HEA_ID;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END DEFAULT_INVOICE_ADDER_AMOUNT;&lt;br/&gt;FUNCTION GET_INVOICE_HEADER_AMOUNT(&lt;br/&gt;    P_INV_HEA_ID IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;  V_LINES  NUMBER := 0;&lt;br/&gt;  V_ADDERS NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT SUM(LINE_AMOUNT)&lt;br/&gt;  INTO V_LINES&lt;br/&gt;  FROM INVOICE_DETAILS&lt;br/&gt;  WHERE INV_HEA_ID = P_INV_HEA_ID;&lt;br/&gt;  V_RESULT        := V_LINES;&lt;br/&gt;  SELECT SUM(LINE_AMOUNT)&lt;br/&gt;  INTO V_ADDERS&lt;br/&gt;  FROM INVOICE_ADDERS&lt;br/&gt;  WHERE INV_HEA_ID = P_INV_HEA_ID;&lt;br/&gt;  V_RESULT        := NVL(V_LINES, 0) + NVL(V_ADDERS, 0);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_INVOICE_HEADER_AMOUNT;&lt;br/&gt;FUNCTION DEFAULT_PROJECT_TYPE_BILLED&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT ID INTO V_RESULT FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;Y&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END DEFAULT_PROJECT_TYPE_BILLED;&lt;br/&gt;FUNCTION GET_COST_ADDER_TYPE_AMOUNT(&lt;br/&gt;    P_COS_ADD_TYP_ID IN INTEGER,&lt;br/&gt;    P_AMOUNT_DATE    IN DATE)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_ALLOCATED NUMBER := 0;&lt;br/&gt;  V_RESULT    NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT SUM(AMOUNT)&lt;br/&gt;  INTO V_ALLOCATED&lt;br/&gt;  FROM PROJECT_COST_ADDERS&lt;br/&gt;  WHERE COS_ADD_TYP_ID = P_COS_ADD_TYP_ID&lt;br/&gt;  AND AMOUNT_DATE      = P_AMOUNT_DATE;&lt;br/&gt;  SELECT AMOUNT - NVL(V_ALLOCATED, 0)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM COST_ADDER_AMOUNTS&lt;br/&gt;  WHERE AMOUNT_DATE =&lt;br/&gt;    (SELECT MAX(AMOUNT_DATE)&lt;br/&gt;    FROM COST_ADDER_AMOUNTS&lt;br/&gt;    WHERE COS_ADD_TYP_ID = P_COS_ADD_TYP_ID&lt;br/&gt;    AND AMOUNT_DATE     &lt;= P_AMOUNT_DATE&lt;br/&gt;    )&lt;br/&gt;  AND COS_ADD_TYP_ID = P_COS_ADD_TYP_ID;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_COST_ADDER_TYPE_AMOUNT;&lt;br/&gt;FUNCTION GET_ASSIGNMENT_COST_RATE(&lt;br/&gt;    P_PRO_ID IN INTEGER,&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN DATE)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_COST_RATES APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  --  SELECT COST_RATE&lt;br/&gt;  --  INTO V_RESULT&lt;br/&gt;  --  FROM PROJECT_USER_AUDIT&lt;br/&gt;  --  WHERE USE_ID       = P_USE_ID&lt;br/&gt;  --  AND PRO_ID         = P_PRO_ID&lt;br/&gt;  --  AND EFFECTIVE_DATE =&lt;br/&gt;  --    (SELECT MAX(EFFECTIVE_DATE)&lt;br/&gt;  --    FROM PROJECT_USER_AUDIT&lt;br/&gt;  --    WHERE USE_ID        = P_USE_ID&lt;br/&gt;  --    AND PRO_ID          = P_PRO_ID&lt;br/&gt;  --    AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  --    )&lt;br/&gt;  --  AND AUDIT_DATE =&lt;br/&gt;  --    (SELECT MAX(AUDIT_DATE)&lt;br/&gt;  --    FROM PROJECT_USER_AUDIT&lt;br/&gt;  --    WHERE USE_ID        = P_USE_ID&lt;br/&gt;  --    AND PRO_ID          = P_PRO_ID&lt;br/&gt;  --    AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  --    );&lt;br/&gt;  SELECT COST_RATE BULK COLLECT&lt;br/&gt;  INTO V_COST_RATES&lt;br/&gt;  FROM PROJECT_USER_AUDIT&lt;br/&gt;  WHERE PRO_ID        = P_PRO_ID&lt;br/&gt;  AND USE_ID          = P_USE_ID&lt;br/&gt;  AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  ORDER BY EFFECTIVE_DATE DESC,&lt;br/&gt;    AUDIT_DATE DESC;&lt;br/&gt;  V_RESULT := V_COST_RATES(1);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN 0;&lt;br/&gt;END GET_ASSIGNMENT_COST_RATE;&lt;br/&gt;FUNCTION GET_USER_DAY_ASSIGNED_HOURS(&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN DATE)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  --  SELECT SUM(HOURS_PER_DAY) -- 8 TO 24&lt;br/&gt;  SELECT SUM(GET_NORMALIZED_HOURS(A.USE_ID, P_AS_ON, A.HOURS_PER_DAY))&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM PROJECT_USERS A&lt;br/&gt;  WHERE A.USE_ID = P_USE_ID&lt;br/&gt;  AND P_AS_ON BETWEEN A.START_DATE AND A.END_DATE&lt;br/&gt;  AND A.PRO_ID NOT IN&lt;br/&gt;    (SELECT ID&lt;br/&gt;    FROM PROJECTS&lt;br/&gt;    WHERE PRO_TYP_ID = XRAYLOGIC.GET_DEFAULT_PROJECT_TYPE_ID&lt;br/&gt;    );&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;END GET_USER_DAY_ASSIGNED_HOURS;&lt;br/&gt;FUNCTION GET_DAY_ASSIGNED_HOURS(&lt;br/&gt;    P_PRO_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON DATE DEFAULT SYSDATE)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_PRO_TYP_ID INTEGER;&lt;br/&gt;  V_USE_ID     INTEGER;&lt;br/&gt;  V_RESULT     NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT PRO_TYP_ID&lt;br/&gt;  INTO V_PRO_TYP_ID&lt;br/&gt;  FROM PROJECTS&lt;br/&gt;  WHERE ID =&lt;br/&gt;    ( SELECT PRO_ID FROM PROJECT_USERS WHERE ID = P_PRO_USE_ID&lt;br/&gt;    );&lt;br/&gt;  SELECT USE_ID INTO V_USE_ID FROM PROJECT_USERS WHERE ID = P_PRO_USE_ID;&lt;br/&gt;  IF V_PRO_TYP_ID = GET_DEFAULT_PROJECT_TYPE_ID THEN&lt;br/&gt;    --    SELECT SUM(HOURS_PER_DAY) -- 8 TO 24&lt;br/&gt;    SELECT SUM(GET_NORMALIZED_HOURS(USE_ID, P_AS_ON, HOURS_PER_DAY))&lt;br/&gt;    INTO V_RESULT&lt;br/&gt;    FROM PROJECT_USERS&lt;br/&gt;    WHERE USE_ID = V_USE_ID&lt;br/&gt;    AND P_AS_ON BETWEEN START_DATE AND END_DATE&lt;br/&gt;    AND ID   &lt;&gt; P_PRO_USE_ID;&lt;br/&gt;    V_RESULT := 8 - NVL(V_RESULT, 0);&lt;br/&gt;  ELSE&lt;br/&gt;    --    SELECT HOURS_PER_DAY -- 8 TO 24&lt;br/&gt;    SELECT GET_NORMALIZED_HOURS(USE_ID, P_AS_ON, HOURS_PER_DAY)&lt;br/&gt;    INTO V_RESULT&lt;br/&gt;    FROM PROJECT_USERS&lt;br/&gt;    WHERE ID = P_PRO_USE_ID;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_RESULT := 0;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_DAY_ASSIGNED_HOURS;&lt;br/&gt;FUNCTION GET_PROJECT_RESOURCE_COST(&lt;br/&gt;    P_PRO_ID    IN INTEGER,&lt;br/&gt;    P_AS_ON     IN DATE DEFAULT SYSDATE,&lt;br/&gt;    P_DETAILS   IN VARCHAR2 DEFAULT &apos;Y&apos;,&lt;br/&gt;    P_FROM_DATE IN DATE DEFAULT NULL)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_DAILY              DATE;&lt;br/&gt;  V_DAY_ASSIGNED_HOURS NUMBER;&lt;br/&gt;  V_COST_RATE          NUMBER;&lt;br/&gt;  V_RESULT             NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  (SELECT * FROM PROJECT_USERS WHERE PRO_ID = P_PRO_ID&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_DAILY := NVL(P_FROM_DATE, C1REC.START_DATE);&lt;br/&gt;    LOOP&lt;br/&gt;      EXIT&lt;br/&gt;    WHEN V_DAILY &gt; LEAST(C1REC.END_DATE, P_AS_ON);&lt;br/&gt;      IF V_DAILY BETWEEN C1REC.START_DATE AND LEAST( C1REC.END_DATE, P_AS_ON) AND IS_BUSINESS_DAY(V_DAILY, GET_CURRENT_BUSINESS_UNIT_ID) THEN&lt;br/&gt;        V_DAY_ASSIGNED_HOURS := GET_DAY_ASSIGNED_HOURS( C1REC.ID, V_DAILY);&lt;br/&gt;        V_COST_RATE          := GET_ASSIGNMENT_COST_RATE(P_PRO_ID, C1REC.USE_ID, P_AS_ON);&lt;br/&gt;        IF P_DETAILS          = &apos;Y&apos; AND V_COST_RATE &lt;&gt; 0 THEN&lt;br/&gt;          INSERT&lt;br/&gt;          INTO TEMP_PROJECT_PROFITABILITY&lt;br/&gt;            (&lt;br/&gt;              GPRC_PRO_USE_ID,&lt;br/&gt;              GPRC_USE_ID,&lt;br/&gt;              GPRC_TEC_ID,&lt;br/&gt;              GPRC_DES_ID,&lt;br/&gt;              GPRC_START_DATE,&lt;br/&gt;              GPRC_END_DATE,&lt;br/&gt;              GPRC_TOTAL_HOURS,&lt;br/&gt;              GPRC_COST_RATE,&lt;br/&gt;              GPRC_AMOUNT&lt;br/&gt;            )&lt;br/&gt;          SELECT C1REC.ID,&lt;br/&gt;            C1REC.USE_ID,&lt;br/&gt;            C1REC.TEC_ID,&lt;br/&gt;            C1REC.DES_ID,&lt;br/&gt;            C1REC.START_DATE,&lt;br/&gt;            C1REC.END_DATE,&lt;br/&gt;            V_DAY_ASSIGNED_HOURS,&lt;br/&gt;            V_COST_RATE,&lt;br/&gt;            V_DAY_ASSIGNED_HOURS * V_COST_RATE&lt;br/&gt;            --            NVL(C1REC.HOURS_PER_DAY, 0) * V_COST_RATE&lt;br/&gt;          FROM DUAL;&lt;br/&gt;        END IF;&lt;br/&gt;        V_RESULT := V_RESULT + (V_DAY_ASSIGNED_HOURS * V_COST_RATE);&lt;br/&gt;      END IF;&lt;br/&gt;      V_DAILY := V_DAILY + 1;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_PROJECT_RESOURCE_COST;&lt;br/&gt;FUNCTION GET_ALLOC_PROJ_RESOURCE_COST(&lt;br/&gt;    P_PRO_ID    IN INTEGER,&lt;br/&gt;    P_AS_ON     IN DATE DEFAULT SYSDATE,&lt;br/&gt;    P_DETAILS   IN VARCHAR2 DEFAULT &apos;Y&apos;,&lt;br/&gt;    P_FROM_DATE IN DATE DEFAULT NULL)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_DAILY              DATE;&lt;br/&gt;  V_DAY_ASSIGNED_HOURS NUMBER;&lt;br/&gt;  V_COST_RATE          NUMBER;&lt;br/&gt;  V_RESULT             NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  (SELECT * FROM PROJECT_USERS WHERE PRO_ID = P_PRO_ID&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_DAILY := NVL(P_FROM_DATE, C1REC.START_DATE);&lt;br/&gt;    LOOP&lt;br/&gt;      EXIT&lt;br/&gt;    WHEN V_DAILY &gt; LEAST(C1REC.END_DATE, P_AS_ON);&lt;br/&gt;      IF V_DAILY BETWEEN C1REC.START_DATE AND LEAST( C1REC.END_DATE, P_AS_ON) AND IS_BUSINESS_DAY(V_DAILY, GET_CURRENT_BUSINESS_UNIT_ID) THEN&lt;br/&gt;        V_DAY_ASSIGNED_HOURS := GET_DAY_ASSIGNED_HOURS( C1REC.ID, V_DAILY);&lt;br/&gt;        V_COST_RATE          := GET_ASSIGNMENT_COST_RATE(P_PRO_ID, C1REC.USE_ID, V_DAILY);&lt;br/&gt;        IF P_DETAILS          = &apos;Y&apos; AND V_COST_RATE &lt;&gt; 0 THEN&lt;br/&gt;          INSERT&lt;br/&gt;          INTO TEMP_PROJECT_PROFITABILITY&lt;br/&gt;            (&lt;br/&gt;              GAPRC_PRO_ID,&lt;br/&gt;              GAPRC_PRO_USE_ID,&lt;br/&gt;              GAPRC_USE_ID,&lt;br/&gt;              GAPRC_TEC_ID,&lt;br/&gt;              GAPRC_DES_ID,&lt;br/&gt;              GAPRC_START_DATE,&lt;br/&gt;              GAPRC_END_DATE,&lt;br/&gt;              GAPRC_TOTAL_HOURS,&lt;br/&gt;              GAPRC_COST_RATE,&lt;br/&gt;              GAPRC_AMOUNT&lt;br/&gt;            )&lt;br/&gt;          SELECT P_PRO_ID,&lt;br/&gt;            C1REC.ID,&lt;br/&gt;            C1REC.USE_ID,&lt;br/&gt;            C1REC.TEC_ID,&lt;br/&gt;            C1REC.DES_ID,&lt;br/&gt;            V_DAILY,&lt;br/&gt;            V_DAILY,&lt;br/&gt;            --            C1REC.START_DATE,&lt;br/&gt;            --            C1REC.END_DATE,&lt;br/&gt;            V_DAY_ASSIGNED_HOURS,&lt;br/&gt;            V_COST_RATE,&lt;br/&gt;            --            NVL(C1REC.HOURS_PER_DAY, 0) * V_COST_RATE&lt;br/&gt;            NVL(V_DAY_ASSIGNED_HOURS, 0) * V_COST_RATE&lt;br/&gt;          FROM DUAL;&lt;br/&gt;        END IF;&lt;br/&gt;        V_RESULT := V_RESULT + (V_DAY_ASSIGNED_HOURS * V_COST_RATE);&lt;br/&gt;      END IF;&lt;br/&gt;      V_DAILY := V_DAILY + 1;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_ALLOC_PROJ_RESOURCE_COST;&lt;br/&gt;FUNCTION GET_PROJECT_ADDER_COST(&lt;br/&gt;    P_PRO_ID  IN INTEGER,&lt;br/&gt;    P_AS_ON   IN DATE DEFAULT SYSDATE,&lt;br/&gt;    P_DETAILS IN VARCHAR2 DEFAULT &apos;Y&apos;)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_START_DATE DATE;&lt;br/&gt;  V_END_DATE   DATE;&lt;br/&gt;  V_DAILY      DATE;&lt;br/&gt;  V_RESULT     NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT START_DATE,&lt;br/&gt;    END_DATE&lt;br/&gt;  INTO V_START_DATE,&lt;br/&gt;    V_END_DATE&lt;br/&gt;  FROM PROJECTS&lt;br/&gt;  WHERE ID = P_PRO_ID;&lt;br/&gt;  V_DAILY := V_START_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DAILY &gt; LEAST(V_END_DATE, P_AS_ON);&lt;br/&gt;    FOR C1REC IN&lt;br/&gt;    ( SELECT * FROM PROJECT_COST_ADDERS WHERE PRO_ID = P_PRO_ID&lt;br/&gt;    )&lt;br/&gt;    LOOP&lt;br/&gt;      IF V_DAILY     = C1REC.AMOUNT_DATE AND IS_BUSINESS_DAY(V_DAILY, GET_CURRENT_BUSINESS_UNIT_ID) THEN&lt;br/&gt;        IF P_DETAILS = &apos;Y&apos; AND NVL(C1REC.AMOUNT, 0) &lt;&gt; 0 THEN&lt;br/&gt;          INSERT&lt;br/&gt;          INTO TEMP_PROJECT_PROFITABILITY&lt;br/&gt;            (&lt;br/&gt;              GPAC_COS_ADD_ID,&lt;br/&gt;              GPAC_COS_ADD_TYP_ID,&lt;br/&gt;              GPAC_ADDER_DATE,&lt;br/&gt;              GPAC_AMOUNT&lt;br/&gt;            )&lt;br/&gt;          SELECT C1REC.ID,&lt;br/&gt;            C1REC.COS_ADD_TYP_ID,&lt;br/&gt;            C1REC.AMOUNT_DATE,&lt;br/&gt;            C1REC.AMOUNT&lt;br/&gt;          FROM DUAL;&lt;br/&gt;        END IF;&lt;br/&gt;        V_RESULT := V_RESULT + NVL ( C1REC.AMOUNT, 0 ) ;&lt;br/&gt;      END IF;&lt;br/&gt;    END LOOP;&lt;br/&gt;    V_DAILY := V_DAILY + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_PROJECT_ADDER_COST;&lt;br/&gt;FUNCTION GET_PROJECT_DIRECT_COST(&lt;br/&gt;    P_PRO_ID  IN INTEGER,&lt;br/&gt;    P_AS_ON   IN DATE DEFAULT SYSDATE,&lt;br/&gt;    P_DETAILS IN VARCHAR2 DEFAULT &apos;Y&apos;)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_RESULT := GET_PROJECT_RESOURCE_COST(P_PRO_ID, P_AS_ON, P_DETAILS) + GET_PROJECT_ADDER_COST(P_PRO_ID, P_AS_ON, P_DETAILS) ;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_PROJECT_DIRECT_COST;&lt;br/&gt;FUNCTION GET_SKILL_COST_RATE(&lt;br/&gt;    P_TEC_ID IN INTEGER,&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN DATE)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_COST_RATES APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  --  SELECT COST_RATE&lt;br/&gt;  --  INTO V_RESULT&lt;br/&gt;  --  FROM TECHNOLOGY_USERS&lt;br/&gt;  --  WHERE USE_ID       = P_USE_ID&lt;br/&gt;  --  AND TEC_ID         = P_TEC_ID&lt;br/&gt;  --  AND EFFECTIVE_DATE =&lt;br/&gt;  --    (SELECT MAX(EFFECTIVE_DATE)&lt;br/&gt;  --    FROM TECHNOLOGY_USERS&lt;br/&gt;  --    WHERE USE_ID        = P_USE_ID&lt;br/&gt;  --    AND TEC_ID          = P_TEC_ID&lt;br/&gt;  --    AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  --    );&lt;br/&gt;  SELECT COST_RATE BULK COLLECT&lt;br/&gt;  INTO V_COST_RATES&lt;br/&gt;  FROM TECHNOLOGY_USERS&lt;br/&gt;  WHERE USE_ID        = P_USE_ID&lt;br/&gt;  AND TEC_ID          = P_TEC_ID&lt;br/&gt;  AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  ORDER BY EFFECTIVE_DATE DESC;&lt;br/&gt;  V_RESULT := V_COST_RATES(1);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN 0;&lt;br/&gt;END GET_SKILL_COST_RATE;&lt;br/&gt;FUNCTION GET_USER_COST_RATE(&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN DATE)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_COST_RATES APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  --  SELECT COST_RATE&lt;br/&gt;  --  INTO V_RESULT&lt;br/&gt;  --  FROM USER_AUDIT&lt;br/&gt;  --  WHERE USE_ID       = P_USE_ID&lt;br/&gt;  --  AND EFFECTIVE_DATE =&lt;br/&gt;  --    (SELECT MAX(EFFECTIVE_DATE)&lt;br/&gt;  --    FROM USER_AUDIT&lt;br/&gt;  --    WHERE USE_ID        = P_USE_ID&lt;br/&gt;  --    AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  --    )&lt;br/&gt;  --  AND AUDIT_DATE =&lt;br/&gt;  --    (SELECT MAX(AUDIT_DATE)&lt;br/&gt;  --    FROM USER_AUDIT&lt;br/&gt;  --    WHERE USE_ID        = P_USE_ID&lt;br/&gt;  --    AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  --    );&lt;br/&gt;  SELECT COST_RATE BULK COLLECT&lt;br/&gt;  INTO V_COST_RATES&lt;br/&gt;  FROM USER_AUDIT&lt;br/&gt;  WHERE USE_ID        = P_USE_ID&lt;br/&gt;  AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  AND P_AS_ON BETWEEN JOINING_DATE AND NVL(LEAVING_DATE, P_AS_ON)&lt;br/&gt;  ORDER BY EFFECTIVE_DATE DESC,&lt;br/&gt;    AUDIT_DATE DESC;&lt;br/&gt;  V_RESULT := V_COST_RATES(1);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN 0;&lt;br/&gt;END GET_USER_COST_RATE;&lt;br/&gt;FUNCTION GET_ASSIGNMENT_BILLING_RATE(&lt;br/&gt;    P_PRO_ID IN INTEGER,&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN DATE)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_BILLING_RATES APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  --  SELECT BILLING_RATE&lt;br/&gt;  --  INTO V_RESULT&lt;br/&gt;  --  FROM PROJECT_USER_AUDIT&lt;br/&gt;  --  WHERE USE_ID       = P_USE_ID&lt;br/&gt;  --  AND PRO_ID         = P_PRO_ID&lt;br/&gt;  --  AND EFFECTIVE_DATE =&lt;br/&gt;  --    (SELECT MAX(EFFECTIVE_DATE)&lt;br/&gt;  --    FROM PROJECT_USER_AUDIT&lt;br/&gt;  --    WHERE USE_ID        = P_USE_ID&lt;br/&gt;  --    AND PRO_ID          = P_PRO_ID&lt;br/&gt;  --    AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  --    )&lt;br/&gt;  --  AND AUDIT_DATE =&lt;br/&gt;  --    (SELECT MAX(AUDIT_DATE)&lt;br/&gt;  --    FROM PROJECT_USER_AUDIT&lt;br/&gt;  --    WHERE USE_ID        = P_USE_ID&lt;br/&gt;  --    AND PRO_ID          = P_PRO_ID&lt;br/&gt;  --    AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  --    );&lt;br/&gt;  SELECT BILLING_RATE BULK COLLECT&lt;br/&gt;  INTO V_BILLING_RATES&lt;br/&gt;  FROM PROJECT_USER_AUDIT&lt;br/&gt;  WHERE PRO_ID        = P_PRO_ID&lt;br/&gt;  AND USE_ID          = P_USE_ID&lt;br/&gt;  AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  ORDER BY EFFECTIVE_DATE DESC,&lt;br/&gt;    AUDIT_DATE DESC;&lt;br/&gt;  V_RESULT := V_BILLING_RATES(1);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN 0;&lt;br/&gt;END GET_ASSIGNMENT_BILLING_RATE;&lt;br/&gt;FUNCTION GET_SKILL_BILLING_RATE(&lt;br/&gt;    P_TEC_ID IN INTEGER,&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN DATE)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_BILLING_RATES APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  --  SELECT BILLING_RATE&lt;br/&gt;  --  INTO V_RESULT&lt;br/&gt;  --  FROM TECHNOLOGY_USERS&lt;br/&gt;  --  WHERE USE_ID       = P_USE_ID&lt;br/&gt;  --  AND TEC_ID         = P_TEC_ID&lt;br/&gt;  --  AND EFFECTIVE_DATE =&lt;br/&gt;  --    (SELECT MAX(EFFECTIVE_DATE)&lt;br/&gt;  --    FROM TECHNOLOGY_USERS&lt;br/&gt;  --    WHERE USE_ID        = P_USE_ID&lt;br/&gt;  --    AND TEC_ID          = P_TEC_ID&lt;br/&gt;  --    AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  --    );&lt;br/&gt;  SELECT BILLING_RATE BULK COLLECT&lt;br/&gt;  INTO V_BILLING_RATES&lt;br/&gt;  FROM TECHNOLOGY_USERS&lt;br/&gt;  WHERE USE_ID        = P_USE_ID&lt;br/&gt;  AND TEC_ID          = P_TEC_ID&lt;br/&gt;  AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  ORDER BY EFFECTIVE_DATE DESC;&lt;br/&gt;  V_RESULT := V_BILLING_RATES(1);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN 0;&lt;br/&gt;END GET_SKILL_BILLING_RATE;&lt;br/&gt;FUNCTION GET_USER_BILLING_RATE(&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN DATE)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_BILLING_RATES APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  --  SELECT BILLING_RATE&lt;br/&gt;  --  INTO V_RESULT&lt;br/&gt;  --  FROM USER_AUDIT&lt;br/&gt;  --  WHERE USE_ID       = P_USE_ID&lt;br/&gt;  --  AND EFFECTIVE_DATE =&lt;br/&gt;  --    (SELECT MAX(EFFECTIVE_DATE)&lt;br/&gt;  --    FROM USER_AUDIT&lt;br/&gt;  --    WHERE USE_ID        = P_USE_ID&lt;br/&gt;  --    AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  --    )&lt;br/&gt;  --  AND AUDIT_DATE =&lt;br/&gt;  --    (SELECT MAX(AUDIT_DATE)&lt;br/&gt;  --    FROM USER_AUDIT&lt;br/&gt;  --    WHERE USE_ID        = P_USE_ID&lt;br/&gt;  --    AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  --    );&lt;br/&gt;  SELECT BILLING_RATE BULK COLLECT&lt;br/&gt;  INTO V_BILLING_RATES&lt;br/&gt;  FROM USER_AUDIT&lt;br/&gt;  WHERE USE_ID        = P_USE_ID&lt;br/&gt;  AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  AND P_AS_ON BETWEEN JOINING_DATE AND NVL(LEAVING_DATE, P_AS_ON)&lt;br/&gt;  ORDER BY EFFECTIVE_DATE DESC,&lt;br/&gt;    AUDIT_DATE DESC;&lt;br/&gt;  V_RESULT := V_BILLING_RATES(1);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN 0;&lt;br/&gt;END GET_USER_BILLING_RATE;&lt;br/&gt;FUNCTION GET_RESOURCE_OVERHEAD_COST(&lt;br/&gt;    P_PRO_ID  IN INTEGER,&lt;br/&gt;    P_AS_ON   IN DATE DEFAULT SYSDATE,&lt;br/&gt;    P_DETAILS IN VARCHAR2 DEFAULT &apos;Y&apos;)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_START_DATE              DATE;&lt;br/&gt;  V_END_DATE                DATE;&lt;br/&gt;  V_DAILY                   DATE;&lt;br/&gt;  V_TOTAL_RESOURCE_COST     NUMBER := 0;&lt;br/&gt;  V_COST_RATE               NUMBER;&lt;br/&gt;  V_PROJECT_RESOURCE_COST   NUMBER;&lt;br/&gt;  V_USER_DAY_ASSIGNED_HOURS NUMBER;&lt;br/&gt;  V_ALLOCATED_RESOURCE_COST NUMBER := 0;&lt;br/&gt;  V_RESULT                  NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT START_DATE,&lt;br/&gt;    END_DATE&lt;br/&gt;  INTO V_START_DATE,&lt;br/&gt;    V_END_DATE&lt;br/&gt;  FROM PROJECTS&lt;br/&gt;  WHERE ID = P_PRO_ID;&lt;br/&gt;  V_DAILY := V_START_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DAILY &gt; LEAST(P_AS_ON, V_END_DATE);&lt;br/&gt;    IF IS_BUSINESS_DAY(V_DAILY, GET_CURRENT_BUSINESS_UNIT_ID) THEN&lt;br/&gt;      FOR C1REC IN&lt;br/&gt;      ( SELECT * FROM USERS&lt;br/&gt;      )&lt;br/&gt;      LOOP&lt;br/&gt;        V_COST_RATE := GET_USER_COST_RATE(C1REC.ID, V_DAILY);&lt;br/&gt;        IF P_DETAILS = &apos;Y&apos; AND V_COST_RATE &lt;&gt; 0 THEN&lt;br/&gt;          INSERT&lt;br/&gt;          INTO TEMP_PROJECT_PROFITABILITY&lt;br/&gt;            (&lt;br/&gt;              GROC_USE_ID,&lt;br/&gt;              GROC_START_DATE,&lt;br/&gt;              GROC_END_DATE,&lt;br/&gt;              GROC_AS_ON,&lt;br/&gt;              GROC_HOURS,&lt;br/&gt;              GROC_COST_RATE,&lt;br/&gt;              GROC_AMOUNT&lt;br/&gt;            )&lt;br/&gt;          SELECT C1REC.ID,&lt;br/&gt;            V_START_DATE,&lt;br/&gt;            V_END_DATE,&lt;br/&gt;            V_DAILY,&lt;br/&gt;            8,&lt;br/&gt;            V_COST_RATE,&lt;br/&gt;            8 * V_COST_RATE&lt;br/&gt;          FROM DUAL;&lt;br/&gt;        END IF;&lt;br/&gt;        V_TOTAL_RESOURCE_COST := V_TOTAL_RESOURCE_COST + ( V_COST_RATE * 8 ) ;&lt;br/&gt;      END LOOP;&lt;br/&gt;    END IF;&lt;br/&gt;    V_DAILY := V_DAILY + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_DAILY := V_START_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DAILY &gt; LEAST(P_AS_ON, V_END_DATE);&lt;br/&gt;    IF IS_BUSINESS_DAY(V_DAILY, GET_CURRENT_BUSINESS_UNIT_ID) THEN&lt;br/&gt;      FOR C1REC IN&lt;br/&gt;      ( SELECT * FROM PROJECTS WHERE PRO_TYP_ID &lt;&gt; GET_DEFAULT_PROJECT_TYPE_ID&lt;br/&gt;      )&lt;br/&gt;      LOOP&lt;br/&gt;        V_ALLOCATED_RESOURCE_COST := V_ALLOCATED_RESOURCE_COST + GET_ALLOC_PROJ_RESOURCE_COST ( C1REC.ID, V_DAILY, &apos;N&apos;, V_DAILY);&lt;br/&gt;      END LOOP;&lt;br/&gt;    END IF;&lt;br/&gt;    V_DAILY := V_DAILY + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  --  V_PROJECT_RESOURCE_COST := GET_ALLOC_PROJ_RESOURCE_COST(P_PRO_ID, LEAST(V_END_DATE, P_AS_ON), &apos;N&apos;, V_START_DATE);&lt;br/&gt;  V_PROJECT_RESOURCE_COST := GET_PROJECT_RESOURCE_COST(P_PRO_ID, LEAST(V_END_DATE, P_AS_ON), &apos;N&apos;, V_START_DATE);&lt;br/&gt;  V_RESULT                := ( V_TOTAL_RESOURCE_COST - V_ALLOCATED_RESOURCE_COST ) * (V_PROJECT_RESOURCE_COST / V_ALLOCATED_RESOURCE_COST ) ;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_RESOURCE_OVERHEAD_COST;&lt;br/&gt;FUNCTION GET_ADDER_OVERHEAD_COST(&lt;br/&gt;    P_PRO_ID  IN INTEGER,&lt;br/&gt;    P_AS_ON   IN DATE DEFAULT SYSDATE,&lt;br/&gt;    P_DETAILS IN VARCHAR2 DEFAULT &apos;Y&apos;)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_DAILY               DATE;&lt;br/&gt;  V_START_DATE          DATE;&lt;br/&gt;  V_END_DATE            DATE;&lt;br/&gt;  V_DAILY_OVERHEAD_RATE NUMBER;&lt;br/&gt;  V_TOTAL_ADDER_COST    NUMBER := 0;&lt;br/&gt;  V_PROJECT_ADDER_COST  NUMBER;&lt;br/&gt;  --  V_ALLOCATED_ADDER_COST    NUMBER := 0;&lt;br/&gt;  V_PROJECT_RESOURCE_COST   NUMBER;&lt;br/&gt;  V_ALLOCATED_RESOURCE_COST NUMBER := 0;&lt;br/&gt;  V_RESULT                  NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT START_DATE,&lt;br/&gt;    END_DATE&lt;br/&gt;  INTO V_START_DATE,&lt;br/&gt;    V_END_DATE&lt;br/&gt;  FROM PROJECTS&lt;br/&gt;  WHERE ID = P_PRO_ID;&lt;br/&gt;  V_DAILY := V_START_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DAILY &gt; LEAST(V_END_DATE, P_AS_ON);&lt;br/&gt;    FOR C1REC IN&lt;br/&gt;    (SELECT    *&lt;br/&gt;    FROM COST_ADDER_AMOUNTS&lt;br/&gt;    WHERE AMOUNT &lt;&gt; 0&lt;br/&gt;    AND AMOUNT_DATE BETWEEN XRAYLOGIC.GET_FIRST_OF_SPECIFIED_MONTH(V_DAILY) AND XRAYLOGIC.GET_LAST_OF_SPECIFIED_MONTH(V_DAILY)&lt;br/&gt;    ORDER BY AMOUNT_DATE&lt;br/&gt;    )&lt;br/&gt;    LOOP&lt;br/&gt;      V_DAILY_OVERHEAD_RATE := C1REC.AMOUNT / DAYS_IN_MONTH(V_DAILY);&lt;br/&gt;      IF P_DETAILS           = &apos;Y&apos; AND V_DAILY_OVERHEAD_RATE &lt;&gt; 0 THEN&lt;br/&gt;        INSERT&lt;br/&gt;        INTO TEMP_PROJECT_PROFITABILITY&lt;br/&gt;          (&lt;br/&gt;            GAOC_ADD_ID,&lt;br/&gt;            GAOC_ADDER_DATE,&lt;br/&gt;            GAOC_ADD_TYP_ID,&lt;br/&gt;            GAOC_AMOUNT&lt;br/&gt;          )&lt;br/&gt;        SELECT C1REC.ID,&lt;br/&gt;          V_DAILY,&lt;br/&gt;          C1REC.COS_ADD_TYP_ID,&lt;br/&gt;          V_DAILY_OVERHEAD_RATE&lt;br/&gt;        FROM DUAL;&lt;br/&gt;      END IF;&lt;br/&gt;      V_TOTAL_ADDER_COST := V_TOTAL_ADDER_COST + V_DAILY_OVERHEAD_RATE;&lt;br/&gt;    END LOOP;&lt;br/&gt;    V_DAILY := V_DAILY + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  --  V_DAILY := V_START_DATE;&lt;br/&gt;  --  LOOP&lt;br/&gt;  --    EXIT&lt;br/&gt;  --  WHEN V_DAILY &gt; LEAST(V_END_DATE, P_AS_ON);&lt;br/&gt;  --    FOR C1REC IN&lt;br/&gt;  --    ( SELECT * FROM COST_ADDER_AMOUNTS WHERE AMOUNT &lt;&gt; 0&lt;br/&gt;  --    )&lt;br/&gt;  --    LOOP&lt;br/&gt;  --      IF IS_BUSINESS_DAY(V_DAILY, GET_CURRENT_BUSINESS_UNIT_ID) THEN&lt;br/&gt;  --        IF V_DAILY     = C1REC.AMOUNT_DATE THEN&lt;br/&gt;  --          IF P_DETAILS = &apos;Y&apos; AND NVL(C1REC.AMOUNT, 0) &lt;&gt; 0 THEN&lt;br/&gt;  --            INSERT&lt;br/&gt;  --            INTO TEMP_PROJECT_PROFITABILITY&lt;br/&gt;  --              (&lt;br/&gt;  --                GAOC_ADD_ID,&lt;br/&gt;  --                GAOC_ADDER_DATE,&lt;br/&gt;  --                GAOC_ADD_TYP_ID,&lt;br/&gt;  --                GAOC_AMOUNT&lt;br/&gt;  --              )&lt;br/&gt;  --            SELECT C1REC.ID,&lt;br/&gt;  --              C1REC.AMOUNT_DATE,&lt;br/&gt;  --              C1REC.COS_ADD_TYP_ID,&lt;br/&gt;  --              C1REC.AMOUNT&lt;br/&gt;  --            FROM DUAL;&lt;br/&gt;  --          END IF;&lt;br/&gt;  --          V_TOTAL_ADDER_COST := V_TOTAL_ADDER_COST + NVL ( C1REC.AMOUNT, 0 ) ;&lt;br/&gt;  --        END IF;&lt;br/&gt;  --      END IF;&lt;br/&gt;  --    END LOOP;&lt;br/&gt;  --    V_DAILY := V_DAILY + 1;&lt;br/&gt;  --  --  END LOOP;&lt;br/&gt;  --  FOR C1REC IN&lt;br/&gt;  --  ( SELECT * FROM PROJECTS WHERE PRO_TYP_ID &lt;&gt; GET_DEFAULT_PROJECT_TYPE_ID&lt;br/&gt;  --  )&lt;br/&gt;  --  LOOP&lt;br/&gt;  --    V_PROJECT_ADDER_COST := GET_PROJECT_ADDER_COST ( C1REC.ID, P_AS_ON, &apos;N&apos;);&lt;br/&gt;  --    IF P_DETAILS          = &apos;Y&apos; AND V_PROJECT_ADDER_COST &lt;&gt; 0 THEN&lt;br/&gt;  --      INSERT&lt;br/&gt;  --      INTO TEMP_PROJECT_PROFITABILITY&lt;br/&gt;  --        (&lt;br/&gt;  --          GAOC_PRO_ID,&lt;br/&gt;  --          GAOC_ALLOCATED_OVERHEAD_COST&lt;br/&gt;  --        )&lt;br/&gt;  --      SELECT C1REC.ID,&lt;br/&gt;  --        V_PROJECT_ADDER_COST&lt;br/&gt;  --      FROM DUAL;&lt;br/&gt;  --    END IF;&lt;br/&gt;  --    V_ALLOCATED_ADDER_COST := V_ALLOCATED_ADDER_COST + V_PROJECT_ADDER_COST ;&lt;br/&gt;  --  END LOOP;&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  ( SELECT * FROM PROJECTS WHERE PRO_TYP_ID &lt;&gt; GET_DEFAULT_PROJECT_TYPE_ID&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_PROJECT_RESOURCE_COST   := GET_ALLOC_PROJ_RESOURCE_COST ( C1REC.ID, LEAST(V_END_DATE, P_AS_ON), &apos;Y&apos;, V_START_DATE);&lt;br/&gt;    V_ALLOCATED_RESOURCE_COST := V_ALLOCATED_RESOURCE_COST + V_PROJECT_RESOURCE_COST;&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_PROJECT_RESOURCE_COST := GET_PROJECT_RESOURCE_COST ( P_PRO_ID, LEAST(V_END_DATE, P_AS_ON), &apos;N&apos;, V_START_DATE);&lt;br/&gt;  V_RESULT                := ( V_TOTAL_ADDER_COST) * ( V_PROJECT_RESOURCE_COST / V_ALLOCATED_RESOURCE_COST ) ;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_ADDER_OVERHEAD_COST;&lt;br/&gt;FUNCTION GET_PROJECT_OVERHEAD_COST(&lt;br/&gt;    P_PRO_ID  IN INTEGER,&lt;br/&gt;    P_AS_ON   IN DATE DEFAULT SYSDATE,&lt;br/&gt;    P_DETAILS IN VARCHAR2 DEFAULT &apos;Y&apos;)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_RESULT := GET_RESOURCE_OVERHEAD_COST ( P_PRO_ID, P_AS_ON, P_DETAILS ) + GET_ADDER_OVERHEAD_COST ( P_PRO_ID , P_AS_ON, P_DETAILS ) ;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_PROJECT_OVERHEAD_COST;&lt;br/&gt;FUNCTION GET_PROJECT_TOTAL_COST(&lt;br/&gt;    P_PRO_ID  IN INTEGER,&lt;br/&gt;    P_AS_ON   IN DATE DEFAULT SYSDATE,&lt;br/&gt;    P_DETAILS IN VARCHAR2 DEFAULT &apos;Y&apos;)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_RESULT := GET_PROJECT_DIRECT_COST ( P_PRO_ID, P_AS_ON, P_DETAILS) + GET_PROJECT_OVERHEAD_COST ( P_PRO_ID, P_AS_ON, P_DETAILS ) ;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_PROJECT_TOTAL_COST;&lt;br/&gt;FUNCTION IS_BUSINESS_DAY(&lt;br/&gt;    P_DATE       IN DATE,&lt;br/&gt;    P_BUS_UNI_ID IN INTEGER DEFAULT NULL)&lt;br/&gt;  RETURN BOOLEAN&lt;br/&gt;AS&lt;br/&gt;  V_COUNT  INTEGER;&lt;br/&gt;  V_RESULT BOOLEAN := FALSE;&lt;br/&gt;BEGIN&lt;br/&gt;  IF TO_CHAR ( P_DATE, &apos;D&apos; ) NOT IN ( &apos;1&apos;, &apos;7&apos; ) THEN&lt;br/&gt;    SELECT COUNT(                 *)&lt;br/&gt;    INTO V_COUNT&lt;br/&gt;    FROM HOLIDAYS&lt;br/&gt;    WHERE BUS_UNI_ID = NVL(P_BUS_UNI_ID,&lt;br/&gt;      (SELECT BUS_UNI_ID FROM USERS WHERE ID = GET_CURRENT_USER_ID&lt;br/&gt;      ))&lt;br/&gt;    AND HOLIDAY_DATE = P_DATE;&lt;br/&gt;    IF V_COUNT       = 0 THEN&lt;br/&gt;      V_RESULT      := TRUE;&lt;br/&gt;    END IF;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END IS_BUSINESS_DAY;&lt;br/&gt;PROCEDURE ZERO_TABLE_NULLS(&lt;br/&gt;    P_TABLE_NAME IN VARCHAR2)&lt;br/&gt;AS&lt;br/&gt;  V_SQL VARCHAR2(4000);&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  (SELECT COLUMN_NAME&lt;br/&gt;  FROM ALL_TAB_COLUMNS&lt;br/&gt;  WHERE TABLE_NAME = UPPER(P_TABLE_NAME)&lt;br/&gt;  AND OWNER        = USER&lt;br/&gt;  AND DATA_TYPE   IN (&apos;INTEGER&apos;, &apos;NUMBER&apos;)&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_SQL := &apos;UPDATE &apos; || UPPER(P_TABLE_NAME) || &apos; SET &apos; || C1REC.COLUMN_NAME || &apos; = 0 WHERE &apos; || C1REC.COLUMN_NAME ||&apos; IS NULL&apos;;&lt;br/&gt;    EXECUTE IMMEDIATE V_SQL;&lt;br/&gt;  END LOOP;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_SQL := SQLERRM;&lt;br/&gt;END ZERO_TABLE_NULLS;&lt;br/&gt;FUNCTION GET_PIPELINE_FORECAST(&lt;br/&gt;    P_PIP_STA_ID   IN INTEGER,&lt;br/&gt;    P_AS_ON        IN VARCHAR2,&lt;br/&gt;    P_MONTH_OFFSET IN INTEGER DEFAULT 0)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE DATE;&lt;br/&gt;  V_UPPER_DATE DATE;&lt;br/&gt;  V_RESULT     NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := ADD_MONTHS(P_AS_ON, P_MONTH_OFFSET);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, 1) - 1;&lt;br/&gt;  SELECT SUM(NVL(EXPECTED_VALUE, 0))&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM PIPELINE&lt;br/&gt;  WHERE PIP_STA_ID = P_PIP_STA_ID&lt;br/&gt;  AND EXPECTED_START BETWEEN V_LOWER_DATE AND V_UPPER_DATE;&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;END GET_PIPELINE_FORECAST;&lt;br/&gt;FUNCTION GET_PIPELINE_FORECAST_DETAILS(&lt;br/&gt;    P_PIP_STA_ID IN INTEGER,&lt;br/&gt;    P_AS_ON      IN VARCHAR2,&lt;br/&gt;    P_ID         IN INTEGER)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE DATE;&lt;br/&gt;  V_UPPER_DATE DATE;&lt;br/&gt;  V_COUNT      INTEGER     := 0;&lt;br/&gt;  V_RESULT     VARCHAR2(1) := &apos;N&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(&apos;01-&apos; || P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, 1) - 1;&lt;br/&gt;  SELECT COUNT(                               *)&lt;br/&gt;  INTO V_COUNT&lt;br/&gt;  FROM PIPELINE&lt;br/&gt;  WHERE PIP_STA_ID = P_PIP_STA_ID&lt;br/&gt;  AND EXPECTED_START BETWEEN V_LOWER_DATE AND V_UPPER_DATE&lt;br/&gt;  AND ID      = P_ID;&lt;br/&gt;  IF V_COUNT  = 1 THEN&lt;br/&gt;    V_RESULT := &apos;Y&apos;;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_PIPELINE_FORECAST_DETAILS;&lt;br/&gt;FUNCTION GET_STAFF_REQUIRED(&lt;br/&gt;    P_TEC_ID           IN INTEGER,&lt;br/&gt;    P_DES_ID           IN INTEGER,&lt;br/&gt;    P_AS_ON            IN VARCHAR2,&lt;br/&gt;    P_LOOKAHEAD_MONTHS IN INTEGER)&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE DATE;&lt;br/&gt;  V_UPPER_DATE DATE;&lt;br/&gt;  V_RESULT     INTEGER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_LOOKAHEAD_MONTHS) - 1;&lt;br/&gt;  SELECT SUM( NUMBER_REQUIRED)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM STAFFING_REQUIREMENTS&lt;br/&gt;  WHERE TEC_ID = P_TEC_ID&lt;br/&gt;  AND DES_ID   = P_DES_ID&lt;br/&gt;  AND ( ( V_LOWER_DATE BETWEEN START_DATE AND END_DATE )&lt;br/&gt;  OR ( V_UPPER_DATE BETWEEN START_DATE AND END_DATE )&lt;br/&gt;  OR ( START_DATE BETWEEN V_LOWER_DATE AND V_UPPER_DATE )&lt;br/&gt;  OR ( END_DATE BETWEEN V_LOWER_DATE AND V_UPPER_DATE ) );&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;END GET_STAFF_REQUIRED;&lt;br/&gt;FUNCTION GET_STAFF_FULFILLED(&lt;br/&gt;    P_TEC_ID           IN INTEGER,&lt;br/&gt;    P_DES_ID           IN INTEGER,&lt;br/&gt;    P_AS_ON            IN VARCHAR2,&lt;br/&gt;    P_LOOKAHEAD_MONTHS IN INTEGER)&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE DATE;&lt;br/&gt;  V_UPPER_DATE DATE;&lt;br/&gt;  V_RESULT     INTEGER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_LOOKAHEAD_MONTHS) - 1;&lt;br/&gt;  SELECT SUM( NUMBER_REQUIRED)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM STAFFING_REQUIREMENTS&lt;br/&gt;  WHERE TEC_ID = P_TEC_ID&lt;br/&gt;  AND DES_ID   = P_DES_ID&lt;br/&gt;  AND ( ( V_LOWER_DATE BETWEEN START_DATE AND END_DATE )&lt;br/&gt;  OR ( V_UPPER_DATE BETWEEN START_DATE AND END_DATE )&lt;br/&gt;  OR ( START_DATE BETWEEN V_LOWER_DATE AND V_UPPER_DATE )&lt;br/&gt;  OR ( END_DATE BETWEEN V_LOWER_DATE AND V_UPPER_DATE ) )&lt;br/&gt;  AND FULFILLED =&lt;br/&gt;    ( SELECT ID FROM FLAG_STATUSES WHERE NAME = &apos;Y&apos;&lt;br/&gt;    );&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;END GET_STAFF_FULFILLED;&lt;br/&gt;FUNCTION GET_DEPLOYABLE_RESOURCES(&lt;br/&gt;    P_TEC_ID           IN INTEGER,&lt;br/&gt;    P_DES_ID           IN INTEGER,&lt;br/&gt;    P_AS_ON            IN VARCHAR2,&lt;br/&gt;    P_LOOKAHEAD_MONTHS IN INTEGER)&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE         DATE;&lt;br/&gt;  V_UPPER_DATE         DATE;&lt;br/&gt;  V_TOTAL_RESOURCES    INTEGER;&lt;br/&gt;  V_ASSIGNED_RESOURCES INTEGER;&lt;br/&gt;  V_RESULT             INTEGER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_LOOKAHEAD_MONTHS) - 1;&lt;br/&gt;  SELECT COUNT(                                                *)&lt;br/&gt;  INTO V_TOTAL_RESOURCES&lt;br/&gt;  FROM TECHNOLOGY_USERS A&lt;br/&gt;  WHERE TEC_ID = P_TEC_ID&lt;br/&gt;  AND USE_ID  IN&lt;br/&gt;    (SELECT ID&lt;br/&gt;    FROM USERS&lt;br/&gt;    WHERE DES_ID = P_DES_ID&lt;br/&gt;    AND ACTIVE   =&lt;br/&gt;      ( SELECT ID FROM FLAG_STATUSES WHERE NAME = &apos;Y&apos;&lt;br/&gt;      )&lt;br/&gt;    AND LEAVING_DATE IS NULL&lt;br/&gt;    )&lt;br/&gt;  AND EFFECTIVE_DATE =&lt;br/&gt;    (SELECT MAX(B.EFFECTIVE_DATE)&lt;br/&gt;    FROM TECHNOLOGY_USERS B&lt;br/&gt;    WHERE B.TEC_ID        = P_TEC_ID&lt;br/&gt;    AND B.USE_ID          = A.USE_ID&lt;br/&gt;    AND B.EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;    );&lt;br/&gt;  SELECT COUNT( *)&lt;br/&gt;  INTO V_ASSIGNED_RESOURCES&lt;br/&gt;  FROM PROJECT_USERS&lt;br/&gt;  WHERE TEC_ID = P_TEC_ID&lt;br/&gt;  AND DES_ID   = P_DES_ID&lt;br/&gt;  AND ( ( V_LOWER_DATE BETWEEN START_DATE AND END_DATE )&lt;br/&gt;  OR ( V_UPPER_DATE BETWEEN START_DATE AND END_DATE )&lt;br/&gt;  OR ( START_DATE BETWEEN V_LOWER_DATE AND V_UPPER_DATE )&lt;br/&gt;  OR ( END_DATE BETWEEN V_LOWER_DATE AND V_UPPER_DATE ) );&lt;br/&gt;  V_RESULT := GREATEST(NVL(V_TOTAL_RESOURCES, 0) - NVL( V_ASSIGNED_RESOURCES, 0), 0);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_DEPLOYABLE_RESOURCES;&lt;br/&gt;FUNCTION GET_STAFF_REQUIRED_DETAILS(&lt;br/&gt;    P_TEC_ID           IN INTEGER,&lt;br/&gt;    P_DES_ID           IN INTEGER,&lt;br/&gt;    P_AS_ON            IN VARCHAR2,&lt;br/&gt;    P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;    P_ID               IN INTEGER)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE DATE;&lt;br/&gt;  V_UPPER_DATE DATE;&lt;br/&gt;  V_COUNT      INTEGER     := 0;&lt;br/&gt;  V_RESULT     VARCHAR2(1) := &apos;N&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_LOOKAHEAD_MONTHS) - 1;&lt;br/&gt;  SELECT COUNT(                                                *)&lt;br/&gt;  INTO V_COUNT&lt;br/&gt;  FROM STAFFING_REQUIREMENTS&lt;br/&gt;  WHERE TEC_ID = P_TEC_ID&lt;br/&gt;  AND DES_ID   = P_DES_ID&lt;br/&gt;  AND ( ( V_LOWER_DATE BETWEEN START_DATE AND END_DATE )&lt;br/&gt;  OR ( V_UPPER_DATE BETWEEN START_DATE AND END_DATE )&lt;br/&gt;  OR ( START_DATE BETWEEN V_LOWER_DATE AND V_UPPER_DATE )&lt;br/&gt;  OR ( END_DATE BETWEEN V_LOWER_DATE AND V_UPPER_DATE ) )&lt;br/&gt;  AND ID      = P_ID;&lt;br/&gt;  IF V_COUNT  = 1 THEN&lt;br/&gt;    V_RESULT := &apos;Y&apos;;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_STAFF_REQUIRED_DETAILS;&lt;br/&gt;FUNCTION GET_STAFF_FULFILLED_DETAILS(&lt;br/&gt;    P_TEC_ID           IN INTEGER,&lt;br/&gt;    P_DES_ID           IN INTEGER,&lt;br/&gt;    P_AS_ON            IN VARCHAR2,&lt;br/&gt;    P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;    P_ID               IN INTEGER)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE DATE;&lt;br/&gt;  V_UPPER_DATE DATE;&lt;br/&gt;  V_COUNT      INTEGER     := 0;&lt;br/&gt;  V_RESULT     VARCHAR2(1) := &apos;N&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_LOOKAHEAD_MONTHS) - 1;&lt;br/&gt;  SELECT COUNT(                                                *)&lt;br/&gt;  INTO V_COUNT&lt;br/&gt;  FROM STAFFING_REQUIREMENTS&lt;br/&gt;  WHERE TEC_ID = P_TEC_ID&lt;br/&gt;  AND DES_ID   = P_DES_ID&lt;br/&gt;  AND ( ( V_LOWER_DATE BETWEEN START_DATE AND END_DATE )&lt;br/&gt;  OR ( V_UPPER_DATE BETWEEN START_DATE AND END_DATE )&lt;br/&gt;  OR ( START_DATE BETWEEN V_LOWER_DATE AND V_UPPER_DATE )&lt;br/&gt;  OR ( END_DATE BETWEEN V_LOWER_DATE AND V_UPPER_DATE ) )&lt;br/&gt;  AND ID        = P_ID&lt;br/&gt;  AND FULFILLED =&lt;br/&gt;    ( SELECT ID FROM FLAG_STATUSES WHERE NAME = &apos;Y&apos;&lt;br/&gt;    );&lt;br/&gt;  IF V_COUNT  = 1 THEN&lt;br/&gt;    V_RESULT := &apos;Y&apos;;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_STAFF_FULFILLED_DETAILS;&lt;br/&gt;FUNCTION GET_DEPLOYABLE_RESOURCE_DET(&lt;br/&gt;    P_TEC_ID           IN INTEGER,&lt;br/&gt;    P_DES_ID           IN INTEGER,&lt;br/&gt;    P_AS_ON            IN VARCHAR2,&lt;br/&gt;    P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;    P_ID               IN INTEGER)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE DATE;&lt;br/&gt;  V_UPPER_DATE DATE;&lt;br/&gt;  V_COUNT      INTEGER;&lt;br/&gt;  V_RESULT     VARCHAR2(1) := &apos;N&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_LOOKAHEAD_MONTHS) - 1;&lt;br/&gt;  SELECT COUNT(                                                *)&lt;br/&gt;  INTO V_COUNT&lt;br/&gt;  FROM TECHNOLOGY_USERS A,&lt;br/&gt;    USERS C&lt;br/&gt;  WHERE NOT EXISTS&lt;br/&gt;    (SELECT 1&lt;br/&gt;    FROM PROJECT_USERS B&lt;br/&gt;    WHERE B.TEC_ID = P_TEC_ID&lt;br/&gt;    AND B.USE_ID   = A.USE_ID&lt;br/&gt;    AND B.DES_ID   = P_DES_ID&lt;br/&gt;    AND ( ( V_LOWER_DATE BETWEEN START_DATE AND END_DATE )&lt;br/&gt;    OR ( V_UPPER_DATE BETWEEN START_DATE AND END_DATE )&lt;br/&gt;    OR ( START_DATE BETWEEN V_LOWER_DATE AND V_UPPER_DATE )&lt;br/&gt;    OR ( END_DATE BETWEEN V_LOWER_DATE AND V_UPPER_DATE ) )&lt;br/&gt;    )&lt;br/&gt;  AND A.ID             = P_ID&lt;br/&gt;  AND C.ID             = A.USE_ID&lt;br/&gt;  AND A.TEC_ID         = P_TEC_ID&lt;br/&gt;  AND C.DES_ID         = P_DES_ID&lt;br/&gt;  AND A.EFFECTIVE_DATE =&lt;br/&gt;    (SELECT MAX(B.EFFECTIVE_DATE)&lt;br/&gt;    FROM TECHNOLOGY_USERS B&lt;br/&gt;    WHERE B.TEC_ID        = P_TEC_ID&lt;br/&gt;    AND B.USE_ID          = A.USE_ID&lt;br/&gt;    AND B.EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;    )&lt;br/&gt;  AND EXISTS&lt;br/&gt;    (SELECT 1&lt;br/&gt;    FROM USERS B&lt;br/&gt;    WHERE B.ID   = A.USE_ID&lt;br/&gt;    AND B.ACTIVE =&lt;br/&gt;      (SELECT C.ID FROM FLAG_STATUSES C WHERE UPPER(C.NAME) = &apos;Y&apos;&lt;br/&gt;      )&lt;br/&gt;    );&lt;br/&gt;  IF V_COUNT  = 1 THEN&lt;br/&gt;    V_RESULT := &apos;Y&apos;;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_DEPLOYABLE_RESOURCE_DET;&lt;br/&gt;FUNCTION GET_RESOURCE_ASSIGNED(&lt;br/&gt;    P_AS_ON            IN VARCHAR2,&lt;br/&gt;    P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;    P_USE_ID           IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE       DATE;&lt;br/&gt;  V_UPPER_DATE       DATE;&lt;br/&gt;  V_BUS_UNI_ID       INTEGER;&lt;br/&gt;  V_DATE             DATE;&lt;br/&gt;  V_ASSIGNABLE_HOURS NUMBER := 0;&lt;br/&gt;  V_HOURS_PER_DAY    NUMBER := 0;&lt;br/&gt;  V_ASSIGNED_HOURS   NUMBER := 0;&lt;br/&gt;  V_RESULT           NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_LOOKAHEAD_MONTHS) - 1;&lt;br/&gt;  SELECT BUS_UNI_ID INTO V_BUS_UNI_ID FROM USERS WHERE ID = P_USE_ID;&lt;br/&gt;  V_DATE := V_LOWER_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DATE &gt; V_UPPER_DATE;&lt;br/&gt;    IF IS_BUSINESS_DAY(V_DATE, V_BUS_UNI_ID) THEN&lt;br/&gt;      V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 8;&lt;br/&gt;      --       V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 24;&lt;br/&gt;      -- SELECT SUM(HOURS_PER_DAY) -- 8 TO 24&lt;br/&gt;      SELECT SUM(GET_NORMALIZED_HOURS(USE_ID, V_DATE, HOURS_PER_DAY))&lt;br/&gt;      INTO V_HOURS_PER_DAY&lt;br/&gt;      FROM PROJECT_USERS&lt;br/&gt;      WHERE USE_ID    = P_USE_ID&lt;br/&gt;      AND PRO_ID NOT IN&lt;br/&gt;        ( SELECT ID FROM PROJECTS WHERE PRO_TYP_ID = GET_DEFAULT_PROJECT_TYPE_ID&lt;br/&gt;        )&lt;br/&gt;      AND V_DATE BETWEEN START_DATE AND END_DATE;&lt;br/&gt;      V_ASSIGNED_HOURS := V_ASSIGNED_HOURS + NVL( V_HOURS_PER_DAY, 0);&lt;br/&gt;    END IF;&lt;br/&gt;    V_DATE := V_DATE + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_RESULT := (V_ASSIGNED_HOURS * 100) / V_ASSIGNABLE_HOURS ;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_RESOURCE_ASSIGNED;&lt;br/&gt;FUNCTION GET_RESOURCE_WORKED(&lt;br/&gt;    P_AS_ON            IN VARCHAR2,&lt;br/&gt;    P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;    P_USE_ID           IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE     DATE;&lt;br/&gt;  V_UPPER_DATE     DATE;&lt;br/&gt;  V_BUS_UNI_ID     INTEGER;&lt;br/&gt;  V_DATE           DATE;&lt;br/&gt;  V_ASSIGNED_HOURS NUMBER := 0;&lt;br/&gt;  V_HOURS_PER_DAY  NUMBER := 0;&lt;br/&gt;  V_WORKED_HOURS   NUMBER := 0;&lt;br/&gt;  V_RESULT         NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_LOOKAHEAD_MONTHS) - 1;&lt;br/&gt;  SELECT BUS_UNI_ID INTO V_BUS_UNI_ID FROM USERS WHERE ID = P_USE_ID;&lt;br/&gt;  V_DATE := V_LOWER_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DATE &gt; V_UPPER_DATE;&lt;br/&gt;    IF IS_BUSINESS_DAY(V_DATE, V_BUS_UNI_ID) THEN&lt;br/&gt;      --      SELECT SUM(HOURS_PER_DAY) -- 8 TO 24&lt;br/&gt;      SELECT SUM(GET_NORMALIZED_HOURS(USE_ID, V_DATE, HOURS_PER_DAY))&lt;br/&gt;      INTO V_HOURS_PER_DAY&lt;br/&gt;      FROM PROJECT_USERS&lt;br/&gt;      WHERE USE_ID    = P_USE_ID&lt;br/&gt;      AND PRO_ID NOT IN&lt;br/&gt;        ( SELECT ID FROM PROJECTS WHERE PRO_TYP_ID = GET_DEFAULT_PROJECT_TYPE_ID&lt;br/&gt;        )&lt;br/&gt;      AND V_DATE BETWEEN START_DATE AND END_DATE;&lt;br/&gt;      V_ASSIGNED_HOURS := V_ASSIGNED_HOURS + NVL( V_HOURS_PER_DAY, 0);&lt;br/&gt;      SELECT SUM(A.HOURS)&lt;br/&gt;      INTO V_HOURS_PER_DAY&lt;br/&gt;      FROM TIMESHEETS A,&lt;br/&gt;        PROJECT_USERS B&lt;br/&gt;      WHERE A.PRO_USE_ID = B.ID&lt;br/&gt;      AND B.USE_ID       = P_USE_ID&lt;br/&gt;      AND B.PRO_ID NOT  IN&lt;br/&gt;        ( SELECT ID FROM PROJECTS WHERE PRO_TYP_ID = GET_DEFAULT_PROJECT_TYPE_ID&lt;br/&gt;        )&lt;br/&gt;      AND A.FOR_DATE  = V_DATE;&lt;br/&gt;      V_WORKED_HOURS := V_WORKED_HOURS + NVL( V_HOURS_PER_DAY, 0);&lt;br/&gt;    END IF;&lt;br/&gt;    V_DATE := V_DATE + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_RESULT := (V_WORKED_HOURS * 100) / V_ASSIGNED_HOURS ;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_RESOURCE_WORKED;&lt;br/&gt;FUNCTION GET_BU_ASSIGNED(&lt;br/&gt;    P_AS_ON            IN VARCHAR2,&lt;br/&gt;    P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;    P_BUS_UNI_ID       IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE       DATE;&lt;br/&gt;  V_UPPER_DATE       DATE;&lt;br/&gt;  V_DATE             DATE;&lt;br/&gt;  V_ASSIGNABLE_HOURS NUMBER := 0;&lt;br/&gt;  V_HOURS_PER_DAY    NUMBER := 0;&lt;br/&gt;  V_ASSIGNED_HOURS   NUMBER := 0;&lt;br/&gt;  V_RESULT           NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_LOOKAHEAD_MONTHS) - 1;&lt;br/&gt;  FOR C1REC                                                   IN&lt;br/&gt;  ( SELECT * FROM USERS WHERE BUS_UNI_ID = P_BUS_UNI_ID&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_DATE := V_LOWER_DATE;&lt;br/&gt;    LOOP&lt;br/&gt;      EXIT&lt;br/&gt;    WHEN V_DATE &gt; V_UPPER_DATE;&lt;br/&gt;      IF IS_BUSINESS_DAY(V_DATE, P_BUS_UNI_ID) THEN&lt;br/&gt;        --        V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 8; -- 8 TO 24&lt;br/&gt;        V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 24;&lt;br/&gt;        --        SELECT SUM(HOURS_PER_DAY) -- 8 TO 24&lt;br/&gt;        SELECT SUM(GET_NORMALIZED_HOURS(USE_ID, V_DATE, HOURS_PER_DAY))&lt;br/&gt;        INTO V_HOURS_PER_DAY&lt;br/&gt;        FROM PROJECT_USERS&lt;br/&gt;        WHERE USE_ID = C1REC.ID&lt;br/&gt;        AND V_DATE BETWEEN START_DATE AND END_DATE;&lt;br/&gt;        V_ASSIGNED_HOURS := V_ASSIGNED_HOURS + NVL( V_HOURS_PER_DAY, 0);&lt;br/&gt;      END IF;&lt;br/&gt;      V_DATE := V_DATE + 1;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_RESULT := (V_ASSIGNED_HOURS * 100) / V_ASSIGNABLE_HOURS ;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_BU_ASSIGNED;&lt;br/&gt;FUNCTION GET_BU_WORKED(&lt;br/&gt;    P_AS_ON            IN VARCHAR2,&lt;br/&gt;    P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;    P_BUS_UNI_ID       IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE     DATE;&lt;br/&gt;  V_UPPER_DATE     DATE;&lt;br/&gt;  V_DATE           DATE;&lt;br/&gt;  V_ASSIGNED_HOURS NUMBER := 0;&lt;br/&gt;  V_HOURS_PER_DAY  NUMBER := 0;&lt;br/&gt;  V_WORKED_HOURS   NUMBER := 0;&lt;br/&gt;  V_RESULT         NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_LOOKAHEAD_MONTHS) - 1;&lt;br/&gt;  FOR C1REC                                                   IN&lt;br/&gt;  ( SELECT * FROM USERS WHERE BUS_UNI_ID = P_BUS_UNI_ID&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_DATE := V_LOWER_DATE;&lt;br/&gt;    LOOP&lt;br/&gt;      EXIT&lt;br/&gt;    WHEN V_DATE &gt; V_UPPER_DATE;&lt;br/&gt;      IF IS_BUSINESS_DAY(V_DATE, P_BUS_UNI_ID) THEN&lt;br/&gt;        --        SELECT SUM(HOURS_PER_DAY) -- 8 TO 24&lt;br/&gt;        SELECT SUM(GET_NORMALIZED_HOURS(USE_ID, V_DATE, HOURS_PER_DAY))&lt;br/&gt;        INTO V_HOURS_PER_DAY&lt;br/&gt;        FROM PROJECT_USERS&lt;br/&gt;        WHERE USE_ID = C1REC.ID&lt;br/&gt;        AND V_DATE BETWEEN START_DATE AND END_DATE;&lt;br/&gt;        V_ASSIGNED_HOURS := V_ASSIGNED_HOURS + NVL( V_HOURS_PER_DAY, 0);&lt;br/&gt;        SELECT SUM(A.HOURS)&lt;br/&gt;        INTO V_HOURS_PER_DAY&lt;br/&gt;        FROM TIMESHEETS A,&lt;br/&gt;          PROJECT_USERS B&lt;br/&gt;        WHERE A.PRO_USE_ID = B.ID&lt;br/&gt;        AND B.USE_ID       = C1REC.ID&lt;br/&gt;        AND A.FOR_DATE     = V_DATE;&lt;br/&gt;        V_WORKED_HOURS    := V_WORKED_HOURS + NVL( V_HOURS_PER_DAY, 0);&lt;br/&gt;      END IF;&lt;br/&gt;      V_DATE := V_DATE + 1;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_RESULT := (V_WORKED_HOURS * 100) / V_ASSIGNED_HOURS ;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_BU_WORKED;&lt;br/&gt;FUNCTION GET_RESOURCE_BILLING_DELTA(&lt;br/&gt;    P_AS_ON            IN VARCHAR2,&lt;br/&gt;    P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;    P_USE_ID           IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE       DATE;&lt;br/&gt;  V_UPPER_DATE       DATE;&lt;br/&gt;  V_BUS_UNI_ID       INTEGER;&lt;br/&gt;  V_DATE             DATE;&lt;br/&gt;  V_HOURS_PER_DAY    NUMBER;&lt;br/&gt;  V_ASSIGNABLE_HOURS NUMBER := 0;&lt;br/&gt;  V_WORKED_HOURS     NUMBER := 0;&lt;br/&gt;  V_BILLING_RATE     NUMBER;&lt;br/&gt;  V_RESULT           NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_LOOKAHEAD_MONTHS) - 1;&lt;br/&gt;  SELECT BUS_UNI_ID INTO V_BUS_UNI_ID FROM USERS WHERE ID = P_USE_ID;&lt;br/&gt;  V_DATE := V_LOWER_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DATE &gt; V_UPPER_DATE;&lt;br/&gt;    IF IS_BUSINESS_DAY(V_DATE, V_BUS_UNI_ID) THEN&lt;br/&gt;      --      V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 8; -- 8 TO 24&lt;br/&gt;      V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 24;&lt;br/&gt;      SELECT SUM(A.HOURS)&lt;br/&gt;      INTO V_HOURS_PER_DAY&lt;br/&gt;      FROM TIMESHEETS A,&lt;br/&gt;        PROJECT_USERS B&lt;br/&gt;      WHERE A.PRO_USE_ID = B.ID&lt;br/&gt;      AND B.USE_ID       = P_USE_ID&lt;br/&gt;      AND A.FOR_DATE     = V_DATE;&lt;br/&gt;      V_WORKED_HOURS    := V_WORKED_HOURS + NVL( V_HOURS_PER_DAY, 0);&lt;br/&gt;    END IF;&lt;br/&gt;    V_DATE := V_DATE + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_RESULT := (NVL(V_WORKED_HOURS, 0) - NVL( V_ASSIGNABLE_HOURS, 0)) * GET_USER_BILLING_RATE(P_USE_ID, P_AS_ON);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_RESOURCE_BILLING_DELTA;&lt;br/&gt;FUNCTION GET_BU_BILLING_DELTA(&lt;br/&gt;    P_AS_ON            IN VARCHAR2,&lt;br/&gt;    P_LOOKAHEAD_MONTHS IN INTEGER,&lt;br/&gt;    P_BUS_UNI_ID       IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE       DATE;&lt;br/&gt;  V_UPPER_DATE       DATE;&lt;br/&gt;  V_DATE             DATE;&lt;br/&gt;  V_ASSIGNABLE_HOURS NUMBER := 0;&lt;br/&gt;  V_HOURS_PER_DAY    NUMBER := 0;&lt;br/&gt;  V_WORKED_HOURS     NUMBER := 0;&lt;br/&gt;  V_BILLING_RATE     NUMBER;&lt;br/&gt;  V_RESULT           NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_LOOKAHEAD_MONTHS) - 1;&lt;br/&gt;  FOR C1REC                                                   IN&lt;br/&gt;  ( SELECT * FROM USERS WHERE BUS_UNI_ID = P_BUS_UNI_ID&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_ASSIGNABLE_HOURS := 0;&lt;br/&gt;    V_WORKED_HOURS     := 0;&lt;br/&gt;    V_DATE             := V_LOWER_DATE;&lt;br/&gt;    LOOP&lt;br/&gt;      EXIT&lt;br/&gt;    WHEN V_DATE &gt; V_UPPER_DATE;&lt;br/&gt;      IF IS_BUSINESS_DAY(V_DATE, P_BUS_UNI_ID) THEN&lt;br/&gt;        --        V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 8; -- 8 TO 24&lt;br/&gt;        V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 24;&lt;br/&gt;        SELECT SUM(A.HOURS)&lt;br/&gt;        INTO V_HOURS_PER_DAY&lt;br/&gt;        FROM TIMESHEETS A,&lt;br/&gt;          PROJECT_USERS B&lt;br/&gt;        WHERE A.PRO_USE_ID = B.ID&lt;br/&gt;        AND B.USE_ID       = C1REC.ID&lt;br/&gt;        AND A.FOR_DATE     = V_DATE;&lt;br/&gt;        V_WORKED_HOURS    := V_WORKED_HOURS + NVL( V_HOURS_PER_DAY, 0);&lt;br/&gt;      END IF;&lt;br/&gt;      V_DATE := V_DATE + 1;&lt;br/&gt;    END LOOP;&lt;br/&gt;    V_RESULT := V_RESULT + ((NVL(V_WORKED_HOURS, 0) - NVL( V_ASSIGNABLE_HOURS, 0)) * GET_USER_BILLING_RATE( C1REC.ID, P_AS_ON));&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_BU_BILLING_DELTA;&lt;br/&gt;FUNCTION GET_OVERDUE_DELIVERY_COUNT(&lt;br/&gt;    P_PRO_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN VARCHAR2)&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT COUNT(*)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM DELIVERY_MILESTONES&lt;br/&gt;  WHERE PRO_ID                = P_PRO_ID&lt;br/&gt;  AND P_AS_ON                 &gt; DUE_DATE&lt;br/&gt;  AND ACTUAL_COMPLETION_DATE IS NULL;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_OVERDUE_DELIVERY_COUNT;&lt;br/&gt;FUNCTION GET_OVERDUE_INVOICING_COUNT(&lt;br/&gt;    P_PRO_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN VARCHAR2)&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT COUNT(*)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM INVOICING_MILESTONES&lt;br/&gt;  WHERE PRO_ID                = P_PRO_ID&lt;br/&gt;  AND P_AS_ON                 &gt; DUE_DATE&lt;br/&gt;  AND ACTUAL_COMPLETION_DATE IS NULL;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_OVERDUE_INVOICING_COUNT;&lt;br/&gt;FUNCTION GET_OVERDUE_PAYMENT_COUNT(&lt;br/&gt;    P_PRO_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN VARCHAR2)&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT COUNT(*)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM INVOICING_MILESTONES A&lt;br/&gt;  WHERE A.PRO_ID                = P_PRO_ID&lt;br/&gt;  AND P_AS_ON                   &gt; DUE_DATE + GET_DEFAULT_INVOICE_TERMS&lt;br/&gt;  AND A.ACTUAL_COMPLETION_DATE IS NULL&lt;br/&gt;  AND NOT EXISTS&lt;br/&gt;    (SELECT 1&lt;br/&gt;    FROM PAYMENT_DETAILS B,&lt;br/&gt;      INVOICE_DETAILS C&lt;br/&gt;    WHERE C.INV_HEA_ID = B.INV_HEA_ID&lt;br/&gt;    AND C.INV_MIL_ID   = A.ID&lt;br/&gt;    );&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_OVERDUE_PAYMENT_COUNT;&lt;br/&gt;FUNCTION GET_DELIVERY_HEALTH(&lt;br/&gt;    P_PRO_ID                  IN INTEGER,&lt;br/&gt;    P_AS_ON                   IN VARCHAR2,&lt;br/&gt;    P_OVERDUE_DELIVERY_COUNT  IN INTEGER DEFAULT NULL,&lt;br/&gt;    P_OVERDUE_INVOICING_COUNT IN INTEGER DEFAULT NULL,&lt;br/&gt;    P_OVERDUE_PAYMENT_COUNT   IN INTEGER DEFAULT NULL,&lt;br/&gt;    P_PROFIT                  IN NUMBER DEFAULT NULL)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_OVERDUE_DELIVERY_COUNT  INTEGER;&lt;br/&gt;  V_OVERDUE_INVOICING_COUNT INTEGER;&lt;br/&gt;  V_OVERDUE_PAYMENT_COUNT   INTEGER;&lt;br/&gt;  V_PROFIT                  NUMBER;&lt;br/&gt;  V_RESULT                  VARCHAR2(400) := &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:LIME; FONT-WEIGHT:BOLD;&quot;&gt;GREEN&lt;/DIV&gt;&apos; ;&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_OVERDUE_DELIVERY_COUNT IS NULL THEN&lt;br/&gt;    V_OVERDUE_DELIVERY_COUNT  := GET_OVERDUE_DELIVERY_COUNT (P_PRO_ID, P_AS_ON);&lt;br/&gt;  END IF;&lt;br/&gt;  IF P_OVERDUE_INVOICING_COUNT IS NULL THEN&lt;br/&gt;    V_OVERDUE_INVOICING_COUNT  := GET_OVERDUE_INVOICING_COUNT(P_PRO_ID, P_AS_ON);&lt;br/&gt;  END IF;&lt;br/&gt;  IF P_OVERDUE_PAYMENT_COUNT IS NULL THEN&lt;br/&gt;    V_OVERDUE_PAYMENT_COUNT  := GET_OVERDUE_PAYMENT_COUNT( P_PRO_ID, P_AS_ON);&lt;br/&gt;  END IF;&lt;br/&gt;  IF P_PROFIT IS NULL THEN&lt;br/&gt;    V_PROFIT  := GET_PROJECT_INVOICED_AMOUNT(P_PRO_ID, P_AS_ON, &apos;N&apos;) - GET_PROJECT_DIRECT_COST(P_PRO_ID, P_AS_ON, &apos;N&apos;);&lt;br/&gt;  END IF;&lt;br/&gt;  IF P_PROFIT &lt; 0 THEN&lt;br/&gt;    V_RESULT := &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:RED; FONT-WEIGHT:BOLD;&quot;&gt;RED&lt;/DIV&gt;&apos; ;&lt;br/&gt;  ELSE&lt;br/&gt;    IF P_OVERDUE_DELIVERY_COUNT     &gt; 0 AND P_OVERDUE_INVOICING_COUNT &gt; 0 AND P_OVERDUE_PAYMENT_COUNT &gt; 0 THEN&lt;br/&gt;      V_RESULT                     := &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:ORANGE; FONT-WEIGHT:BOLD;&quot;&gt;ORANGE&lt;/DIV&gt;&apos; ;&lt;br/&gt;    ELSIF (P_OVERDUE_DELIVERY_COUNT &gt; 0 AND P_OVERDUE_INVOICING_COUNT &gt; 0) OR ( P_OVERDUE_INVOICING_COUNT &gt; 0 AND P_OVERDUE_PAYMENT_COUNT &gt; 0 ) OR ( P_OVERDUE_DELIVERY_COUNT &gt; 0 AND P_OVERDUE_PAYMENT_COUNT &gt; 0 ) THEN&lt;br/&gt;      V_RESULT                     := &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:ORANGE; FONT-WEIGHT:BOLD;&quot;&gt;ORANGE&lt;/DIV&gt;&apos; ;&lt;br/&gt;    ELSIF P_OVERDUE_DELIVERY_COUNT  &gt; 0 OR P_OVERDUE_INVOICING_COUNT &gt; 0 OR P_OVERDUE_DELIVERY_COUNT &gt; 0 THEN&lt;br/&gt;      V_RESULT                     := &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:YELLOW; FONT-WEIGHT:BOLD;&quot;&gt;YELLOW&lt;/DIV&gt;&apos; ;&lt;br/&gt;    END IF;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_DELIVERY_HEALTH;&lt;br/&gt;FUNCTION GET_OVERDUE_INVOICING_AMOUNT(&lt;br/&gt;    P_PRO_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN VARCHAR2)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT SUM(AMOUNT)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM INVOICING_MILESTONES&lt;br/&gt;  WHERE PRO_ID                = P_PRO_ID&lt;br/&gt;  AND P_AS_ON                 &gt; DUE_DATE&lt;br/&gt;  AND ACTUAL_COMPLETION_DATE IS NULL;&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;END GET_OVERDUE_INVOICING_AMOUNT;&lt;br/&gt;FUNCTION GET_OVERDUE_PAYMENT_AMOUNT(&lt;br/&gt;    P_PRO_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN VARCHAR2)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT SUM(AMOUNT)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM INVOICING_MILESTONES A&lt;br/&gt;  WHERE A.PRO_ID                = P_PRO_ID&lt;br/&gt;  AND P_AS_ON                   &gt; DUE_DATE + GET_DEFAULT_INVOICE_TERMS&lt;br/&gt;  AND A.ACTUAL_COMPLETION_DATE IS NULL&lt;br/&gt;  AND NOT EXISTS&lt;br/&gt;    (SELECT 1&lt;br/&gt;    FROM PAYMENT_DETAILS B,&lt;br/&gt;      INVOICE_DETAILS C&lt;br/&gt;    WHERE C.INV_HEA_ID = B.INV_HEA_ID&lt;br/&gt;    AND C.INV_MIL_ID   = A.ID&lt;br/&gt;    );&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;END GET_OVERDUE_PAYMENT_AMOUNT;&lt;br/&gt;FUNCTION GET_FULL_CLOCKING_DAYS(&lt;br/&gt;    P_USE_ID    IN INTEGER,&lt;br/&gt;    P_DATE_FROM IN DATE,&lt;br/&gt;    P_DATE_TO   IN DATE)&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE    DATE;&lt;br/&gt;  V_UPPER_DATE    DATE;&lt;br/&gt;  V_DATE          DATE;&lt;br/&gt;  V_CLOCKED_HOURS NUMBER;&lt;br/&gt;  V_RESULT        INTEGER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT GREATEST(JOINING_DATE, P_DATE_FROM),&lt;br/&gt;    NVL(LEAVING_DATE, P_DATE_TO)&lt;br/&gt;  INTO V_LOWER_DATE,&lt;br/&gt;    V_UPPER_DATE&lt;br/&gt;  FROM USERS&lt;br/&gt;  WHERE ID = P_USE_ID;&lt;br/&gt;  V_DATE  := V_LOWER_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DATE &gt; V_UPPER_DATE;&lt;br/&gt;    SELECT SUM(HOURS)&lt;br/&gt;    INTO V_CLOCKED_HOURS&lt;br/&gt;    FROM TIMESHEETS&lt;br/&gt;    WHERE FOR_DATE  = V_DATE&lt;br/&gt;    AND PRO_USE_ID IN&lt;br/&gt;      ( SELECT ID FROM PROJECT_USERS WHERE USE_ID = P_USE_ID&lt;br/&gt;      );&lt;br/&gt;    IF NVL(V_CLOCKED_HOURS, 0) &gt;= 8 THEN&lt;br/&gt;      V_RESULT                 := V_RESULT + 1;&lt;br/&gt;    END IF;&lt;br/&gt;    V_DATE := V_DATE + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_FULL_CLOCKING_DAYS;&lt;br/&gt;FUNCTION GET_PARTIAL_CLOCKING_DAYS(&lt;br/&gt;    P_USE_ID    IN INTEGER,&lt;br/&gt;    P_DATE_FROM IN DATE,&lt;br/&gt;    P_DATE_TO   IN DATE)&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE    DATE;&lt;br/&gt;  V_UPPER_DATE    DATE;&lt;br/&gt;  V_DATE          DATE;&lt;br/&gt;  V_CLOCKED_HOURS NUMBER;&lt;br/&gt;  V_RESULT        INTEGER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT GREATEST(JOINING_DATE, P_DATE_FROM),&lt;br/&gt;    NVL(LEAVING_DATE, P_DATE_TO)&lt;br/&gt;  INTO V_LOWER_DATE,&lt;br/&gt;    V_UPPER_DATE&lt;br/&gt;  FROM USERS&lt;br/&gt;  WHERE ID = P_USE_ID;&lt;br/&gt;  V_DATE  := V_LOWER_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DATE &gt; V_UPPER_DATE;&lt;br/&gt;    SELECT SUM(HOURS)&lt;br/&gt;    INTO V_CLOCKED_HOURS&lt;br/&gt;    FROM TIMESHEETS&lt;br/&gt;    WHERE FOR_DATE  = V_DATE&lt;br/&gt;    AND PRO_USE_ID IN&lt;br/&gt;      ( SELECT ID FROM PROJECT_USERS WHERE USE_ID = P_USE_ID&lt;br/&gt;      );&lt;br/&gt;    IF NVL(V_CLOCKED_HOURS, 0) &lt; 8 AND NVL(V_CLOCKED_HOURS, 0) &gt; 0 THEN&lt;br/&gt;      V_RESULT                := V_RESULT + 1;&lt;br/&gt;    END IF;&lt;br/&gt;    V_DATE := V_DATE + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_PARTIAL_CLOCKING_DAYS;&lt;br/&gt;FUNCTION IS_FULL_CLOCKING_DAY(&lt;br/&gt;    P_USE_ID   IN INTEGER,&lt;br/&gt;    P_FOR_DATE IN DATE)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_CLOCKED_HOURS NUMBER;&lt;br/&gt;  V_RESULT        VARCHAR2(1) := &apos;N&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT SUM(A.HOURS)&lt;br/&gt;  INTO V_CLOCKED_HOURS&lt;br/&gt;  FROM TIMESHEETS A,&lt;br/&gt;    PROJECT_USERS B&lt;br/&gt;  WHERE B.ID          = A.PRO_USE_ID&lt;br/&gt;  AND B.USE_ID        = P_USE_ID&lt;br/&gt;  AND A.FOR_DATE      = P_FOR_DATE;&lt;br/&gt;  IF V_CLOCKED_HOURS &gt;= 8 THEN&lt;br/&gt;    V_RESULT         := &apos;Y&apos;;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END IS_FULL_CLOCKING_DAY;&lt;br/&gt;FUNCTION IS_PARTIAL_CLOCKING_DAY(&lt;br/&gt;    P_USE_ID   IN INTEGER,&lt;br/&gt;    P_FOR_DATE IN DATE)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_CLOCKED_HOURS NUMBER;&lt;br/&gt;  V_RESULT        VARCHAR2(1) := &apos;N&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT SUM(A.HOURS)&lt;br/&gt;  INTO V_CLOCKED_HOURS&lt;br/&gt;  FROM TIMESHEETS A,&lt;br/&gt;    PROJECT_USERS B&lt;br/&gt;  WHERE B.ID         = A.PRO_USE_ID&lt;br/&gt;  AND B.USE_ID       = P_USE_ID&lt;br/&gt;  AND A.FOR_DATE     = P_FOR_DATE;&lt;br/&gt;  IF V_CLOCKED_HOURS &lt; 8 AND V_CLOCKED_HOURS &gt; 0 THEN&lt;br/&gt;    V_RESULT        := &apos;Y&apos;;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END IS_PARTIAL_CLOCKING_DAY;&lt;br/&gt;FUNCTION IS_MISSED_CLOCKING_DAY(&lt;br/&gt;    P_USE_ID   IN INTEGER,&lt;br/&gt;    P_FOR_DATE IN DATE)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_CLOCKED_HOURS NUMBER;&lt;br/&gt;  V_RESULT        VARCHAR2(1) := &apos;N&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT SUM(A.HOURS)&lt;br/&gt;  INTO V_CLOCKED_HOURS&lt;br/&gt;  FROM TIMESHEETS A,&lt;br/&gt;    PROJECT_USERS B&lt;br/&gt;  WHERE B.ID                 = A.PRO_USE_ID&lt;br/&gt;  AND B.USE_ID               = P_USE_ID&lt;br/&gt;  AND A.FOR_DATE             = P_FOR_DATE;&lt;br/&gt;  IF NVL(V_CLOCKED_HOURS, 0) = 0 THEN&lt;br/&gt;    V_RESULT                := &apos;Y&apos;;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END IS_MISSED_CLOCKING_DAY;&lt;br/&gt;FUNCTION GET_TOTAL_PAYMENTS(&lt;br/&gt;    P_AS_ON  IN VARCHAR2,&lt;br/&gt;    P_MONTHS IN INTEGER DEFAULT 1)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT SUM(AMOUNT)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM PAYMENT_HEADERS&lt;br/&gt;  WHERE PAYMENT_DATE BETWEEN TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos; ) AND ADD_MONTHS(TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;), P_MONTHS) - 1;&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;END GET_TOTAL_PAYMENTS;&lt;br/&gt;FUNCTION INVOICING_MILESTONE_FILTER(&lt;br/&gt;    P_INV_HEA_ID IN INTEGER,&lt;br/&gt;    P_INV_MIL_ID IN INTEGER)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_INV_HEA_PRO_ID INTEGER;&lt;br/&gt;  V_INV_MIL_PRO_ID INTEGER;&lt;br/&gt;  V_RESULT         VARCHAR2(1) := &apos;N&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT DISTINCT PRO_ID&lt;br/&gt;  INTO V_INV_HEA_PRO_ID&lt;br/&gt;  FROM INVOICING_MILESTONES&lt;br/&gt;  WHERE ID IN&lt;br/&gt;    ( SELECT INV_MIL_ID FROM INVOICE_DETAILS WHERE INV_HEA_ID = P_INV_HEA_ID&lt;br/&gt;    );&lt;br/&gt;  SELECT PRO_ID&lt;br/&gt;  INTO V_INV_MIL_PRO_ID&lt;br/&gt;  FROM INVOICING_MILESTONES&lt;br/&gt;  WHERE ID            = P_INV_MIL_ID;&lt;br/&gt;  IF V_INV_HEA_PRO_ID = V_INV_MIL_PRO_ID THEN&lt;br/&gt;    V_RESULT         := &apos;Y&apos;;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN NO_DATA_FOUND THEN&lt;br/&gt;  V_RESULT := &apos;Y&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END INVOICING_MILESTONE_FILTER;&lt;br/&gt;FUNCTION GET_TOTAL_COSTS(&lt;br/&gt;    P_AS_ON  IN VARCHAR2,&lt;br/&gt;    P_MONTHS IN INTEGER DEFAULT 1)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE   DATE;&lt;br/&gt;  V_UPPER_DATE   DATE;&lt;br/&gt;  V_ACTIVE_YES   INTEGER;&lt;br/&gt;  V_DATE         DATE;&lt;br/&gt;  V_ADDER_AMOUNT NUMBER;&lt;br/&gt;  V_RESULT       NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  ( SELECT * FROM USERS&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_RESULT := V_RESULT + (GET_RESOURCE_HOURS(C1REC.ID, P_AS_ON, P_MONTHS) * GET_RESOURCE_AVG_COST_RATE( C1REC.ID, P_AS_ON, P_MONTHS));&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_MONTHS) - 1;&lt;br/&gt;  SELECT SUM(AMOUNT)&lt;br/&gt;  INTO V_ADDER_AMOUNT&lt;br/&gt;  FROM COST_ADDER_AMOUNTS&lt;br/&gt;  WHERE AMOUNT_DATE BETWEEN V_LOWER_DATE AND V_UPPER_DATE;&lt;br/&gt;  V_RESULT := V_RESULT + NVL(V_ADDER_AMOUNT, 0);&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;END GET_TOTAL_COSTS;&lt;br/&gt;FUNCTION GET_RESOURCE_NAME(&lt;br/&gt;    P_USE_ID IN INTEGER)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_RESULT VARCHAR2(400) := NULL;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT INITCAP(FIRST_NAME)&lt;br/&gt;    || DECODE(MIDDLE_NAME, NULL, &apos; &apos;, &apos; &apos;&lt;br/&gt;    || MIDDLE_NAME&lt;br/&gt;    || &apos; &apos;)&lt;br/&gt;    || INITCAP(LAST_NAME)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM USERS&lt;br/&gt;  WHERE ID = P_USE_ID;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_RESOURCE_NAME;&lt;br/&gt;FUNCTION GET_RESOURCE_HOURS(&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN VARCHAR2,&lt;br/&gt;    P_MONTHS INTEGER DEFAULT 1)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_JOINING_DATE DATE;&lt;br/&gt;  V_LEAVING_DATE DATE;&lt;br/&gt;  V_LOWER_DATE   DATE;&lt;br/&gt;  V_UPPER_DATE   DATE;&lt;br/&gt;  V_DATE         DATE;&lt;br/&gt;  V_RESULT       NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(&apos;01-&apos; || P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_MONTHS) - 1;&lt;br/&gt;  SELECT JOINING_DATE,&lt;br/&gt;    LEAVING_DATE&lt;br/&gt;  INTO V_JOINING_DATE,&lt;br/&gt;    V_LEAVING_DATE&lt;br/&gt;  FROM USERS&lt;br/&gt;  WHERE ID = P_USE_ID;&lt;br/&gt;  V_DATE  := V_LOWER_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DATE                                                                     &gt; V_UPPER_DATE;&lt;br/&gt;    IF V_DATE                                                                    &gt;= V_JOINING_DATE THEN&lt;br/&gt;      IF V_LEAVING_DATE                                                          IS NULL THEN&lt;br/&gt;        IF V_DATE                                                                            - TO_DATE(GET_FIRST_OF_SPECIFIED_MONTH( V_DATE), &apos;DD-MON-YYYY&apos;) &lt; 21 THEN&lt;br/&gt;          V_RESULT                                                               := V_RESULT + 8;&lt;br/&gt;        END IF;&lt;br/&gt;      ELSE&lt;br/&gt;        IF V_DATE                                                                  &lt;= V_LEAVING_DATE THEN&lt;br/&gt;          IF V_DATE                                                                            - TO_DATE(GET_FIRST_OF_SPECIFIED_MONTH( V_DATE), &apos;DD-MON-YYYY&apos;) &lt; 21 THEN&lt;br/&gt;            V_RESULT                                                               := V_RESULT + 8;&lt;br/&gt;          END IF;&lt;br/&gt;        END IF;&lt;br/&gt;      END IF;&lt;br/&gt;    END IF;&lt;br/&gt;    V_DATE := V_DATE + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN GREATEST(V_RESULT, 0);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_RESOURCE_HOURS;&lt;br/&gt;FUNCTION GET_RESOURCE_AVG_COST_RATE(&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN VARCHAR2,&lt;br/&gt;    P_MONTHS INTEGER DEFAULT 1)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE DATE;&lt;br/&gt;  V_UPPER_DATE DATE;&lt;br/&gt;  V_ACTIVE_YES INTEGER;&lt;br/&gt;  V_DATE       DATE;&lt;br/&gt;  V_DAYS       INTEGER := 0;&lt;br/&gt;  V_RESULT     NUMBER  := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(&apos;01-&apos; || P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := ADD_MONTHS(V_LOWER_DATE, P_MONTHS);&lt;br/&gt;  SELECT ID INTO V_ACTIVE_YES FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;Y&apos;;&lt;br/&gt;  V_DATE := V_LOWER_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DATE = V_UPPER_DATE;&lt;br/&gt;    V_RESULT := V_RESULT + GET_USER_COST_RATE(P_USE_ID, V_DATE);&lt;br/&gt;    V_DAYS   := V_DAYS   + 1;&lt;br/&gt;    V_DATE   := V_DATE   + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_RESULT := V_RESULT / V_DAYS;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_RESOURCE_AVG_COST_RATE;&lt;br/&gt;FUNCTION GET_BUSINESS_UNIT_NAME(&lt;br/&gt;    P_BUS_UNI_ID IN INTEGER)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_RESULT VARCHAR2(400) := NULL;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT NAME INTO V_RESULT FROM BUSINESS_UNITS WHERE ID = P_BUS_UNI_ID;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_BUSINESS_UNIT_NAME;&lt;br/&gt;FUNCTION GET_RESOURCE_ASSIGNED_LIMITED(&lt;br/&gt;    P_AS_ON  IN VARCHAR2,&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_DAYS   IN INTEGER DEFAULT 6)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE       DATE;&lt;br/&gt;  V_UPPER_DATE       DATE;&lt;br/&gt;  V_BUS_UNI_ID       INTEGER;&lt;br/&gt;  V_DATE             DATE;&lt;br/&gt;  V_ASSIGNABLE_HOURS NUMBER := 0;&lt;br/&gt;  V_HOURS_PER_DAY    NUMBER := 0;&lt;br/&gt;  V_ASSIGNED_HOURS   NUMBER := 0;&lt;br/&gt;  V_RESULT           NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := V_LOWER_DATE + P_DAYS;&lt;br/&gt;  SELECT BUS_UNI_ID INTO V_BUS_UNI_ID FROM USERS WHERE ID = P_USE_ID;&lt;br/&gt;  V_DATE := V_LOWER_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DATE &gt; V_UPPER_DATE;&lt;br/&gt;    IF IS_BUSINESS_DAY(V_DATE, V_BUS_UNI_ID) THEN&lt;br/&gt;      V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 8; -- 8 TO 24&lt;br/&gt;      --      V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 24;&lt;br/&gt;      SELECT SUM(HOURS_PER_DAY) -- 8 TO 24&lt;br/&gt;        --      SELECT SUM(GET_NORMALIZED_HOURS(USE_ID, V_DATE, HOURS_PER_DAY))&lt;br/&gt;      INTO V_HOURS_PER_DAY&lt;br/&gt;      FROM PROJECT_USERS&lt;br/&gt;      WHERE USE_ID    = P_USE_ID&lt;br/&gt;      AND PRO_ID NOT IN&lt;br/&gt;        ( SELECT ID FROM PROJECTS WHERE PRO_TYP_ID = GET_DEFAULT_PROJECT_TYPE_ID&lt;br/&gt;        )&lt;br/&gt;      AND V_DATE BETWEEN START_DATE AND END_DATE;&lt;br/&gt;      V_ASSIGNED_HOURS := V_ASSIGNED_HOURS + NVL( V_HOURS_PER_DAY, 0);&lt;br/&gt;    END IF;&lt;br/&gt;    V_DATE := V_DATE + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_RESULT := (V_ASSIGNED_HOURS * 100) / V_ASSIGNABLE_HOURS ;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_RESOURCE_ASSIGNED_LIMITED;&lt;br/&gt;FUNCTION GET_RESOURCE_WORKED_LIMITED(&lt;br/&gt;    P_AS_ON  IN VARCHAR2,&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_DAYS   IN INTEGER DEFAULT 6)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE     DATE;&lt;br/&gt;  V_UPPER_DATE     DATE;&lt;br/&gt;  V_BUS_UNI_ID     INTEGER;&lt;br/&gt;  V_DATE           DATE;&lt;br/&gt;  V_ASSIGNED_HOURS NUMBER := 0;&lt;br/&gt;  V_HOURS_PER_DAY  NUMBER := 0;&lt;br/&gt;  V_WORKED_HOURS   NUMBER := 0;&lt;br/&gt;  V_RESULT         NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_UPPER_DATE := V_LOWER_DATE + P_DAYS;&lt;br/&gt;  SELECT BUS_UNI_ID INTO V_BUS_UNI_ID FROM USERS WHERE ID = P_USE_ID;&lt;br/&gt;  V_DATE := V_LOWER_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DATE &gt; V_UPPER_DATE;&lt;br/&gt;    IF IS_BUSINESS_DAY(V_DATE, V_BUS_UNI_ID) THEN&lt;br/&gt;      --      SELECT SUM(HOURS_PER_DAY) -- 8 TO 24&lt;br/&gt;      SELECT SUM(GET_NORMALIZED_HOURS(USE_ID, V_DATE, HOURS_PER_DAY))&lt;br/&gt;      INTO V_HOURS_PER_DAY&lt;br/&gt;      FROM PROJECT_USERS&lt;br/&gt;      WHERE USE_ID    = P_USE_ID&lt;br/&gt;      AND PRO_ID NOT IN&lt;br/&gt;        ( SELECT ID FROM PROJECTS WHERE PRO_TYP_ID = GET_DEFAULT_PROJECT_TYPE_ID&lt;br/&gt;        )&lt;br/&gt;      AND V_DATE BETWEEN START_DATE AND END_DATE;&lt;br/&gt;      V_ASSIGNED_HOURS := V_ASSIGNED_HOURS + NVL( V_HOURS_PER_DAY, 0);&lt;br/&gt;      SELECT SUM(A.HOURS)&lt;br/&gt;      INTO V_HOURS_PER_DAY&lt;br/&gt;      FROM TIMESHEETS A,&lt;br/&gt;        PROJECT_USERS B&lt;br/&gt;      WHERE A.PRO_USE_ID = B.ID&lt;br/&gt;      AND B.USE_ID       = P_USE_ID&lt;br/&gt;      AND B.PRO_ID NOT  IN&lt;br/&gt;        ( SELECT ID FROM PROJECTS WHERE PRO_TYP_ID = GET_DEFAULT_PROJECT_TYPE_ID&lt;br/&gt;        )&lt;br/&gt;      AND A.FOR_DATE  = V_DATE;&lt;br/&gt;      V_WORKED_HOURS := V_WORKED_HOURS + NVL( V_HOURS_PER_DAY, 0);&lt;br/&gt;    END IF;&lt;br/&gt;    V_DATE := V_DATE + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_RESULT := (V_WORKED_HOURS * 100) / V_ASSIGNED_HOURS ;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_RESOURCE_WORKED_LIMITED;&lt;br/&gt;FUNCTION GET_RESOURCE_BILLING_DELTA(&lt;br/&gt;    P_AS_ON  IN VARCHAR2,&lt;br/&gt;    P_USE_ID IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE       DATE;&lt;br/&gt;  V_UPPER_DATE       DATE;&lt;br/&gt;  V_BUS_UNI_ID       INTEGER;&lt;br/&gt;  V_DATE             DATE;&lt;br/&gt;  V_HOURS_PER_DAY    NUMBER;&lt;br/&gt;  V_ASSIGNABLE_HOURS NUMBER := 0;&lt;br/&gt;  V_WORKED_HOURS     NUMBER := 0;&lt;br/&gt;  V_BILLING_RATE     NUMBER;&lt;br/&gt;  V_RESULT           NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;) - 21;&lt;br/&gt;  V_UPPER_DATE := V_LOWER_DATE                    + 63;&lt;br/&gt;  SELECT BUS_UNI_ID INTO V_BUS_UNI_ID FROM USERS WHERE ID = P_USE_ID;&lt;br/&gt;  V_DATE := V_LOWER_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DATE &gt; V_UPPER_DATE;&lt;br/&gt;    IF IS_BUSINESS_DAY(V_DATE, V_BUS_UNI_ID) THEN&lt;br/&gt;      --      V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 8; -- 8 TO 24&lt;br/&gt;      V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 24;&lt;br/&gt;      SELECT SUM(A.HOURS)&lt;br/&gt;      INTO V_HOURS_PER_DAY&lt;br/&gt;      FROM TIMESHEETS A,&lt;br/&gt;        PROJECT_USERS B&lt;br/&gt;      WHERE A.PRO_USE_ID = B.ID&lt;br/&gt;      AND B.USE_ID       = P_USE_ID&lt;br/&gt;      AND A.FOR_DATE     = V_DATE;&lt;br/&gt;      V_WORKED_HOURS    := V_WORKED_HOURS + NVL( V_HOURS_PER_DAY, 0);&lt;br/&gt;    END IF;&lt;br/&gt;    V_DATE := V_DATE + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_RESULT := (NVL(V_WORKED_HOURS, 0) - NVL( V_ASSIGNABLE_HOURS, 0)) * GET_USER_BILLING_RATE(P_USE_ID, P_AS_ON);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_RESOURCE_BILLING_DELTA;&lt;br/&gt;FUNCTION GET_MONDAY_OF_WEEK(&lt;br/&gt;    P_DATE IN VARCHAR2)&lt;br/&gt;  RETURN DATE&lt;br/&gt;AS&lt;br/&gt;  V_DATE   DATE;&lt;br/&gt;  V_RESULT DATE := NULL;&lt;br/&gt;BEGIN&lt;br/&gt;  V_DATE                    := TO_DATE(P_DATE, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  IF TO_CHAR(V_DATE, &apos;D&apos;)    &lt; 2 THEN&lt;br/&gt;    V_RESULT                := V_DATE + 1;&lt;br/&gt;  ELSIF TO_CHAR(V_DATE, &apos;D&apos;) = 2 THEN&lt;br/&gt;    V_RESULT                := V_DATE;&lt;br/&gt;  ELSE&lt;br/&gt;    V_RESULT := V_DATE - (TO_CHAR(V_DATE, &apos;D&apos;) - 2);&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_MONDAY_OF_WEEK;&lt;br/&gt;FUNCTION GET_CAPACITY_COLOR_CODE(&lt;br/&gt;    P_AS_ON  IN VARCHAR2,&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_DAYS   IN INTEGER DEFAULT 6)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_CAPACITY       NUMBER        := 0;&lt;br/&gt;  V_CAPACITY_HOURS NUMBER        := 0;&lt;br/&gt;  V_RESULT         VARCHAR2(400) := &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:#132752; FONT-WEIGHT:BOLD;&quot;&gt;;&lt;/DIV&gt;&apos; ;&lt;br/&gt;BEGIN&lt;br/&gt;  V_CAPACITY := 100       - GET_RESOURCE_ASSIGNED_LIMITED(P_AS_ON , P_USE_ID, P_DAYS);&lt;br/&gt;  SELECT ROUND(V_CAPACITY * DECODE(P_DAYS, 1, 8, 40) / 100, 0)&lt;br/&gt;  INTO V_CAPACITY_HOURS&lt;br/&gt;  FROM DUAL;&lt;br/&gt;  IF V_CAPACITY    &gt;= 100 THEN&lt;br/&gt;    V_RESULT       := &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:#FFFFFF; FONT-WEIGHT:LIGHT;&quot;&gt;&apos; || V_CAPACITY_HOURS || &apos; hrs&lt;/DIV&gt;&apos;;&lt;br/&gt;  ELSIF V_CAPACITY &gt;= 75 AND V_CAPACITY &lt; 100 THEN&lt;br/&gt;    V_RESULT       := &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:LIME; FONT-WEIGHT:BOLD;&quot;&gt;&apos; || V_CAPACITY_HOURS || &apos; hrs&lt;/DIV&gt;&apos;;&lt;br/&gt;  ELSIF V_CAPACITY &gt;= 50 AND V_CAPACITY &lt; 75 THEN&lt;br/&gt;    V_RESULT       := &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:YELLOW; FONT-WEIGHT:BOLD;&quot;&gt;&apos; || V_CAPACITY_HOURS || &apos; hrs&lt;/DIV&gt;&apos;;&lt;br/&gt;  ELSIF V_CAPACITY &gt;= 25 AND V_CAPACITY &lt; 50 THEN&lt;br/&gt;    V_RESULT       := &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:ORANGE; FONT-WEIGHT:BOLD;&quot;&gt;&apos; || V_CAPACITY_HOURS || &apos; hrs&lt;/DIV&gt;&apos;;&lt;br/&gt;  ELSIF V_CAPACITY  &gt; 0 AND V_CAPACITY &lt; 25 THEN&lt;br/&gt;    V_RESULT       := &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:RED; FONT-WEIGHT:BOLD;&quot;&gt;&apos; || V_CAPACITY_HOURS || &apos; hrs&lt;/DIV&gt;&apos;;&lt;br/&gt;  ELSIF V_CAPACITY &lt;= 0 THEN&lt;br/&gt;    V_RESULT       := &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:#132752; FONT-WEIGHT:LIGHT; COLOR:#000000;&quot;&gt;&apos; || V_CAPACITY_HOURS || &apos; hrs&lt;/DIV&gt;&apos;;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_CAPACITY_COLOR_CODE;&lt;br/&gt;FUNCTION GET_PROJECT_NAME(&lt;br/&gt;    P_PRO_ID IN INTEGER)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_RESULT VARCHAR2(400) := NULL;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT PROJECT_NAME&lt;br/&gt;    || &apos; [&apos;&lt;br/&gt;    || TO_CHAR(START_DATE, &apos;dd-Mon-yyyy&apos;)&lt;br/&gt;    || &apos; to &apos;&lt;br/&gt;    || TO_CHAR(END_DATE, &apos;dd-Mon-yyyy&apos;)&lt;br/&gt;    || &apos;]&apos;&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM PROJECTS&lt;br/&gt;  WHERE ID = P_PRO_ID;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_PROJECT_NAME;&lt;br/&gt;FUNCTION IS_AUTHORIZED(&lt;br/&gt;    P_AUTHORIZATION_ROLE IN VARCHAR2)&lt;br/&gt;  RETURN BOOLEAN&lt;br/&gt;AS&lt;br/&gt;  V_USER_RANK          NUMBER;&lt;br/&gt;  V_AUTHORIZATION_RANK NUMBER;&lt;br/&gt;  V_RESULT             BOOLEAN := FALSE;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT B.RANK&lt;br/&gt;  INTO V_USER_RANK&lt;br/&gt;  FROM USERS A,&lt;br/&gt;    USER_ROLES B&lt;br/&gt;  WHERE A.ID = GET_CURRENT_USER_ID&lt;br/&gt;  AND B.ID   = A.USE_ROL_ID;&lt;br/&gt;  SELECT RANK&lt;br/&gt;  INTO V_AUTHORIZATION_RANK&lt;br/&gt;  FROM USER_ROLES&lt;br/&gt;  WHERE UPPER(NAME) = UPPER(P_AUTHORIZATION_ROLE);&lt;br/&gt;  IF V_USER_RANK   &lt;= V_AUTHORIZATION_RANK THEN&lt;br/&gt;    V_RESULT       := TRUE;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END IS_AUTHORIZED;&lt;br/&gt;FUNCTION GET_DELIVERY_HEALTH_AS_TEXT(&lt;br/&gt;    P_PRO_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN VARCHAR2)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_RESULT VARCHAR2(400) := &apos;RED&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT DECODE(GET_DELIVERY_HEALTH(P_PRO_ID, P_AS_ON), &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:RED; FONT-WEIGHT:BOLD;&quot;&gt;RED&lt;/DIV&gt;&apos; , &apos;RED&apos;, &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:ORANGE; FONT-WEIGHT:BOLD;&quot;&gt;ORANGE&lt;/DIV&gt;&apos; , &apos;ORANGE&apos;, &apos;&lt;DIV ALIGN=&quot;CENTER&quot; STYLE=&quot;BACKGROUND-COLOR:YELLOW; FONT-WEIGHT:BOLD;&quot;&gt;YELLOW&lt;/DIV&gt;&apos; , &apos;YELLOW&apos;, &apos;GREEN&apos;)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM DUAL;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_DELIVERY_HEALTH_AS_TEXT;&lt;br/&gt;FUNCTION GET_FIRST_OF_SPECIFIED_MONTH(&lt;br/&gt;    P_DATE             IN DATE,&lt;br/&gt;    P_LOOKAHEAD_MONTHS IN INTEGER DEFAULT 0)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_RESULT DATE := P_DATE;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT LAST_DAY(ADD_MONTHS(V_RESULT, -1 + P_LOOKAHEAD_MONTHS)) + 1&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM DUAL;&lt;br/&gt;  RETURN TO_CHAR(V_RESULT, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_RESULT := NULL;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_FIRST_OF_SPECIFIED_MONTH;&lt;br/&gt;FUNCTION GET_LAST_OF_SPECIFIED_MONTH(&lt;br/&gt;    P_DATE             IN DATE,&lt;br/&gt;    P_LOOKAHEAD_MONTHS IN INTEGER DEFAULT 0)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_RESULT DATE := P_DATE;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT LAST_DAY(ADD_MONTHS(V_RESULT, P_LOOKAHEAD_MONTHS))&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM DUAL;&lt;br/&gt;  RETURN TO_CHAR(V_RESULT, &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_RESULT := NULL;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_LAST_OF_SPECIFIED_MONTH;&lt;br/&gt;FUNCTION GET_COMPANY_PIPELINE(&lt;br/&gt;    P_AS_ON         IN VARCHAR2,&lt;br/&gt;    P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE DATE;&lt;br/&gt;  V_UPPER_DATE DATE;&lt;br/&gt;  V_RESULT     NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := GET_FIRST_OF_SPECIFIED_MONTH(ADD_MONTHS( P_AS_ON, P_MONTHS_OFFSET));&lt;br/&gt;  V_UPPER_DATE := GET_LAST_OF_SPECIFIED_MONTH(V_LOWER_DATE) ;&lt;br/&gt;  SELECT SUM(EXPECTED_VALUE)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM PIPELINE&lt;br/&gt;  WHERE EXPECTED_START BETWEEN V_LOWER_DATE AND V_UPPER_DATE;&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;END GET_COMPANY_PIPELINE;&lt;br/&gt;FUNCTION GET_COMPANY_UTILIZATION(&lt;br/&gt;    P_AS_ON         IN VARCHAR2,&lt;br/&gt;    P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE       DATE;&lt;br/&gt;  V_UPPER_DATE       DATE;&lt;br/&gt;  V_DATE             DATE;&lt;br/&gt;  V_ASSIGNABLE_HOURS NUMBER := 0;&lt;br/&gt;  V_WORKED           NUMBER := 0;&lt;br/&gt;  V_RESULT           NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := GET_FIRST_OF_SPECIFIED_MONTH(ADD_MONTHS( P_AS_ON, P_MONTHS_OFFSET));&lt;br/&gt;  V_UPPER_DATE := GET_LAST_OF_SPECIFIED_MONTH(V_LOWER_DATE) ;&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  ( SELECT * FROM USERS&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_DATE := V_LOWER_DATE;&lt;br/&gt;    LOOP&lt;br/&gt;      EXIT&lt;br/&gt;    WHEN V_DATE &gt; V_UPPER_DATE;&lt;br/&gt;      IF IS_BUSINESS_DAY(V_DATE, C1REC.BUS_UNI_ID) THEN&lt;br/&gt;        --        V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 8; -- 8 TO 24&lt;br/&gt;        V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 24;&lt;br/&gt;      END IF;&lt;br/&gt;      FOR C2REC IN&lt;br/&gt;      (SELECT    *&lt;br/&gt;      FROM PROJECT_USERS&lt;br/&gt;      WHERE USE_ID = C1REC.ID&lt;br/&gt;      AND V_DATE BETWEEN START_DATE AND END_DATE&lt;br/&gt;      )&lt;br/&gt;      LOOP&lt;br/&gt;        FOR C3REC IN&lt;br/&gt;        ( SELECT * FROM TIMESHEETS WHERE PRO_USE_ID = C2REC.ID AND V_DATE = FOR_DATE&lt;br/&gt;        )&lt;br/&gt;        LOOP&lt;br/&gt;          V_WORKED := V_WORKED + NVL(C3REC.HOURS, 0);&lt;br/&gt;        END LOOP;&lt;br/&gt;      END LOOP;&lt;br/&gt;      V_DATE := V_DATE + 1;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_RESULT := V_WORKED * 100 / V_ASSIGNABLE_HOURS;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN 0;&lt;br/&gt;END GET_COMPANY_UTILIZATION;&lt;br/&gt;FUNCTION GET_COMPANY_BILLING_DELTA(&lt;br/&gt;    P_AS_ON         IN VARCHAR2,&lt;br/&gt;    P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_DATE   DATE;&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_DATE := ADD_MONTHS(P_AS_ON, P_MONTHS_OFFSET);&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  ( SELECT * FROM BUSINESS_UNITS&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_RESULT := V_RESULT + NVL(GET_BU_BILLING_DELTA(TO_CHAR (V_DATE, &apos;DD-Mon-YYYY&apos;), 1, C1REC.ID), 0);&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN 0;&lt;br/&gt;END GET_COMPANY_BILLING_DELTA;&lt;br/&gt;FUNCTION GET_COMPANY_INVOICED(&lt;br/&gt;    P_AS_ON         IN VARCHAR2,&lt;br/&gt;    P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE DATE;&lt;br/&gt;  V_UPPER_DATE DATE;&lt;br/&gt;  V_RESULT     NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := GET_FIRST_OF_SPECIFIED_MONTH(ADD_MONTHS( P_AS_ON, P_MONTHS_OFFSET));&lt;br/&gt;  V_UPPER_DATE := GET_LAST_OF_SPECIFIED_MONTH(V_LOWER_DATE) ;&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  ( SELECT * FROM INVOICE_HEADERS&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    IF C1REC.INVOICE_DATE BETWEEN V_LOWER_DATE AND V_UPPER_DATE THEN&lt;br/&gt;      V_RESULT := V_RESULT + NVL(C1REC.AMOUNT, 0);&lt;br/&gt;    END IF;&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN 0;&lt;br/&gt;END GET_COMPANY_INVOICED;&lt;br/&gt;FUNCTION GET_COMPANY_COST(&lt;br/&gt;    P_AS_ON         IN VARCHAR2,&lt;br/&gt;    P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_DATE   DATE;&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_DATE   := GET_FIRST_OF_SPECIFIED_MONTH(ADD_MONTHS(P_AS_ON , P_MONTHS_OFFSET));&lt;br/&gt;  V_RESULT := GET_TOTAL_COSTS(TO_CHAR(V_DATE, &apos;DD-MON-YYYY&apos; ), 1);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN 0;&lt;br/&gt;END GET_COMPANY_COST;&lt;br/&gt;FUNCTION GET_COMPANY_PROFIT(&lt;br/&gt;    P_AS_ON         IN VARCHAR2,&lt;br/&gt;    P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_DATE   DATE;&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_DATE   := GET_FIRST_OF_SPECIFIED_MONTH(ADD_MONTHS(P_AS_ON , P_MONTHS_OFFSET));&lt;br/&gt;  V_RESULT := GET_COMPANY_INVOICED(V_DATE, 1 ) -&lt;br/&gt;  GET_COMPANY_COST(V_DATE, 1);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN 0;&lt;br/&gt;END GET_COMPANY_PROFIT;&lt;br/&gt;FUNCTION GET_COMPANY_ASSIGNED(&lt;br/&gt;    P_AS_ON         IN VARCHAR2,&lt;br/&gt;    P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE       DATE;&lt;br/&gt;  V_UPPER_DATE       DATE;&lt;br/&gt;  V_DATE             DATE;&lt;br/&gt;  V_ASSIGNABLE_HOURS NUMBER := 0;&lt;br/&gt;  V_ASSIGNED         NUMBER := 0;&lt;br/&gt;  V_RESULT           NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := GET_FIRST_OF_SPECIFIED_MONTH(ADD_MONTHS( P_AS_ON, P_MONTHS_OFFSET));&lt;br/&gt;  V_UPPER_DATE := GET_LAST_OF_SPECIFIED_MONTH(V_LOWER_DATE) ;&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  ( SELECT * FROM USERS&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_DATE := V_LOWER_DATE;&lt;br/&gt;    LOOP&lt;br/&gt;      EXIT&lt;br/&gt;    WHEN V_DATE &gt; V_UPPER_DATE;&lt;br/&gt;      IF IS_BUSINESS_DAY(V_DATE, C1REC.BUS_UNI_ID) THEN&lt;br/&gt;        --        V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 8; -- 8 TO 24&lt;br/&gt;        V_ASSIGNABLE_HOURS := V_ASSIGNABLE_HOURS + 24;&lt;br/&gt;      END IF;&lt;br/&gt;      FOR C2REC IN&lt;br/&gt;      (SELECT    *&lt;br/&gt;      FROM PROJECT_USERS&lt;br/&gt;      WHERE USE_ID = C1REC.ID&lt;br/&gt;      AND V_DATE BETWEEN START_DATE AND END_DATE&lt;br/&gt;      )&lt;br/&gt;      LOOP&lt;br/&gt;        --        V_ASSIGNED := V_ASSIGNED + NVL(C2REC.HOURS_PER_DAY, 0); -- 8 TO 24&lt;br/&gt;        V_ASSIGNED := V_ASSIGNED + GET_NORMALIZED_HOURS(C2REC.USE_ID, V_DATE, C2REC.HOURS_PER_DAY);&lt;br/&gt;      END LOOP;&lt;br/&gt;      V_DATE := V_DATE + 1;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_RESULT := V_ASSIGNED * 100 / V_ASSIGNABLE_HOURS;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN 0;&lt;br/&gt;END GET_COMPANY_ASSIGNED;&lt;br/&gt;FUNCTION GET_COMPANY_WORKED(&lt;br/&gt;    P_AS_ON         IN VARCHAR2,&lt;br/&gt;    P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_LOWER_DATE DATE;&lt;br/&gt;  V_UPPER_DATE DATE;&lt;br/&gt;  V_DATE       DATE;&lt;br/&gt;  V_ASSIGNED   NUMBER := 0;&lt;br/&gt;  V_WORKED     NUMBER := 0;&lt;br/&gt;  V_RESULT     NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_LOWER_DATE := GET_FIRST_OF_SPECIFIED_MONTH(ADD_MONTHS( P_AS_ON, P_MONTHS_OFFSET));&lt;br/&gt;  V_UPPER_DATE := GET_LAST_OF_SPECIFIED_MONTH(V_LOWER_DATE) ;&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  ( SELECT * FROM USERS&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_DATE := V_LOWER_DATE;&lt;br/&gt;    LOOP&lt;br/&gt;      EXIT&lt;br/&gt;    WHEN V_DATE &gt; V_UPPER_DATE;&lt;br/&gt;      FOR C2REC IN&lt;br/&gt;      (SELECT    *&lt;br/&gt;      FROM PROJECT_USERS&lt;br/&gt;      WHERE USE_ID = C1REC.ID&lt;br/&gt;      AND V_DATE BETWEEN START_DATE AND END_DATE&lt;br/&gt;      )&lt;br/&gt;      LOOP&lt;br/&gt;        --        V_ASSIGNED := V_ASSIGNED + NVL(C2REC.HOURS_PER_DAY, 0); -- 8 TO 24&lt;br/&gt;        V_ASSIGNED := V_ASSIGNED + GET_NORMALIZED_HOURS(C2REC.USE_ID, V_DATE, C2REC.HOURS_PER_DAY);&lt;br/&gt;        FOR C3REC               IN&lt;br/&gt;        ( SELECT * FROM TIMESHEETS WHERE PRO_USE_ID = C2REC.ID AND V_DATE = FOR_DATE&lt;br/&gt;        )&lt;br/&gt;        LOOP&lt;br/&gt;          V_WORKED := V_WORKED + NVL(C3REC.HOURS, 0);&lt;br/&gt;        END LOOP;&lt;br/&gt;      END LOOP;&lt;br/&gt;      V_DATE := V_DATE + 1;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;  V_RESULT := V_WORKED * 100 / V_ASSIGNED;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN 0;&lt;br/&gt;END GET_COMPANY_WORKED;&lt;br/&gt;FUNCTION GET_USER_ACTIVE(&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN DATE)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_ACTIVE VARCHAR2(400);&lt;br/&gt;  V_RESULT VARCHAR2(1) := &apos;N&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  ( SELECT * FROM USER_AUDIT WHERE USE_ID = P_USE_ID ORDER BY AUDIT_DATE DESC&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    IF C1REC.AUDIT_DATE &lt;= P_AS_ON THEN&lt;br/&gt;      SELECT UPPER(NAME) INTO V_ACTIVE FROM FLAG_STATUSES WHERE ID = C1REC.ACTIVE;&lt;br/&gt;      IF V_ACTIVE = &apos;Y&apos; THEN&lt;br/&gt;        V_RESULT := &apos;Y&apos;;&lt;br/&gt;        EXIT;&lt;br/&gt;      END IF;&lt;br/&gt;    END IF;&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_USER_ACTIVE;&lt;br/&gt;FUNCTION GET_COMPANY_HEADCOUNT(&lt;br/&gt;    P_AS_ON         IN VARCHAR2,&lt;br/&gt;    P_MONTHS_OFFSET IN INTEGER)&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_DATE   DATE;&lt;br/&gt;  V_RESULT INTEGER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_DATE := GET_LAST_OF_SPECIFIED_MONTH(ADD_MONTHS(P_AS_ON, P_MONTHS_OFFSET));&lt;br/&gt;  SELECT COUNT(*)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM USERS&lt;br/&gt;  WHERE GET_USER_ACTIVE(ID, V_DATE) = &apos;Y&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_COMPANY_HEADCOUNT;&lt;br/&gt;FUNCTION CAN_PERUSE_DATA(&lt;br/&gt;    P_DATA_OWNER_ID     IN INTEGER,&lt;br/&gt;    P_DATA_REQUESTOR_ID IN INTEGER DEFAULT GET_CURRENT_USER_ID)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_RESULT VARCHAR2(1) := &apos;N&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT CAN_PERUSE_DATA&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM CAN_PERUSE_DATA_VIEW&lt;br/&gt;  WHERE DATA_OWNER   = P_DATA_OWNER_ID&lt;br/&gt;  AND DATA_REQUESTOR = P_DATA_REQUESTOR_ID;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END CAN_PERUSE_DATA;&lt;br/&gt;PROCEDURE PURGE_TIMESHEETS(&lt;br/&gt;    P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 )&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_IDS IS NULL OR P_IDS.COUNT = 0 THEN&lt;br/&gt;    RETURN;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR I IN 1..P_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    DELETE FROM TIMESHEET_AUDIT WHERE TIM_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM TIMESHEETS WHERE ID = P_IDS(I);&lt;br/&gt;  END LOOP;&lt;br/&gt;END PURGE_TIMESHEETS;&lt;br/&gt;PROCEDURE PURGE_VACATIONS(&lt;br/&gt;    P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 )&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_IDS IS NULL OR P_IDS.COUNT = 0 THEN&lt;br/&gt;    RETURN;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR I IN 1..P_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    DELETE FROM TIMESHEET_AUDIT WHERE VAC_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM TIMESHEETS WHERE VAC_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM VACATION_AUDIT WHERE VAC_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM VACATIONS WHERE ID = P_IDS(I);&lt;br/&gt;  END LOOP;&lt;br/&gt;END PURGE_VACATIONS;&lt;br/&gt;PROCEDURE PURGE_PIPELINE(&lt;br/&gt;    P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 )&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_IDS IS NULL OR P_IDS.COUNT = 0 THEN&lt;br/&gt;    RETURN;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR I IN 1..P_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    DELETE FROM PIPELINE_AUDIT WHERE PIP_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM PIPELINE WHERE ID = P_IDS(I);&lt;br/&gt;  END LOOP;&lt;br/&gt;END PURGE_PIPELINE;&lt;br/&gt;PROCEDURE PURGE_PAYMENTS(&lt;br/&gt;    P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 )&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_IDS IS NULL OR P_IDS.COUNT = 0 THEN&lt;br/&gt;    RETURN;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR I IN 1..P_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    DELETE&lt;br/&gt;    FROM PAYMENT_DETAIL_AUDIT&lt;br/&gt;    WHERE PAY_DET_ID IN&lt;br/&gt;      ( SELECT ID FROM PAYMENT_DETAILS WHERE PAY_HEA_ID = P_IDS(I)&lt;br/&gt;      );&lt;br/&gt;    DELETE FROM PAYMENT_DETAILS WHERE PAY_HEA_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM PAYMENT_HEADER_AUDIT WHERE PAY_HEA_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM PAYMENT_HEADERS WHERE ID = P_IDS(I);&lt;br/&gt;  END LOOP;&lt;br/&gt;END PURGE_PAYMENTS;&lt;br/&gt;PROCEDURE PURGE_INVOICES(&lt;br/&gt;    P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 )&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_IDS IS NULL OR P_IDS.COUNT = 0 THEN&lt;br/&gt;    RETURN;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR I IN 1..P_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    DELETE&lt;br/&gt;    FROM INVOICE_ADDER_AUDIT&lt;br/&gt;    WHERE INV_ADD_ID IN&lt;br/&gt;      ( SELECT ID FROM INVOICE_ADDERS WHERE INV_HEA_ID = P_IDS(I)&lt;br/&gt;      );&lt;br/&gt;    DELETE FROM INVOICE_ADDERS WHERE INV_HEA_ID = P_IDS(I);&lt;br/&gt;    DELETE&lt;br/&gt;    FROM INVOICE_DETAIL_AUDIT&lt;br/&gt;    WHERE INV_DET_ID IN&lt;br/&gt;      ( SELECT ID FROM INVOICE_DETAILS WHERE INV_HEA_ID = P_IDS(I)&lt;br/&gt;      );&lt;br/&gt;    DELETE FROM INVOICE_DETAILS WHERE INV_HEA_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM INVOICE_HEADER_AUDIT WHERE INV_HEA_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM INVOICE_HEADERS WHERE ID = P_IDS(I);&lt;br/&gt;  END LOOP;&lt;br/&gt;END PURGE_INVOICES;&lt;br/&gt;PROCEDURE PURGE_STAFFING_REQUIREMENTS(&lt;br/&gt;    P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 )&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_IDS IS NULL OR P_IDS.COUNT = 0 THEN&lt;br/&gt;    RETURN;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR I IN 1..P_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    DELETE FROM STAFFING_REQUIREMENT_AUDIT WHERE STA_REQ_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM STAFFING_REQUIREMENTS WHERE ID = P_IDS(I);&lt;br/&gt;  END LOOP;&lt;br/&gt;END PURGE_STAFFING_REQUIREMENTS;&lt;br/&gt;PROCEDURE PURGE_ASSIGNED_RESOURCES(&lt;br/&gt;    P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 )&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_IDS IS NULL OR P_IDS.COUNT = 0 THEN&lt;br/&gt;    RETURN;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR I IN 1..P_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    DELETE&lt;br/&gt;    FROM TIMESHEET_AUDIT&lt;br/&gt;    WHERE TIM_ID IN&lt;br/&gt;      ( SELECT ID FROM TIMESHEETS WHERE PRO_USE_ID = P_IDS(I)&lt;br/&gt;      )&lt;br/&gt;    OR PRO_USE_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM TIMESHEETS WHERE PRO_USE_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM PROJECT_USER_AUDIT WHERE PRO_USE_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM PROJECT_USERS WHERE ID = P_IDS(I);&lt;br/&gt;  END LOOP;&lt;br/&gt;END PURGE_ASSIGNED_RESOURCES;&lt;br/&gt;PROCEDURE PURGE_PROJECT_COST_ADDERS(&lt;br/&gt;    P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 )&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_IDS IS NULL OR P_IDS.COUNT = 0 THEN&lt;br/&gt;    RETURN;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR I IN 1..P_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    DELETE FROM PROJECT_COST_ADDERS WHERE ID = P_IDS(I);&lt;br/&gt;  END LOOP;&lt;br/&gt;END PURGE_PROJECT_COST_ADDERS;&lt;br/&gt;PROCEDURE PURGE_DELIVERY_MILESTONES(&lt;br/&gt;    P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 )&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_IDS IS NULL OR P_IDS.COUNT = 0 THEN&lt;br/&gt;    RETURN;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR I IN 1..P_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    DELETE FROM DELIVERY_MILESTONE_AUDIT WHERE DEL_MIL_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM DELIVERY_MILESTONES WHERE ID = P_IDS(I);&lt;br/&gt;  END LOOP;&lt;br/&gt;END PURGE_DELIVERY_MILESTONES;&lt;br/&gt;PROCEDURE PURGE_INVOICING_MILESTONES(&lt;br/&gt;    P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 )&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_IDS IS NULL OR P_IDS.COUNT = 0 THEN&lt;br/&gt;    RETURN;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR I IN 1..P_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    DELETE FROM DELIVERY_INVOICE_MILESTONES WHERE INV_MIL_ID = P_IDS(I);&lt;br/&gt;    DELETE&lt;br/&gt;    FROM INVOICE_DETAIL_AUDIT&lt;br/&gt;    WHERE INV_DET_ID IN&lt;br/&gt;      ( SELECT ID FROM INVOICE_DETAILS WHERE INV_MIL_ID = P_IDS(I)&lt;br/&gt;      );&lt;br/&gt;    DELETE FROM INVOICE_DETAILS WHERE INV_MIL_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM INVOICING_MILESTONE_AUDIT WHERE INV_MIL_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM INVOICING_MILESTONES WHERE ID = P_IDS(I);&lt;br/&gt;  END LOOP;&lt;br/&gt;END PURGE_INVOICING_MILESTONES;&lt;br/&gt;PROCEDURE PURGE_PROJECTS(&lt;br/&gt;    P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 )&lt;br/&gt;AS&lt;br/&gt;  V_STA_REQ_IDS APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_PRO_USE_IDS APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_PRO_COS_ADD_IDS APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_DEL_MIL_IDS APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_INV_MIL_IDS APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_IDS IS NULL OR P_IDS.COUNT = 0 THEN&lt;br/&gt;    RETURN;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR I IN 1..P_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    SELECT ID BULK COLLECT&lt;br/&gt;    INTO V_STA_REQ_IDS&lt;br/&gt;    FROM STAFFING_REQUIREMENTS&lt;br/&gt;    WHERE PRO_ID = P_IDS(I);&lt;br/&gt;    PURGE_STAFFING_REQUIREMENTS(V_STA_REQ_IDS);&lt;br/&gt;    SELECT ID BULK COLLECT&lt;br/&gt;    INTO V_PRO_USE_IDS&lt;br/&gt;    FROM PROJECT_USERS&lt;br/&gt;    WHERE PRO_ID = P_IDS(I);&lt;br/&gt;    PURGE_ASSIGNED_RESOURCES(V_PRO_USE_IDS);&lt;br/&gt;    SELECT ID BULK COLLECT&lt;br/&gt;    INTO V_PRO_COS_ADD_IDS&lt;br/&gt;    FROM PROJECT_COST_ADDERS&lt;br/&gt;    WHERE PRO_ID = P_IDS(I);&lt;br/&gt;    PURGE_PROJECT_COST_ADDERS(V_PRO_COS_ADD_IDS);&lt;br/&gt;    SELECT ID BULK COLLECT&lt;br/&gt;    INTO V_DEL_MIL_IDS&lt;br/&gt;    FROM DELIVERY_MILESTONES&lt;br/&gt;    WHERE PRO_ID = P_IDS(I);&lt;br/&gt;    PURGE_DELIVERY_MILESTONES(V_DEL_MIL_IDS);&lt;br/&gt;    SELECT ID BULK COLLECT&lt;br/&gt;    INTO V_INV_MIL_IDS&lt;br/&gt;    FROM INVOICING_MILESTONES&lt;br/&gt;    WHERE PRO_ID = P_IDS(I);&lt;br/&gt;    PURGE_INVOICING_MILESTONES(V_INV_MIL_IDS);&lt;br/&gt;    DELETE FROM PROJECT_AUDIT WHERE PRO_ID = P_IDS(I);&lt;br/&gt;    DELETE FROM PROJECTS WHERE ID = P_IDS(I);&lt;br/&gt;  END LOOP;&lt;br/&gt;END PURGE_PROJECTS;&lt;br/&gt;FUNCTION IS_USER_ACTIVE(&lt;br/&gt;    P_USE_ID IN INTEGER)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_RESULT VARCHAR2(1) := &apos;N&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT UPPER(NAME)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM FLAG_STATUSES&lt;br/&gt;  WHERE ID =&lt;br/&gt;    ( SELECT ACTIVE FROM USERS WHERE ID = P_USE_ID&lt;br/&gt;    );&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_RESULT := &apos;N&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END IS_USER_ACTIVE;&lt;br/&gt;FUNCTION GET_DEFAULT_VACATION_APPROVED&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT ID&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM FLAG_STATUSES&lt;br/&gt;  WHERE UPPER(NAME) = &apos;N&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_DEFAULT_VACATION_APPROVED;&lt;br/&gt;PROCEDURE APPROVE_VACATIONS(&lt;br/&gt;    P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 )&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_IDS IS NULL OR P_IDS.COUNT = 0 THEN&lt;br/&gt;    RETURN;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR I IN 1..P_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    FOR C1REC IN&lt;br/&gt;    (SELECT * FROM VACATIONS WHERE ID = P_IDS(I)&lt;br/&gt;    )&lt;br/&gt;    LOOP&lt;br/&gt;      IF IS_USER_ADMINISTRATOR = &apos;Y&apos; OR (COMPUTE_VACATION_ELIGIBLE(C1REC.USE_ID, C1REC.VAC_REA_ID, C1REC.FROM_DATE, C1REC.TO_DATE, C1REC.HOURS_PER_DAY, C1REC.APPLICATION_DATE) - COMPUTE_VACATION_AVAILED(C1REC.USE_ID, C1REC.VAC_REA_ID, C1REC.FROM_DATE, C1REC.TO_DATE, C1REC.HOURS_PER_DAY, C1REC.APPLICATION_DATE) - GET_BUSINESS_DAYS(C1REC.FROM_DATE, C1REC.TO_DATE)) &gt; 0 THEN&lt;br/&gt;        UPDATE VACATIONS&lt;br/&gt;        SET APPROVED =&lt;br/&gt;          ( SELECT ID FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;Y&apos;&lt;br/&gt;          )&lt;br/&gt;        WHERE ID = P_IDS(I);&lt;br/&gt;        CREATE_VACATION_TIMESHEETS(P_IDS(I));&lt;br/&gt;      ELSE&lt;br/&gt;        UPDATE VACATIONS&lt;br/&gt;        SET COMMENTS = &apos;Vacation requested exceeds vacation balance hence not approved. Contact Administrator.&apos;&lt;br/&gt;        WHERE ID     = P_IDS(I);&lt;br/&gt;      END IF;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;END APPROVE_VACATIONS;&lt;br/&gt;PROCEDURE REJECT_VACATIONS(&lt;br/&gt;    P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2 )&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_IDS IS NULL OR P_IDS.COUNT = 0 THEN&lt;br/&gt;    RETURN;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR I IN 1..P_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    UPDATE VACATIONS&lt;br/&gt;    SET APPROVED =&lt;br/&gt;      ( SELECT ID FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;N&apos;&lt;br/&gt;      )&lt;br/&gt;    WHERE ID = P_IDS(I);&lt;br/&gt;  END LOOP;&lt;br/&gt;END REJECT_VACATIONS;&lt;br/&gt;FUNCTION GET_MONTHLY_HOURS_CAP&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER := 21 * 8;&lt;br/&gt;BEGIN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_MONTHLY_HOURS_CAP;&lt;br/&gt;PROCEDURE DEFAULT_ASSIGNMENTS(&lt;br/&gt;    P_IDS IN APEX_APPLICATION_GLOBAL.VC_ARR2)&lt;br/&gt;AS&lt;br/&gt;  V_COUNT     INTEGER;&lt;br/&gt;  V_COST_RATE NUMBER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT COUNT(*)&lt;br/&gt;  INTO V_COUNT&lt;br/&gt;  FROM TECHNOLOGIES&lt;br/&gt;  WHERE UPPER(NAME) = &apos;DEFAULT SKILL&apos;;&lt;br/&gt;  IF V_COUNT        = 0 THEN&lt;br/&gt;    INSERT INTO TECHNOLOGIES&lt;br/&gt;      ( ID, NAME, DESCRIPTION, RANK, COMMENTS&lt;br/&gt;      )&lt;br/&gt;    SELECT TEC_SEQ.NEXTVAL,&lt;br/&gt;      &apos;Default Skill&apos;,&lt;br/&gt;      &apos;Default skill for all employees time tracking&apos;,&lt;br/&gt;      -1,&lt;br/&gt;      NULL&lt;br/&gt;    FROM DUAL;&lt;br/&gt;  END IF;&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  ( SELECT * FROM BUSINESS_UNITS&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    SELECT COUNT(*)&lt;br/&gt;    INTO V_COUNT&lt;br/&gt;    FROM PROJECTS&lt;br/&gt;    WHERE UPPER(PROJECT_NAME) LIKE &apos;DEFAULT PROJECT%&apos;&lt;br/&gt;    AND BUS_UNI_ID = C1REC.ID;&lt;br/&gt;    IF V_COUNT     = 0 THEN&lt;br/&gt;      INSERT&lt;br/&gt;      INTO PROJECTS&lt;br/&gt;        (&lt;br/&gt;          ID,&lt;br/&gt;          CLIENT_NAME,&lt;br/&gt;          PROJECT_NAME,&lt;br/&gt;          PROJECT_DESCRIPTION,&lt;br/&gt;          PROJECT_AMOUNT,&lt;br/&gt;          COMMENTS,&lt;br/&gt;          START_DATE,&lt;br/&gt;          END_DATE,&lt;br/&gt;          PRO_TYP_ID,&lt;br/&gt;          PRO_STA_ID,&lt;br/&gt;          BUS_UNI_ID,&lt;br/&gt;          ESTIMATOR_ID,&lt;br/&gt;          SALES_PERSON_ID,&lt;br/&gt;          ENGAGEMENT_MANAGER_ID,&lt;br/&gt;          DELIVERY_MANAGER_ID,&lt;br/&gt;          PIP_ID&lt;br/&gt;        )&lt;br/&gt;      SELECT PRO_SEQ.NEXTVAL,&lt;br/&gt;        C1REC.NAME,&lt;br/&gt;        &apos;Default Project (&apos;&lt;br/&gt;        || C1REC.NAME&lt;br/&gt;        || &apos;)&apos;,&lt;br/&gt;        &apos;Default project for all users.&apos;,&lt;br/&gt;        0,&lt;br/&gt;        NULL,&lt;br/&gt;        &apos;01-Jan-2013&apos;,&lt;br/&gt;        &apos;31-Dec-2099&apos;,&lt;br/&gt;        ( SELECT ID FROM PROJECT_TYPES WHERE UPPER(NAME) = &apos;INTERNAL&apos;&lt;br/&gt;        ) ,&lt;br/&gt;        ( SELECT ID FROM PROJECT_STATUSES WHERE UPPER(NAME) = &apos;DELIVERY&apos;&lt;br/&gt;        ) ,&lt;br/&gt;        C1REC.ID,&lt;br/&gt;        (SELECT ID&lt;br/&gt;        FROM USERS&lt;br/&gt;        WHERE UPPER(FIRST_NAME) = &apos;APPLICATION&apos;&lt;br/&gt;        AND UPPER(LAST_NAME)    = &apos;ADMINISTRATOR&apos;&lt;br/&gt;        ) ,&lt;br/&gt;        (SELECT ID&lt;br/&gt;        FROM USERS&lt;br/&gt;        WHERE UPPER(FIRST_NAME) = &apos;APPLICATION&apos;&lt;br/&gt;        AND UPPER(LAST_NAME)    = &apos;ADMINISTRATOR&apos;&lt;br/&gt;        ) ,&lt;br/&gt;        (SELECT ID&lt;br/&gt;        FROM USERS&lt;br/&gt;        WHERE UPPER(FIRST_NAME) = &apos;APPLICATION&apos;&lt;br/&gt;        AND UPPER(LAST_NAME)    = &apos;ADMINISTRATOR&apos;&lt;br/&gt;        ) ,&lt;br/&gt;        (SELECT ID&lt;br/&gt;        FROM USERS&lt;br/&gt;        WHERE UPPER(FIRST_NAME) = &apos;APPLICATION&apos;&lt;br/&gt;        AND UPPER(LAST_NAME)    = &apos;ADMINISTRATOR&apos;&lt;br/&gt;        ) ,&lt;br/&gt;        NULL&lt;br/&gt;      FROM DUAL;&lt;br/&gt;    END IF;&lt;br/&gt;  END LOOP;&lt;br/&gt;  FOR I IN 1..P_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    FOR C1REC IN&lt;br/&gt;    ( SELECT * FROM USERS WHERE ID = P_IDS(I)&lt;br/&gt;    )&lt;br/&gt;    LOOP&lt;br/&gt;      SELECT COUNT(*)&lt;br/&gt;      INTO V_COUNT&lt;br/&gt;      FROM TECHNOLOGY_USERS&lt;br/&gt;      WHERE USE_ID = C1REC.ID&lt;br/&gt;      AND TEC_ID   =&lt;br/&gt;        ( SELECT ID FROM TECHNOLOGIES WHERE UPPER(NAME) = &apos;DEFAULT SKILL&apos;&lt;br/&gt;        );&lt;br/&gt;      IF V_COUNT     &lt; 1 THEN&lt;br/&gt;        V_COST_RATE := C1REC.COST_RATE;&lt;br/&gt;        INSERT&lt;br/&gt;        INTO TECHNOLOGY_USERS&lt;br/&gt;          (&lt;br/&gt;            ID,&lt;br/&gt;            BILLING_RATE,&lt;br/&gt;            COST_RATE,&lt;br/&gt;            COMMENTS,&lt;br/&gt;            TEC_ID,&lt;br/&gt;            USE_ID,&lt;br/&gt;            EFFECTIVE_DATE,&lt;br/&gt;            PRIMARY_SKILL&lt;br/&gt;          )&lt;br/&gt;        SELECT TEC_USE_SEQ.NEXTVAL,&lt;br/&gt;          0,&lt;br/&gt;          V_COST_RATE,&lt;br/&gt;          NULL,&lt;br/&gt;          ( SELECT ID FROM TECHNOLOGIES WHERE UPPER(NAME) = &apos;DEFAULT SKILL&apos;&lt;br/&gt;          ) ,&lt;br/&gt;          C1REC.ID,&lt;br/&gt;          C1REC.JOINING_DATE,&lt;br/&gt;          (SELECT ID FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;Y&apos;&lt;br/&gt;          )&lt;br/&gt;        FROM DUAL;&lt;br/&gt;      END IF;&lt;br/&gt;      SELECT COUNT(*)&lt;br/&gt;      INTO V_COUNT&lt;br/&gt;      FROM PROJECT_USERS&lt;br/&gt;      WHERE USE_ID = C1REC.ID&lt;br/&gt;      AND PRO_ID   =&lt;br/&gt;        (SELECT ID&lt;br/&gt;        FROM PROJECTS&lt;br/&gt;        WHERE UPPER(PROJECT_NAME) LIKE &apos;DEFAULT PROJECT%&apos;&lt;br/&gt;        AND BUS_UNI_ID = C1REC.BUS_UNI_ID&lt;br/&gt;        );&lt;br/&gt;      IF V_COUNT     &lt; 1 THEN&lt;br/&gt;        V_COST_RATE := C1REC.COST_RATE;&lt;br/&gt;        INSERT&lt;br/&gt;        INTO PROJECT_USERS&lt;br/&gt;          (&lt;br/&gt;            ID,&lt;br/&gt;            START_DATE,&lt;br/&gt;            END_DATE,&lt;br/&gt;            HOURS_PER_DAY,&lt;br/&gt;            BILLING_RATE,&lt;br/&gt;            COST_RATE,&lt;br/&gt;            EFFORT_HOURS,&lt;br/&gt;            BILLED_HOURS,&lt;br/&gt;            DELIVERY_DUE_ALERT,&lt;br/&gt;            INVOICING_DUE_ALERT,&lt;br/&gt;            PAYMENT_DUE_ALERT,&lt;br/&gt;            COMMENTS,&lt;br/&gt;            PRO_ID,&lt;br/&gt;            TEC_ID,&lt;br/&gt;            USE_ID,&lt;br/&gt;            DES_ID,&lt;br/&gt;            CONSUMED_HOURS,&lt;br/&gt;            EFFECTIVE_DATE&lt;br/&gt;          )&lt;br/&gt;        SELECT PRO_USE_SEQ.NEXTVAL,&lt;br/&gt;          C1REC.JOINING_DATE,&lt;br/&gt;          NVL(C1REC.LEAVING_DATE, SYSDATE + 7),&lt;br/&gt;          0,&lt;br/&gt;          0,&lt;br/&gt;          V_COST_RATE,&lt;br/&gt;          0,0,&lt;br/&gt;          ( SELECT ID FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;Y&apos;&lt;br/&gt;          ) ,&lt;br/&gt;          ( SELECT ID FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;Y&apos;&lt;br/&gt;          ) ,&lt;br/&gt;          ( SELECT ID FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;Y&apos;&lt;br/&gt;          ) ,&lt;br/&gt;          &apos;SKIP ALLOCATION CHECK&apos;,&lt;br/&gt;          (SELECT ID&lt;br/&gt;          FROM PROJECTS&lt;br/&gt;          WHERE UPPER(PROJECT_NAME) LIKE &apos;DEFAULT PROJECT%&apos;&lt;br/&gt;          AND BUS_UNI_ID = C1REC.BUS_UNI_ID&lt;br/&gt;          ) ,&lt;br/&gt;          ( SELECT ID FROM TECHNOLOGIES WHERE UPPER(NAME) = &apos;DEFAULT SKILL&apos;&lt;br/&gt;          ) ,&lt;br/&gt;          C1REC.ID,&lt;br/&gt;          C1REC.DES_ID,&lt;br/&gt;          0,&lt;br/&gt;          C1REC.JOINING_DATE&lt;br/&gt;        FROM DUAL;&lt;br/&gt;      ELSE&lt;br/&gt;        UPDATE PROJECT_USERS&lt;br/&gt;        SET END_DATE = NVL(C1REC.LEAVING_DATE, SYSDATE + 7),&lt;br/&gt;          COMMENTS   = &apos;SKIP ALLOCATION CHECK&apos;&lt;br/&gt;        WHERE USE_ID = C1REC.ID&lt;br/&gt;        AND PRO_ID   =&lt;br/&gt;          (SELECT ID&lt;br/&gt;          FROM PROJECTS&lt;br/&gt;          WHERE UPPER(PROJECT_NAME) LIKE &apos;DEFAULT PROJECT%&apos;&lt;br/&gt;          AND BUS_UNI_ID = C1REC.BUS_UNI_ID&lt;br/&gt;          );&lt;br/&gt;      END IF;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;END DEFAULT_ASSIGNMENTS;&lt;br/&gt;FUNCTION GET_USER_ACTIVE_AS_ON(&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN VARCHAR2)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_USERS APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_RESULT VARCHAR2(1) := &apos;N&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  --  SELECT UPPER(C.NAME)&lt;br/&gt;  --  INTO V_RESULT&lt;br/&gt;  --  FROM FLAG_STATUSES C&lt;br/&gt;  --  WHERE C.ID =&lt;br/&gt;  --    (SELECT A.ACTIVE&lt;br/&gt;  --    FROM USER_AUDIT A&lt;br/&gt;  --    WHERE A.USE_ID = P_USE_ID&lt;br/&gt;  --    AND A.ID       =&lt;br/&gt;  --      (SELECT MAX(B.ID)&lt;br/&gt;  --      FROM USER_AUDIT B&lt;br/&gt;  --      WHERE B.USE_ID    = P_USE_ID&lt;br/&gt;  --      AND B.AUDIT_DATE &lt;= TO_DATE(P_AS_ON, &apos;DD-Mon-YYYY&apos;)&lt;br/&gt;  --      )&lt;br/&gt;  --    );&lt;br/&gt;  SELECT ACTIVE BULK COLLECT&lt;br/&gt;  INTO V_USERS&lt;br/&gt;  FROM USER_AUDIT&lt;br/&gt;  WHERE USE_ID        = P_USE_ID&lt;br/&gt;  AND EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  ORDER BY EFFECTIVE_DATE DESC,&lt;br/&gt;    AUDIT_DATE DESC;&lt;br/&gt;  SELECT UPPER(NAME) INTO V_RESULT FROM FLAG_STATUSES WHERE ID = V_USERS(1);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_RESULT := &apos;N&apos;;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_USER_ACTIVE_AS_ON;&lt;br/&gt;PROCEDURE DEFAULT_PASSWORDS(&lt;br/&gt;    P_KEYS IN APEX_APPLICATION_GLOBAL.VC_ARR2)&lt;br/&gt;AS&lt;br/&gt;  V_EMAIL_ADDRESS VARCHAR2(400);&lt;br/&gt;BEGIN&lt;br/&gt;  FOR I IN 1..P_KEYS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    BEGIN&lt;br/&gt;      SELECT EMAIL_ADDRESS INTO V_EMAIL_ADDRESS FROM USERS WHERE ID = P_KEYS(I);&lt;br/&gt;      XRAYLOGIC.ACCOUNT_DROP(V_EMAIL_ADDRESS);&lt;br/&gt;      XRAYLOGIC.ACCOUNT_CREATE(V_EMAIL_ADDRESS, &apos;password&apos;) ;&lt;br/&gt;      UPDATE USERS SET COMMENTS = &apos;Password has been changed.&apos; WHERE ID = P_KEYS(I);&lt;br/&gt;    EXCEPTION&lt;br/&gt;    WHEN OTHERS THEN&lt;br/&gt;      NULL;&lt;br/&gt;    END;&lt;br/&gt;  END LOOP;&lt;br/&gt;END DEFAULT_PASSWORDS;&lt;br/&gt;FUNCTION GET_DEFAULT_PROJECT_TYPE_ID&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  IF V_DEFAULT_PROJECT_TYPE_ID = -1 THEN&lt;br/&gt;    SELECT ID&lt;br/&gt;    INTO V_DEFAULT_PROJECT_TYPE_ID&lt;br/&gt;    FROM PROJECT_TYPES&lt;br/&gt;    WHERE UPPER(NAME) = &apos;DEFAULT&apos;;&lt;br/&gt;  END IF;&lt;br/&gt;  V_RESULT := V_DEFAULT_PROJECT_TYPE_ID;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_DEFAULT_PROJECT_TYPE_ID;&lt;br/&gt;FUNCTION GET_PROJECTS_IN_INVOICE(&lt;br/&gt;    P_INV_HEA_ID IN INTEGER)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_PRO_IDS APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_RESULT VARCHAR2(4000) := &apos;&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  ( SELECT * FROM INVOICE_DETAILS WHERE INV_HEA_ID = P_INV_HEA_ID&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    SELECT DISTINCT PRO_ID BULK COLLECT&lt;br/&gt;    INTO V_PRO_IDS&lt;br/&gt;    FROM INVOICING_MILESTONES&lt;br/&gt;    WHERE ID = C1REC.INV_MIL_ID;&lt;br/&gt;  END LOOP;&lt;br/&gt;  FOR I IN 1..V_PRO_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    SELECT V_RESULT&lt;br/&gt;      || &apos; &apos;&lt;br/&gt;      || PROJECT_NAME&lt;br/&gt;    INTO V_RESULT&lt;br/&gt;    FROM PROJECTS&lt;br/&gt;    WHERE ID = V_PRO_IDS(I);&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN NO_DATA_FOUND THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_PROJECTS_IN_INVOICE;&lt;br/&gt;FUNCTION GET_PROJECTS_IN_PAYMENT(&lt;br/&gt;    P_PAY_HEA_ID IN INTEGER)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_PRO_IDS APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_RESULT VARCHAR2(4000) := &apos;&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  ( SELECT * FROM PAYMENT_DETAILS WHERE PAY_HEA_ID = P_PAY_HEA_ID&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    FOR C2REC IN&lt;br/&gt;    ( SELECT * FROM INVOICE_HEADERS WHERE ID = C1REC.INV_HEA_ID&lt;br/&gt;    )&lt;br/&gt;    LOOP&lt;br/&gt;      FOR C3REC IN&lt;br/&gt;      ( SELECT * FROM INVOICE_DETAILS WHERE INV_HEA_ID = C2REC.ID&lt;br/&gt;      )&lt;br/&gt;      LOOP&lt;br/&gt;        SELECT DISTINCT PRO_ID BULK COLLECT&lt;br/&gt;        INTO V_PRO_IDS&lt;br/&gt;        FROM INVOICING_MILESTONES&lt;br/&gt;        WHERE ID = C3REC.INV_MIL_ID;&lt;br/&gt;      END LOOP;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;  FOR I IN 1..V_PRO_IDS.COUNT&lt;br/&gt;  LOOP&lt;br/&gt;    SELECT V_RESULT&lt;br/&gt;      || &apos; &apos;&lt;br/&gt;      || PROJECT_NAME&lt;br/&gt;    INTO V_RESULT&lt;br/&gt;    FROM PROJECTS&lt;br/&gt;    WHERE ID = V_PRO_IDS(I);&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN NO_DATA_FOUND THEN&lt;br/&gt;  RETURN REPLACE(V_RESULT, &apos;(, &apos;, &apos;&apos;);&lt;br/&gt;END GET_PROJECTS_IN_PAYMENT;&lt;br/&gt;FUNCTION GET_TECHNOLOGY_DESIGNATION(&lt;br/&gt;    P_TEC_ID IN INTEGER,&lt;br/&gt;    P_DES_ID IN INTEGER)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_RESULT VARCHAR2(4000) := &apos;&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT NAME INTO V_RESULT FROM TECHNOLOGIES WHERE ID = P_TEC_ID;&lt;br/&gt;  SELECT V_RESULT&lt;br/&gt;    || &apos; [&apos;&lt;br/&gt;    || NAME&lt;br/&gt;    || &apos;]&apos;&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM DESIGNATIONS&lt;br/&gt;  WHERE ID = P_DES_ID;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END GET_TECHNOLOGY_DESIGNATION;&lt;br/&gt;PROCEDURE USER_ALLOCATION_CHECKS(&lt;br/&gt;    P_USE_ID      IN INTEGER,&lt;br/&gt;    P_START_DATE  IN DATE,&lt;br/&gt;    P_END_DATE    IN DATE,&lt;br/&gt;    P_NEW_HOURS   IN NUMBER,&lt;br/&gt;    P_OLD_HOURS   IN NUMBER DEFAULT 0,&lt;br/&gt;    P_UPDATE_FLAG IN VARCHAR2 DEFAULT &apos;N&apos;)&lt;br/&gt;AS&lt;br/&gt;  V_DATE             DATE;&lt;br/&gt;  V_CUMULATIVE_HOURS NUMBER;&lt;br/&gt;  V_ASSIGNMENT_LIST  VARCHAR2(4000);&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_UPDATE_FLAG = &apos;Y&apos; THEN&lt;br/&gt;    V_DATE        := P_START_DATE;&lt;br/&gt;    LOOP&lt;br/&gt;      EXIT&lt;br/&gt;    WHEN V_DATE           &gt; P_END_DATE;&lt;br/&gt;      V_CUMULATIVE_HOURS := 0;&lt;br/&gt;      V_ASSIGNMENT_LIST  := &apos;[&apos;;&lt;br/&gt;      FOR C1REC IN&lt;br/&gt;      (SELECT    *&lt;br/&gt;      FROM USER_ASSIGNED_HOURS_VIEW&lt;br/&gt;      WHERE USE_ID = P_USE_ID&lt;br/&gt;      AND V_DATE BETWEEN START_DATE AND END_DATE&lt;br/&gt;      )&lt;br/&gt;      LOOP&lt;br/&gt;        V_ASSIGNMENT_LIST  := V_ASSIGNMENT_LIST || &apos; &apos; || C1REC.PRO_USE_ID;&lt;br/&gt;        V_CUMULATIVE_HOURS := V_CUMULATIVE_HOURS + C1REC.HOURS_PER_DAY;&lt;br/&gt;      END LOOP;&lt;br/&gt;      V_ASSIGNMENT_LIST := V_ASSIGNMENT_LIST || &apos; ]&apos;;&lt;br/&gt;      --      IF (V_CUMULATIVE_HOURS    - P_OLD_HOURS + P_NEW_HOURS) &gt; 8 THEN -- 8 TO 24&lt;br/&gt;      IF (V_CUMULATIVE_HOURS    - P_OLD_HOURS + P_NEW_HOURS) &gt; 24 THEN&lt;br/&gt;        RAISE_APPLICATION_ERROR(-20001, &apos;Overallocation on &apos; || TO_CHAR(V_DATE, &apos;DD-Mon-YYYY&apos;) || &apos; between assignments &apos; || V_ASSIGNMENT_LIST || &apos;.&apos;);&lt;br/&gt;      END IF;&lt;br/&gt;      V_DATE := V_DATE + 1;&lt;br/&gt;    END LOOP;&lt;br/&gt;  ELSE&lt;br/&gt;    V_DATE := P_START_DATE;&lt;br/&gt;    LOOP&lt;br/&gt;      EXIT&lt;br/&gt;    WHEN V_DATE           &gt; P_END_DATE;&lt;br/&gt;      V_CUMULATIVE_HOURS := 0;&lt;br/&gt;      V_ASSIGNMENT_LIST  := &apos;[&apos;;&lt;br/&gt;      FOR C1REC IN&lt;br/&gt;      (SELECT    *&lt;br/&gt;      FROM USER_ASSIGNED_HOURS_VIEW&lt;br/&gt;      WHERE USE_ID = P_USE_ID&lt;br/&gt;      AND V_DATE BETWEEN START_DATE AND END_DATE&lt;br/&gt;      )&lt;br/&gt;      LOOP&lt;br/&gt;        V_ASSIGNMENT_LIST  := V_ASSIGNMENT_LIST || &apos; &apos; || C1REC.PRO_USE_ID;&lt;br/&gt;        V_CUMULATIVE_HOURS := V_CUMULATIVE_HOURS + C1REC.HOURS_PER_DAY;&lt;br/&gt;      END LOOP;&lt;br/&gt;      V_ASSIGNMENT_LIST := V_ASSIGNMENT_LIST || &apos; ]&apos;;&lt;br/&gt;      --      IF (V_CUMULATIVE_HOURS    + P_NEW_HOURS) &gt; 8 THEN -- 8 TO 24&lt;br/&gt;      IF (V_CUMULATIVE_HOURS    + P_NEW_HOURS) &gt; 24 THEN&lt;br/&gt;        RAISE_APPLICATION_ERROR(-20001, &apos;Overallocation on &apos; || TO_CHAR(V_DATE, &apos;DD-Mon-YYYY&apos;) || &apos; between assignments &apos; || V_ASSIGNMENT_LIST || &apos;.&apos;);&lt;br/&gt;      END IF;&lt;br/&gt;      V_DATE := V_DATE + 1;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END IF;&lt;br/&gt;END USER_ALLOCATION_CHECKS;&lt;br/&gt;PROCEDURE CREATE_VACATION_TIMESHEETS(&lt;br/&gt;    P_VAC_ID IN INTEGER)&lt;br/&gt;AS&lt;br/&gt;  V_DATE DATE;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  (SELECT    *&lt;br/&gt;  FROM VACATIONS&lt;br/&gt;  WHERE ID = P_VAC_ID&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    FOR C2REC IN (&lt;br/&gt;    (SELECT ID&lt;br/&gt;    FROM PROJECT_USERS&lt;br/&gt;    WHERE USE_ID = C1REC.USE_ID&lt;br/&gt;    AND PRO_ID   =&lt;br/&gt;      (SELECT ID&lt;br/&gt;      FROM PROJECTS&lt;br/&gt;      WHERE BUS_UNI_ID = GET_CURRENT_BUSINESS_UNIT_ID&lt;br/&gt;      AND PRO_TYP_ID   = GET_DEFAULT_PROJECT_TYPE_ID&lt;br/&gt;      )&lt;br/&gt;    ))&lt;br/&gt;    LOOP&lt;br/&gt;      V_DATE := C1REC.FROM_DATE;&lt;br/&gt;      LOOP&lt;br/&gt;        EXIT&lt;br/&gt;      WHEN V_DATE &gt; C1REC.TO_DATE;&lt;br/&gt;        INSERT&lt;br/&gt;        INTO TIMESHEETS&lt;br/&gt;          (&lt;br/&gt;            ID,&lt;br/&gt;            FOR_DATE,&lt;br/&gt;            HOURS,&lt;br/&gt;            COMMENTS,&lt;br/&gt;            PRO_USE_ID,&lt;br/&gt;            VAC_ID&lt;br/&gt;          )&lt;br/&gt;          VALUES&lt;br/&gt;          (&lt;br/&gt;            TIM_SEQ.NEXTVAL,&lt;br/&gt;            V_DATE,&lt;br/&gt;            C1REC.HOURS_PER_DAY,&lt;br/&gt;            &apos;Autocreated from vacation&apos;,&lt;br/&gt;            C2REC.ID,&lt;br/&gt;            C1REC.ID&lt;br/&gt;          );&lt;br/&gt;        V_DATE := V_DATE + 1;&lt;br/&gt;      END LOOP;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;END CREATE_VACATION_TIMESHEETS;&lt;br/&gt;FUNCTION COMPUTE_VACATION_ELIGIBLE&lt;br/&gt;  (&lt;br/&gt;    P_USE_ID           IN INTEGER,&lt;br/&gt;    P_VAC_REA_ID       IN INTEGER,&lt;br/&gt;    P_FROM_DATE        IN DATE,&lt;br/&gt;    P_TO_DATE          IN DATE,&lt;br/&gt;    P_HOURS_PER_DAY    IN NUMBER,&lt;br/&gt;    P_APPLICATION_DATE IN DATE&lt;br/&gt;  )&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT DAYS_ALLOWED * (P_APPLICATION_DATE -&lt;br/&gt;    (SELECT JOINING_DATE FROM USERS WHERE ID = P_USE_ID&lt;br/&gt;    )) / 365&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM VACATION_REASONS&lt;br/&gt;  WHERE ID = P_VAC_REA_ID;&lt;br/&gt;  RETURN ROUND(V_RESULT * 2) / 2;&lt;br/&gt;END COMPUTE_VACATION_ELIGIBLE;&lt;br/&gt;FUNCTION COMPUTE_VACATION_AVAILED(&lt;br/&gt;    P_USE_ID           IN INTEGER,&lt;br/&gt;    P_VAC_REA_ID       IN INTEGER,&lt;br/&gt;    P_FROM_DATE        IN DATE,&lt;br/&gt;    P_TO_DATE          IN DATE,&lt;br/&gt;    P_HOURS_PER_DAY    IN NUMBER,&lt;br/&gt;    P_APPLICATION_DATE IN DATE)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_DATE   DATE;&lt;br/&gt;  V_RESULT NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  (SELECT    *&lt;br/&gt;  FROM VACATIONS&lt;br/&gt;  WHERE USE_ID   = P_USE_ID&lt;br/&gt;  AND VAC_REA_ID = P_VAC_REA_ID&lt;br/&gt;  AND APPROVED   =&lt;br/&gt;    (SELECT ID FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;Y&apos;&lt;br/&gt;    )&lt;br/&gt;  AND APPLICATION_DATE &lt;= P_APPLICATION_DATE&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_DATE := C1REC.FROM_DATE;&lt;br/&gt;    LOOP&lt;br/&gt;      EXIT&lt;br/&gt;    WHEN V_DATE              &gt; C1REC.TO_DATE;&lt;br/&gt;      IF C1REC.HOURS_PER_DAY &gt; 4 THEN&lt;br/&gt;        V_RESULT            := V_RESULT + 1;&lt;br/&gt;      ELSE&lt;br/&gt;        V_RESULT := V_RESULT + 0.5;&lt;br/&gt;      END IF;&lt;br/&gt;      V_DATE := V_DATE + 1;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END COMPUTE_VACATION_AVAILED;&lt;br/&gt;FUNCTION COMPUTE_VACATION_REQUESTED(&lt;br/&gt;    P_USE_ID           IN INTEGER,&lt;br/&gt;    P_VAC_REA_ID       IN INTEGER,&lt;br/&gt;    P_FROM_DATE        IN DATE,&lt;br/&gt;    P_TO_DATE          IN DATE,&lt;br/&gt;    P_HOURS_PER_DAY    IN NUMBER ,&lt;br/&gt;    P_APPLICATION_DATE IN DATE)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_DATE       DATE;&lt;br/&gt;  V_BUS_UNI_ID INTEGER;&lt;br/&gt;  V_RESULT     NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  V_DATE := P_FROM_DATE;&lt;br/&gt;  LOOP&lt;br/&gt;    EXIT&lt;br/&gt;  WHEN V_DATE &gt; P_TO_DATE;&lt;br/&gt;    IF IS_BUSINESS_DAY(V_DATE, V_BUS_UNI_ID) THEN&lt;br/&gt;      IF P_HOURS_PER_DAY &gt; 4 THEN&lt;br/&gt;        V_RESULT        := V_RESULT + 1;&lt;br/&gt;      ELSE&lt;br/&gt;        V_RESULT := V_RESULT + 0.5;&lt;br/&gt;      END IF;&lt;br/&gt;    END IF;&lt;br/&gt;    V_DATE := V_DATE + 1;&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;END COMPUTE_VACATION_REQUESTED;&lt;br/&gt;PROCEDURE CHECK_LOGIN_ALLOWED&lt;br/&gt;AS&lt;br/&gt;BEGIN&lt;br/&gt;  IF IS_USER_ACTIVE(GET_CURRENT_USER_ID) &lt;&gt; &apos;Y&apos; THEN&lt;br/&gt;    RAISE_APPLICATION_ERROR(-20001, &apos;Login has been denied as user is locked.&apos;);&lt;br/&gt;  END IF;&lt;br/&gt;END CHECK_LOGIN_ALLOWED;&lt;br/&gt;FUNCTION GET_RESOURCE_OUTFLOW(&lt;br/&gt;    P_USE_ID       IN INTEGER,&lt;br/&gt;    P_MONTH_YEAR   IN VARCHAR2,&lt;br/&gt;    P_NO_OF_MONTHS IN INTEGER DEFAULT 1)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_START_DATE DATE;&lt;br/&gt;  V_END_DATE   DATE;&lt;br/&gt;  V_DATE       DATE;&lt;br/&gt;  V_DAYS       INTEGER := 0;&lt;br/&gt;  V_RESULT     NUMBER  := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  (SELECT * FROM USERS WHERE ID = P_USE_ID&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_START_DATE := GREATEST(TO_DATE(&apos;01-&apos; || P_MONTH_YEAR, &apos;DD-Mon-YYYY&apos;), C1REC.JOINING_DATE);&lt;br/&gt;    V_END_DATE   := LEAST(ADD_MONTHS(V_START_DATE, P_NO_OF_MONTHS) - 1, NVL(C1REC.LEAVING_DATE, ADD_MONTHS(V_START_DATE, P_NO_OF_MONTHS) - 1));&lt;br/&gt;    V_DATE       := V_START_DATE;&lt;br/&gt;    LOOP&lt;br/&gt;      EXIT&lt;br/&gt;    WHEN V_DATE &gt; V_END_DATE;&lt;br/&gt;      IF IS_BUSINESS_DAY(V_DATE, C1REC.BUS_UNI_ID) THEN&lt;br/&gt;        V_DAYS     := V_DAYS   + 1;&lt;br/&gt;        IF V_DAYS  &lt;= (21      * P_NO_OF_MONTHS) THEN&lt;br/&gt;          V_RESULT := V_RESULT + (8 * NVL(GET_USER_COST_RATE(P_USE_ID, V_DATE), 0));&lt;br/&gt;        END IF;&lt;br/&gt;      END IF;&lt;br/&gt;      V_DATE := V_DATE + 1;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END GET_RESOURCE_OUTFLOW;&lt;br/&gt;FUNCTION GET_RESOURCE_INFLOW(&lt;br/&gt;    P_USE_ID       IN INTEGER,&lt;br/&gt;    P_MONTH_YEAR   IN VARCHAR2,&lt;br/&gt;    P_NO_OF_MONTHS IN INTEGER DEFAULT 1)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_START_DATE         DATE;&lt;br/&gt;  V_END_DATE           DATE;&lt;br/&gt;  V_DATE               DATE;&lt;br/&gt;  V_DAYS               INTEGER := 0;&lt;br/&gt;  V_DAY_ASSIGNED_HOURS NUMBER;&lt;br/&gt;  V_RESULT             NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  (SELECT * FROM USERS WHERE ID = P_USE_ID&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_START_DATE := GREATEST(TO_DATE(&apos;01-&apos; || P_MONTH_YEAR, &apos;DD-Mon-YYYY&apos;), C1REC.JOINING_DATE);&lt;br/&gt;    V_END_DATE   := LEAST(ADD_MONTHS(V_START_DATE, P_NO_OF_MONTHS) - 1, NVL(C1REC.LEAVING_DATE, ADD_MONTHS(V_START_DATE, P_NO_OF_MONTHS) - 1));&lt;br/&gt;    V_DATE       := V_START_DATE;&lt;br/&gt;    LOOP&lt;br/&gt;      EXIT&lt;br/&gt;    WHEN V_DATE &gt; V_END_DATE;&lt;br/&gt;      IF IS_BUSINESS_DAY(V_DATE, C1REC.BUS_UNI_ID) THEN&lt;br/&gt;        V_DAYS := V_DAYS + 1;&lt;br/&gt;        SELECT SUM(HOURS_PER_DAY)&lt;br/&gt;        INTO V_DAY_ASSIGNED_HOURS&lt;br/&gt;        FROM USER_ASSIGNED_HOURS_VIEW&lt;br/&gt;        WHERE USE_ID = P_USE_ID&lt;br/&gt;        AND V_DATE BETWEEN START_DATE AND END_DATE;&lt;br/&gt;        V_DAY_ASSIGNED_HOURS := NVL(V_DAY_ASSIGNED_HOURS, 0);&lt;br/&gt;        IF V_DAYS            &lt;= (21      * P_NO_OF_MONTHS) THEN&lt;br/&gt;          V_RESULT           := V_RESULT + (V_DAY_ASSIGNED_HOURS * NVL(GET_USER_COST_RATE(P_USE_ID, V_DATE), 0));&lt;br/&gt;        END IF;&lt;br/&gt;      END IF;&lt;br/&gt;      V_DATE := V_DATE + 1;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END GET_RESOURCE_INFLOW;&lt;br/&gt;FUNCTION GET_RESOURCE_NETFLOW(&lt;br/&gt;    P_USE_ID       IN INTEGER,&lt;br/&gt;    P_MONTH_YEAR   IN VARCHAR2,&lt;br/&gt;    P_NO_OF_MONTHS IN INTEGER DEFAULT 1)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT NUMBER;&lt;br/&gt;BEGIN&lt;br/&gt;  V_RESULT := GET_RESOURCE_INFLOW(P_USE_ID, P_MONTH_YEAR, P_NO_OF_MONTHS) - GET_RESOURCE_OUTFLOW(P_USE_ID, P_MONTH_YEAR, P_NO_OF_MONTHS);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END GET_RESOURCE_NETFLOW;&lt;br/&gt;FUNCTION GET_ASSIGNMENT_COUNT(&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN DATE DEFAULT SYSDATE)&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT COUNT(*)&lt;br/&gt;  INTO V_RESULT&lt;br/&gt;  FROM PROJECT_USERS&lt;br/&gt;  WHERE USE_ID = P_USE_ID&lt;br/&gt;  AND P_AS_ON BETWEEN START_DATE AND END_DATE&lt;br/&gt;  AND PRO_ID NOT IN&lt;br/&gt;    (SELECT ID&lt;br/&gt;    FROM PROJECTS&lt;br/&gt;    WHERE PRO_TYP_ID IN&lt;br/&gt;      (SELECT ID FROM PROJECT_TYPES WHERE UPPER(NAME) IN (&apos;INTERNAL&apos;, &apos;DEFAULT&apos;)&lt;br/&gt;      )&lt;br/&gt;    );&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END GET_ASSIGNMENT_COUNT;&lt;br/&gt;FUNCTION LATEST_USER_AUDIT_RECORD(&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN DATE)&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_IDS APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT A.ID BULK COLLECT&lt;br/&gt;  INTO V_IDS&lt;br/&gt;  FROM USER_AUDIT A&lt;br/&gt;  WHERE A.USE_ID        = P_USE_ID&lt;br/&gt;  AND A.EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  ORDER BY A.EFFECTIVE_DATE DESC,&lt;br/&gt;    A.AUDIT_DATE DESC;&lt;br/&gt;  V_RESULT := V_IDS(1);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RETURN -1;&lt;br/&gt;END LATEST_USER_AUDIT_RECORD;&lt;br/&gt;FUNCTION LATEST_TECHNOLOGY_USERS_RECORD(&lt;br/&gt;    P_USE_ID IN INTEGER,&lt;br/&gt;    P_AS_ON  IN DATE)&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_IDS APEX_APPLICATION_GLOBAL.VC_ARR2;&lt;br/&gt;  V_RESULT INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT A.ID BULK COLLECT&lt;br/&gt;  INTO V_IDS&lt;br/&gt;  FROM TECHNOLOGY_USERS A&lt;br/&gt;  WHERE A.USE_ID        = P_USE_ID&lt;br/&gt;  AND A.EFFECTIVE_DATE &lt;= P_AS_ON&lt;br/&gt;  AND A.PRIMARY_SKILL   =&lt;br/&gt;    (SELECT ID FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;Y&apos;&lt;br/&gt;    )&lt;br/&gt;  AND A.TEC_ID &lt;&gt;&lt;br/&gt;    (SELECT ID FROM TECHNOLOGIES WHERE UPPER(NAME) = &apos;DEFAULT SKILL&apos;&lt;br/&gt;    )&lt;br/&gt;  ORDER BY A.EFFECTIVE_DATE DESC;&lt;br/&gt;  V_RESULT := V_IDS(1);&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RETURN -1;&lt;br/&gt;END LATEST_TECHNOLOGY_USERS_RECORD;&lt;br/&gt;FUNCTION IS_PROJECT_FIELD_EDITABLE(&lt;br/&gt;    P_FIELD_DATA IN VARCHAR2)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_ROLE   VARCHAR2(400);&lt;br/&gt;  V_RESULT VARCHAR2(1) := &apos;N&apos;;&lt;br/&gt;BEGIN&lt;br/&gt;  IF P_FIELD_DATA = &apos;NULL&apos; THEN&lt;br/&gt;    V_RESULT     := &apos;Y&apos;;&lt;br/&gt;  ELSE&lt;br/&gt;    SELECT UPPER(B.NAME)&lt;br/&gt;    INTO V_ROLE&lt;br/&gt;    FROM USERS A,&lt;br/&gt;      USER_ROLES B&lt;br/&gt;    WHERE B.ID  = A.USE_ROL_ID&lt;br/&gt;    AND A.ID    = GET_CURRENT_USER_ID;&lt;br/&gt;    IF V_ROLE   = &apos;ADMINISTRATOR&apos; THEN&lt;br/&gt;      V_RESULT := &apos;Y&apos;;&lt;br/&gt;    END IF;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END IS_PROJECT_FIELD_EDITABLE;&lt;br/&gt;PROCEDURE PRIMARY_SKILL_CHECK(&lt;br/&gt;    P_USE_ID                IN INTEGER,&lt;br/&gt;    P_PRIMARY_SKILL_ENTERED IN INTEGER)&lt;br/&gt;AS&lt;br/&gt;  V_YES_FLAG_ID INTEGER;&lt;br/&gt;  V_COUNT       INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT ID INTO V_YES_FLAG_ID FROM FLAG_STATUSES WHERE UPPER(NAME) = &apos;Y&apos;;&lt;br/&gt;  SELECT COUNT(*)&lt;br/&gt;  INTO V_COUNT&lt;br/&gt;  FROM TECHNOLOGY_USERS&lt;br/&gt;  WHERE USE_ID      = P_USE_ID&lt;br/&gt;  AND PRIMARY_SKILL = V_YES_FLAG_ID&lt;br/&gt;  AND TEC_ID       &lt;&gt;&lt;br/&gt;    (SELECT ID FROM TECHNOLOGIES WHERE UPPER(NAME) = &apos;DEFAULT SKILL&apos;&lt;br/&gt;    );&lt;br/&gt;  IF P_PRIMARY_SKILL_ENTERED = V_YES_FLAG_ID THEN&lt;br/&gt;    IF V_COUNT              &lt;&gt; 0 THEN&lt;br/&gt;      RAISE_APPLICATION_ERROR(-20001, &apos;Cannot define more than one primary skill per resource.&apos;);&lt;br/&gt;    END IF;&lt;br/&gt;  ELSE&lt;br/&gt;    IF V_COUNT &gt; 1 THEN&lt;br/&gt;      RAISE_APPLICATION_ERROR(-20001, &apos;Cannot define more than one primary skill per resource.&apos;);&lt;br/&gt;    END IF;&lt;br/&gt;  END IF;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END PRIMARY_SKILL_CHECK;&lt;br/&gt;FUNCTION DAYS_IN_MONTH(&lt;br/&gt;    P_DATE IN DATE)&lt;br/&gt;  RETURN INTEGER&lt;br/&gt;AS&lt;br/&gt;  V_START_DATE DATE;&lt;br/&gt;  V_END_DATE   DATE;&lt;br/&gt;  V_RESULT     INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  V_START_DATE := TO_DATE(GET_FIRST_OF_SPECIFIED_MONTH(TO_CHAR(P_DATE, &apos;DD-Mon-YYYY&apos;)), &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_END_DATE   := TO_DATE(GET_LAST_OF_SPECIFIED_MONTH(TO_CHAR(P_DATE, &apos;DD-Mon-YYYY&apos;)), &apos;DD-Mon-YYYY&apos;);&lt;br/&gt;  V_RESULT     := 1 + V_END_DATE - V_START_DATE;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END DAYS_IN_MONTH;&lt;br/&gt;FUNCTION IS_WEEKDAY(&lt;br/&gt;    P_DATE IN DATE)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_RESULT VARCHAR2(1);&lt;br/&gt;BEGIN&lt;br/&gt;  IF TO_CHAR ( P_DATE, &apos;D&apos; ) IN ( &apos;1&apos;, &apos;7&apos; ) THEN&lt;br/&gt;    V_RESULT := &apos;N&apos;;&lt;br/&gt;  ELSE&lt;br/&gt;    V_RESULT := &apos;Y&apos;;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END IS_WEEKDAY;&lt;br/&gt;PROCEDURE TIMESHEET_CLOCKING_CHECK(&lt;br/&gt;    P_PRO_USE_ID     IN INTEGER,&lt;br/&gt;    P_HOURS_CLOCKED  IN NUMBER,&lt;br/&gt;    P_TIMESHEET_DATE IN DATE)&lt;br/&gt;AS&lt;br/&gt;  V_START_DATE     DATE;&lt;br/&gt;  V_END_DATE       DATE;&lt;br/&gt;  V_ASSIGNED_HOURS NUMBER;&lt;br/&gt;  V_PROJECT_TYPE   VARCHAR2(400);&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT START_DATE,&lt;br/&gt;    END_DATE,&lt;br/&gt;    HOURS_PER_DAY&lt;br/&gt;  INTO V_START_DATE,&lt;br/&gt;    V_END_DATE,&lt;br/&gt;    V_ASSIGNED_HOURS&lt;br/&gt;  FROM PROJECT_USERS&lt;br/&gt;  WHERE ID = P_PRO_USE_ID;&lt;br/&gt;  IF NOT P_TIMESHEET_DATE BETWEEN V_START_DATE AND V_END_DATE THEN&lt;br/&gt;    RAISE_APPLICATION_ERROR(-20001, &apos;Timesheet date outside of assignment date range.&apos;);&lt;br/&gt;  END IF;&lt;br/&gt;  SELECT C.NAME&lt;br/&gt;  INTO V_PROJECT_TYPE&lt;br/&gt;  FROM PROJECT_USERS A,&lt;br/&gt;    PROJECTS B,&lt;br/&gt;    PROJECT_TYPES C&lt;br/&gt;  WHERE C.ID               = B.PRO_TYP_ID&lt;br/&gt;  AND B.ID                 = A.PRO_ID&lt;br/&gt;  AND A.ID                 = P_PRO_USE_ID;&lt;br/&gt;  IF UPPER(V_PROJECT_TYPE) = &apos;INTERNAL&apos; THEN&lt;br/&gt;    IF P_HOURS_CLOCKED     &gt; V_ASSIGNED_HOURS THEN&lt;br/&gt;      RAISE_APPLICATION_ERROR(-20001, &apos;Cannot clock more than assigned hours on internal project.&apos;);&lt;br/&gt;    END IF;&lt;br/&gt;  END IF;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END TIMESHEET_CLOCKING_CHECK;&lt;br/&gt;FUNCTION GET_APPROVED_VACATION(&lt;br/&gt;    P_USE_ID     IN INTEGER,&lt;br/&gt;    P_START_DATE IN DATE,&lt;br/&gt;    P_END_DATE   IN DATE)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_APPROVED INTEGER;&lt;br/&gt;  V_RESULT   NUMBER := 0;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT ID&lt;br/&gt;  INTO V_APPROVED&lt;br/&gt;  FROM FLAG_STATUSES&lt;br/&gt;  WHERE UPPER(NAME) = &apos;Y&apos;;&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  (SELECT    *&lt;br/&gt;  FROM VACATIONS&lt;br/&gt;  WHERE USE_ID                                                                = P_USE_ID&lt;br/&gt;  AND XRAYLOGIC.DAYS_OF_OVERLAP(FROM_DATE, TO_DATE, P_START_DATE, P_END_DATE) &gt; 0&lt;br/&gt;  AND APPROVED                                                                = V_APPROVED&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    V_RESULT := V_RESULT + XRAYLOGIC.DAYS_OF_OVERLAP(C1REC.FROM_DATE, C1REC.TO_DATE, P_START_DATE, P_END_DATE);&lt;br/&gt;  END LOOP;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END GET_APPROVED_VACATION;&lt;br/&gt;FUNCTION DAYS_OF_OVERLAP(&lt;br/&gt;    P_START_DATE_1 IN DATE,&lt;br/&gt;    P_END_DATE_1   IN DATE,&lt;br/&gt;    P_START_DATE_2 IN DATE,&lt;br/&gt;    P_END_DATE_2   IN DATE)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_START_DATE DATE;&lt;br/&gt;  V_END_DATE   DATE;&lt;br/&gt;  V_RESULT     NUMBER;&lt;br/&gt;BEGIN&lt;br/&gt;  V_START_DATE := GREATEST(P_START_DATE_1, P_START_DATE_2);&lt;br/&gt;  V_END_DATE   := LEAST(P_END_DATE_1, P_END_DATE_2);&lt;br/&gt;  V_RESULT     := V_END_DATE - V_START_DATE + 1;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END DAYS_OF_OVERLAP;&lt;br/&gt;FUNCTION IS_USER_ADMINISTRATOR(&lt;br/&gt;    P_USE_ID IN INTEGER DEFAULT GET_CURRENT_USER_ID)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_RANK   NUMBER;&lt;br/&gt;  V_RESULT VARCHAR2(1);&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT A.RANK&lt;br/&gt;  INTO V_RANK&lt;br/&gt;  FROM USER_ROLES A&lt;br/&gt;  WHERE A.ID =&lt;br/&gt;    ( SELECT B.USE_ROL_ID FROM USERS B WHERE B.ID = P_USE_ID&lt;br/&gt;    );&lt;br/&gt;  IF V_RANK   = 1 THEN&lt;br/&gt;    V_RESULT := &apos;Y&apos;;&lt;br/&gt;  ELSE&lt;br/&gt;    V_RESULT := &apos;N&apos;;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END IS_USER_ADMINISTRATOR;&lt;br/&gt;FUNCTION IS_REVENUE_PROJECT_TYPE(&lt;br/&gt;    P_PRO_TYP_ID IN INTEGER)&lt;br/&gt;  RETURN VARCHAR2&lt;br/&gt;AS&lt;br/&gt;  V_NAME   VARCHAR2(400);&lt;br/&gt;  V_RESULT VARCHAR2(1);&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT UPPER(NAME)&lt;br/&gt;  INTO V_NAME&lt;br/&gt;  FROM PROJECT_TYPES&lt;br/&gt;  WHERE ID = P_PRO_TYP_ID;&lt;br/&gt;  IF V_NAME IN (&apos;FIXED&apos;, &apos;TNM&apos;) THEN&lt;br/&gt;    V_RESULT := &apos;Y&apos;;&lt;br/&gt;  ELSE&lt;br/&gt;    V_RESULT := &apos;N&apos;;&lt;br/&gt;  END IF;&lt;br/&gt;  RETURN V_RESULT;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END IS_REVENUE_PROJECT_TYPE;&lt;br/&gt;FUNCTION GET_TIMESHEET_HOURS_NORMALIZED(&lt;br/&gt;    P_PRO_USE_ID IN INTEGER)&lt;br/&gt;  RETURN NUMBER&lt;br/&gt;AS&lt;br/&gt;  V_NORMALIZED_HOURS NUMBER := 0;&lt;br/&gt;  V_BUSINESS_DAYS    NUMBER;&lt;br/&gt;  V_RESULT           NUMBER;&lt;br/&gt;BEGIN&lt;br/&gt;  FOR C1REC IN&lt;br/&gt;  (SELECT * FROM PROJECT_USERS WHERE ID = P_PRO_USE_ID&lt;br/&gt;  )&lt;br/&gt;  LOOP&lt;br/&gt;    FOR C2REC IN&lt;br/&gt;    (SELECT * FROM TIMESHEETS WHERE PRO_USE_ID = C1REC.ID ORDER BY FOR_DATE&lt;br/&gt;    )&lt;br/&gt;    LOOP&lt;br/&gt;      V_NORMALIZED_HOURS := V_NORMALIZED_HOURS + GET_NORMALIZED_HOURS(C1REC.USE_ID, C2REC.FOR_DATE, NVL(C2REC.HOURS, 0));&lt;br/&gt;    END LOOP;&lt;br/&gt;    V_BUSINESS_DAYS := GET_BUSINESS_DAYS(C1REC.START_DATE, C1REC.END_DATE);&lt;br/&gt;  END LOOP;&lt;br/&gt;  SELECT DECODE(V_BUSINESS_DAYS, NULL, 1, 0, 1, V_BUSINESS_DAYS)&lt;br/&gt;  INTO V_BUSINESS_DAYS&lt;br/&gt;  FROM DUAL;&lt;br/&gt;  V_RESULT := V_NORMALIZED_HOURS / V_BUSINESS_DAYS;&lt;br/&gt;  RETURN NVL(V_RESULT, 0);&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END GET_TIMESHEET_HOURS_NORMALIZED;&lt;br/&gt;PROCEDURE ASSIGNMENT_TIMESHEET_CHECK(&lt;br/&gt;    P_PRO_USE_ID IN INTEGER,&lt;br/&gt;    P_START_DATE IN DATE,&lt;br/&gt;    P_END_DATE   IN DATE)&lt;br/&gt;AS&lt;br/&gt;  V_MIN_TIMESHEET_DATE DATE;&lt;br/&gt;  V_MAX_TIMESHEET_DATE DATE;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT MIN(FOR_DATE),&lt;br/&gt;    MAX(FOR_DATE)&lt;br/&gt;  INTO V_MIN_TIMESHEET_DATE,&lt;br/&gt;    V_MAX_TIMESHEET_DATE&lt;br/&gt;  FROM TIMESHEETS&lt;br/&gt;  WHERE PRO_USE_ID = P_PRO_USE_ID;&lt;br/&gt;  IF P_START_DATE  &gt; V_MIN_TIMESHEET_DATE THEN&lt;br/&gt;    RAISE_APPLICATION_ERROR(-20001, &apos;Timesheets exist before entered assignment start date.&apos;);&lt;br/&gt;  END IF;&lt;br/&gt;  IF P_END_DATE &lt; V_MAX_TIMESHEET_DATE THEN&lt;br/&gt;    RAISE_APPLICATION_ERROR(-20001, &apos;Timesheets exist after entered assignment end date.&apos;);&lt;br/&gt;  END IF;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END ASSIGNMENT_TIMESHEET_CHECK;&lt;br/&gt;PROCEDURE REFRESH_AUTO_ASSIGNMENTS(&lt;br/&gt;    P_KEYS IN APEX_APPLICATION_GLOBAL.VC_ARR2)&lt;br/&gt;AS&lt;br/&gt;  V_TEC_ID   INTEGER;&lt;br/&gt;  V_YES_FLAG INTEGER;&lt;br/&gt;  V_COUNT    INTEGER;&lt;br/&gt;BEGIN&lt;br/&gt;  SELECT ID&lt;br/&gt;  INTO V_YES_FLAG&lt;br/&gt;  FROM FLAG_STATUSES&lt;br/&gt;  WHERE UPPER(NAME) = &apos;Y&apos;;&lt;br/&gt;  FOR I IN 1..P_KEYS.COUNT LOOP&lt;br/&gt;    FOR C1REC IN&lt;br/&gt;    (SELECT * FROM USERS WHERE ID = P_KEYS(I)&lt;br/&gt;    )&lt;br/&gt;    LOOP&lt;br/&gt;      IF C1REC.AUTO_COMPUTE = V_YES_FLAG THEN&lt;br/&gt;        SELECT TEC_ID&lt;br/&gt;        INTO V_TEC_ID&lt;br/&gt;        FROM TECHNOLOGY_USERS&lt;br/&gt;        WHERE USE_ID = P_KEYS(I)&lt;br/&gt;        AND PRIMARY_SKILL = V_YES_FLAG;&lt;br/&gt;        FOR C2REC IN&lt;br/&gt;        (SELECT    *&lt;br/&gt;        FROM PROJECTS&lt;br/&gt;        WHERE XRAYLOGIC.CAN_PERUSE_DATA(DELIVERY_MANAGER_ID, C1REC.ID) = &apos;Y&apos;&lt;br/&gt;        )&lt;br/&gt;        LOOP&lt;br/&gt;          SELECT COUNT(*)&lt;br/&gt;          INTO V_COUNT&lt;br/&gt;          FROM PROJECT_USERS&lt;br/&gt;          WHERE USE_ID     = C1REC.ID&lt;br/&gt;          AND PRO_ID       = C2REC.ID&lt;br/&gt;          AND AUTO_COMPUTE = V_YES_FLAG;&lt;br/&gt;          IF V_COUNT       = 0 THEN&lt;br/&gt;            INSERT&lt;br/&gt;            INTO PROJECT_USERS&lt;br/&gt;              (&lt;br/&gt;                ID,&lt;br/&gt;                START_DATE,&lt;br/&gt;                END_DATE,&lt;br/&gt;                HOURS_PER_DAY,&lt;br/&gt;                BILLING_RATE,&lt;br/&gt;                COST_RATE,&lt;br/&gt;                EFFORT_HOURS,&lt;br/&gt;                BILLED_HOURS,&lt;br/&gt;                DELIVERY_DUE_ALERT,&lt;br/&gt;                INVOICING_DUE_ALERT,&lt;br/&gt;                PAYMENT_DUE_ALERT,&lt;br/&gt;                COMMENTS,&lt;br/&gt;                PRO_ID,&lt;br/&gt;                TEC_ID,&lt;br/&gt;                USE_ID,&lt;br/&gt;                DES_ID,&lt;br/&gt;                CONSUMED_HOURS,&lt;br/&gt;                EFFECTIVE_DATE,&lt;br/&gt;                AUTO_COMPUTE&lt;br/&gt;              )&lt;br/&gt;            SELECT PRO_USE_SEQ.NEXTVAL,&lt;br/&gt;              C2REC.START_DATE,&lt;br/&gt;              C2REC.END_DATE,&lt;br/&gt;              0,&lt;br/&gt;              XRAYLOGIC.GET_SKILL_BILLING_RATE(V_TEC_ID, C1REC.ID, C2REC.START_DATE),&lt;br/&gt;              XRAYLOGIC.GET_SKILL_COST_RATE(V_TEC_ID, C1REC.ID, C2REC.START_DATE),&lt;br/&gt;              0,&lt;br/&gt;              0,&lt;br/&gt;              V_YES_FLAG,&lt;br/&gt;              V_YES_FLAG,&lt;br/&gt;              V_YES_FLAG,&lt;br/&gt;              &apos;Auto assignment created. SKIP ALLOCATION CHECK&apos;,&lt;br/&gt;              C2REC.ID,&lt;br/&gt;              V_TEC_ID, &lt;br/&gt;              C1REC.ID,&lt;br/&gt;              C1REC.DES_ID,&lt;br/&gt;              0,&lt;br/&gt;              C2REC.START_DATE,&lt;br/&gt;              C1REC.AUTO_COMPUTE&lt;br/&gt;            FROM DUAL;&lt;br/&gt;          ELSIF V_COUNT = 1 THEN&lt;br/&gt;            UPDATE PROJECT_USERS&lt;br/&gt;            SET START_DATE   = C2REC.START_DATE,&lt;br/&gt;              END_DATE       = C2REC.END_DATE,&lt;br/&gt;              COMMENTS       = &apos;Auto assignment created. SKIP ALLOCATION CHECK&apos;&lt;br/&gt;            WHERE USE_ID     = C1REC.ID&lt;br/&gt;            AND PRO_ID       = C2REC.ID&lt;br/&gt;            AND AUTO_COMPUTE = V_YES_FLAG;&lt;br/&gt;          ELSE&lt;br/&gt;            RAISE_APPLICATION_ERROR(-20001, XRAYLOGIC.GET_RESOURCE_NAME(C1REC.ID) || &apos; (user_id = &apos; || C1REC.ID || &apos;)&apos; ||&lt;br/&gt;              &apos; has more than one auto_compute assignment (&apos; || V_COUNT || &apos;) for project &apos; ||&lt;br/&gt;              C2REC.PROJECT_NAME || &apos; (project_id = &apos; || C2REC.ID || &apos;).&apos;);&lt;br/&gt;          END IF;&lt;br/&gt;        END LOOP;&lt;br/&gt;      END IF;&lt;br/&gt;    END LOOP;&lt;br/&gt;  END LOOP;&lt;br/&gt;EXCEPTION&lt;br/&gt;WHEN OTHERS THEN&lt;br/&gt;  V_ERROR := SQLERRM;&lt;br/&gt;  RAISE_APPLICATION_ERROR(-20001, V_ERROR);&lt;br/&gt;END REFRESH_AUTO_ASSIGNMENTS;&lt;br/&gt;END XRAYLOGIC;</source>
</body>
</PackageOracle>